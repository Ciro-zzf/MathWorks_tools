// -------------------------------------------------------------
// 
// File Name: hdl_prj\hdlsrc\ModeS_ADI_Codegen\Detector_ip_src_NoiseFloor.v
// Created: 2017-07-24 12:12:58
// 
// Generated by MATLAB 9.2 and HDL Coder 3.10
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: Detector_ip_src_NoiseFloor
// Source Path: ModeS_ADI_Codegen/Detector/CalcNF/NoiseFloor
// Hierarchy Level: 2
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module Detector_ip_src_NoiseFloor
          (clk,
           reset,
           enb,
           NoiseFloor_in,
           NoiseFloor_out);


  input   clk;
  input   reset;
  input   enb;
  input   signed [15:0] NoiseFloor_in;  // sfix16_En15
  output  signed [15:0] NoiseFloor_out;  // sfix16_En16

  wire signed [31:0] gain_cast;  // sfix32_En35
  wire signed [31:0] product64;  // sfix32_En37
  reg signed [31:0] product64_out_buff_out_pipe_reg [0:1];  // sfix32 [2]
  wire signed [31:0] product64_out_buff_out_pipe_reg_next [0:1];  // sfix32_En37 [2]
  wire signed [31:0] product64_out_pipe;  // sfix32_En37
  wire signed [31:0] finalsum_cast1;  // sfix32_En32
  wire signed [31:0] sum_1_cast1;  // sfix32_En32
  wire signed [31:0] sum_2_cast1;  // sfix32_En32
  wire signed [31:0] sum_3_cast1;  // sfix32_En32
  wire signed [31:0] sum_4_cast1;  // sfix32_En32
  wire signed [31:0] sum_5_cast1;  // sfix32_En32
  wire signed [31:0] sum_6_cast1;  // sfix32_En32
  wire signed [31:0] sum_7_cast1;  // sfix32_En32
  wire signed [31:0] sum_8_cast1;  // sfix32_En32
  wire signed [31:0] sum_9_cast1;  // sfix32_En32
  wire signed [31:0] sum_10_cast1;  // sfix32_En32
  wire signed [31:0] sum_11_cast1;  // sfix32_En32
  wire signed [31:0] sum_12_cast1;  // sfix32_En32
  wire signed [31:0] sum_13_cast1;  // sfix32_En32
  wire signed [31:0] sum_14_cast1;  // sfix32_En32
  wire signed [31:0] sum_15_cast1;  // sfix32_En32
  wire signed [31:0] sum_16_cast1;  // sfix32_En32
  wire signed [31:0] sum_17_cast1;  // sfix32_En32
  wire signed [31:0] sum_18_cast1;  // sfix32_En32
  wire signed [31:0] sum_19_cast1;  // sfix32_En32
  wire signed [31:0] sum_20_cast1;  // sfix32_En32
  wire signed [31:0] sum_21_cast1;  // sfix32_En32
  wire signed [31:0] sum_22_cast1;  // sfix32_En32
  wire signed [31:0] sum_23_cast1;  // sfix32_En32
  wire signed [31:0] sum_24_cast1;  // sfix32_En32
  wire signed [31:0] sum_25_cast1;  // sfix32_En32
  wire signed [31:0] sum_26_cast1;  // sfix32_En32
  wire signed [31:0] sum_27_cast1;  // sfix32_En32
  wire signed [31:0] sum_28_cast1;  // sfix32_En32
  wire signed [31:0] sum_29_cast1;  // sfix32_En32
  wire signed [31:0] sum_30_cast1;  // sfix32_En32
  wire signed [31:0] sum_31_cast1;  // sfix32_En32
  wire signed [31:0] sum_32_cast1;  // sfix32_En32
  wire signed [31:0] sum_33_cast1;  // sfix32_En32
  wire signed [31:0] sum_34_cast1;  // sfix32_En32
  wire signed [31:0] sum_35_cast1;  // sfix32_En32
  wire signed [31:0] sum_36_cast1;  // sfix32_En32
  wire signed [31:0] sum_37_cast1;  // sfix32_En32
  wire signed [31:0] sum_38_cast1;  // sfix32_En32
  wire signed [31:0] sum_39_cast1;  // sfix32_En32
  wire signed [31:0] sum_40_cast1;  // sfix32_En32
  wire signed [31:0] sum_41_cast1;  // sfix32_En32
  wire signed [31:0] sum_42_cast1;  // sfix32_En32
  wire signed [31:0] sum_43_cast1;  // sfix32_En32
  wire signed [31:0] sum_44_cast1;  // sfix32_En32
  wire signed [31:0] sum_45_cast1;  // sfix32_En32
  wire signed [31:0] sum_46_cast1;  // sfix32_En32
  wire signed [31:0] sum_47_cast1;  // sfix32_En32
  wire signed [31:0] sum_48_cast1;  // sfix32_En32
  wire signed [31:0] sum_49_cast1;  // sfix32_En32
  wire signed [31:0] sum_50_cast1;  // sfix32_En32
  wire signed [31:0] sum_51_cast1;  // sfix32_En32
  wire signed [31:0] sum_52_cast1;  // sfix32_En32
  wire signed [31:0] sum_53_cast1;  // sfix32_En32
  wire signed [31:0] sum_54_cast1;  // sfix32_En32
  wire signed [31:0] sum_55_cast1;  // sfix32_En32
  wire signed [31:0] sum_56_cast1;  // sfix32_En32
  wire signed [31:0] sum_57_cast1;  // sfix32_En32
  wire signed [31:0] sum_58_cast1;  // sfix32_En32
  wire signed [31:0] sum_59_cast1;  // sfix32_En32
  wire signed [31:0] sum_60_cast1;  // sfix32_En32
  wire signed [31:0] sum_61_cast1;  // sfix32_En32
  wire signed [31:0] sum_62_cast1;  // sfix32_En32
  wire signed [31:0] sum_63;  // sfix32_En32
  reg signed [31:0] del_63;  // sfix32_En32
  wire signed [32:0] adder_add_cast;  // sfix33_En32
  wire signed [32:0] adder_add_cast_1;  // sfix33_En32
  wire signed [32:0] sum_62_temp;  // sfix33_En32
  wire signed [31:0] sum_62;  // sfix32_En32
  reg signed [31:0] del_62;  // sfix32_En32
  wire signed [32:0] adder_add_cast_2;  // sfix33_En32
  wire signed [32:0] adder_add_cast_3;  // sfix33_En32
  wire signed [32:0] sum_61_temp;  // sfix33_En32
  wire signed [31:0] sum_61;  // sfix32_En32
  reg signed [31:0] del_61;  // sfix32_En32
  wire signed [32:0] adder_add_cast_4;  // sfix33_En32
  wire signed [32:0] adder_add_cast_5;  // sfix33_En32
  wire signed [32:0] sum_60_temp;  // sfix33_En32
  wire signed [31:0] sum_60;  // sfix32_En32
  reg signed [31:0] del_60;  // sfix32_En32
  wire signed [32:0] adder_add_cast_6;  // sfix33_En32
  wire signed [32:0] adder_add_cast_7;  // sfix33_En32
  wire signed [32:0] sum_59_temp;  // sfix33_En32
  wire signed [31:0] sum_59;  // sfix32_En32
  reg signed [31:0] del_59;  // sfix32_En32
  wire signed [32:0] adder_add_cast_8;  // sfix33_En32
  wire signed [32:0] adder_add_cast_9;  // sfix33_En32
  wire signed [32:0] sum_58_temp;  // sfix33_En32
  wire signed [31:0] sum_58;  // sfix32_En32
  reg signed [31:0] del_58;  // sfix32_En32
  wire signed [32:0] adder_add_cast_10;  // sfix33_En32
  wire signed [32:0] adder_add_cast_11;  // sfix33_En32
  wire signed [32:0] sum_57_temp;  // sfix33_En32
  wire signed [31:0] sum_57;  // sfix32_En32
  reg signed [31:0] del_57;  // sfix32_En32
  wire signed [32:0] adder_add_cast_12;  // sfix33_En32
  wire signed [32:0] adder_add_cast_13;  // sfix33_En32
  wire signed [32:0] sum_56_temp;  // sfix33_En32
  wire signed [31:0] sum_56;  // sfix32_En32
  reg signed [31:0] del_56;  // sfix32_En32
  wire signed [32:0] adder_add_cast_14;  // sfix33_En32
  wire signed [32:0] adder_add_cast_15;  // sfix33_En32
  wire signed [32:0] sum_55_temp;  // sfix33_En32
  wire signed [31:0] sum_55;  // sfix32_En32
  reg signed [31:0] del_55;  // sfix32_En32
  wire signed [32:0] adder_add_cast_16;  // sfix33_En32
  wire signed [32:0] adder_add_cast_17;  // sfix33_En32
  wire signed [32:0] sum_54_temp;  // sfix33_En32
  wire signed [31:0] sum_54;  // sfix32_En32
  reg signed [31:0] del_54;  // sfix32_En32
  wire signed [32:0] adder_add_cast_18;  // sfix33_En32
  wire signed [32:0] adder_add_cast_19;  // sfix33_En32
  wire signed [32:0] sum_53_temp;  // sfix33_En32
  wire signed [31:0] sum_53;  // sfix32_En32
  reg signed [31:0] del_53;  // sfix32_En32
  wire signed [32:0] adder_add_cast_20;  // sfix33_En32
  wire signed [32:0] adder_add_cast_21;  // sfix33_En32
  wire signed [32:0] sum_52_temp;  // sfix33_En32
  wire signed [31:0] sum_52;  // sfix32_En32
  reg signed [31:0] del_52;  // sfix32_En32
  wire signed [32:0] adder_add_cast_22;  // sfix33_En32
  wire signed [32:0] adder_add_cast_23;  // sfix33_En32
  wire signed [32:0] sum_51_temp;  // sfix33_En32
  wire signed [31:0] sum_51;  // sfix32_En32
  reg signed [31:0] del_51;  // sfix32_En32
  wire signed [32:0] adder_add_cast_24;  // sfix33_En32
  wire signed [32:0] adder_add_cast_25;  // sfix33_En32
  wire signed [32:0] sum_50_temp;  // sfix33_En32
  wire signed [31:0] sum_50;  // sfix32_En32
  reg signed [31:0] del_50;  // sfix32_En32
  wire signed [32:0] adder_add_cast_26;  // sfix33_En32
  wire signed [32:0] adder_add_cast_27;  // sfix33_En32
  wire signed [32:0] sum_49_temp;  // sfix33_En32
  wire signed [31:0] sum_49;  // sfix32_En32
  reg signed [31:0] del_49;  // sfix32_En32
  wire signed [32:0] adder_add_cast_28;  // sfix33_En32
  wire signed [32:0] adder_add_cast_29;  // sfix33_En32
  wire signed [32:0] sum_48_temp;  // sfix33_En32
  wire signed [31:0] sum_48;  // sfix32_En32
  reg signed [31:0] del_48;  // sfix32_En32
  wire signed [32:0] adder_add_cast_30;  // sfix33_En32
  wire signed [32:0] adder_add_cast_31;  // sfix33_En32
  wire signed [32:0] sum_47_temp;  // sfix33_En32
  wire signed [31:0] sum_47;  // sfix32_En32
  reg signed [31:0] del_47;  // sfix32_En32
  wire signed [32:0] adder_add_cast_32;  // sfix33_En32
  wire signed [32:0] adder_add_cast_33;  // sfix33_En32
  wire signed [32:0] sum_46_temp;  // sfix33_En32
  wire signed [31:0] sum_46;  // sfix32_En32
  reg signed [31:0] del_46;  // sfix32_En32
  wire signed [32:0] adder_add_cast_34;  // sfix33_En32
  wire signed [32:0] adder_add_cast_35;  // sfix33_En32
  wire signed [32:0] sum_45_temp;  // sfix33_En32
  wire signed [31:0] sum_45;  // sfix32_En32
  reg signed [31:0] del_45;  // sfix32_En32
  wire signed [32:0] adder_add_cast_36;  // sfix33_En32
  wire signed [32:0] adder_add_cast_37;  // sfix33_En32
  wire signed [32:0] sum_44_temp;  // sfix33_En32
  wire signed [31:0] sum_44;  // sfix32_En32
  reg signed [31:0] del_44;  // sfix32_En32
  wire signed [32:0] adder_add_cast_38;  // sfix33_En32
  wire signed [32:0] adder_add_cast_39;  // sfix33_En32
  wire signed [32:0] sum_43_temp;  // sfix33_En32
  wire signed [31:0] sum_43;  // sfix32_En32
  reg signed [31:0] del_43;  // sfix32_En32
  wire signed [32:0] adder_add_cast_40;  // sfix33_En32
  wire signed [32:0] adder_add_cast_41;  // sfix33_En32
  wire signed [32:0] sum_42_temp;  // sfix33_En32
  wire signed [31:0] sum_42;  // sfix32_En32
  reg signed [31:0] del_42;  // sfix32_En32
  wire signed [32:0] adder_add_cast_42;  // sfix33_En32
  wire signed [32:0] adder_add_cast_43;  // sfix33_En32
  wire signed [32:0] sum_41_temp;  // sfix33_En32
  wire signed [31:0] sum_41;  // sfix32_En32
  reg signed [31:0] del_41;  // sfix32_En32
  wire signed [32:0] adder_add_cast_44;  // sfix33_En32
  wire signed [32:0] adder_add_cast_45;  // sfix33_En32
  wire signed [32:0] sum_40_temp;  // sfix33_En32
  wire signed [31:0] sum_40;  // sfix32_En32
  reg signed [31:0] del_40;  // sfix32_En32
  wire signed [32:0] adder_add_cast_46;  // sfix33_En32
  wire signed [32:0] adder_add_cast_47;  // sfix33_En32
  wire signed [32:0] sum_39_temp;  // sfix33_En32
  wire signed [31:0] sum_39;  // sfix32_En32
  reg signed [31:0] del_39;  // sfix32_En32
  wire signed [32:0] adder_add_cast_48;  // sfix33_En32
  wire signed [32:0] adder_add_cast_49;  // sfix33_En32
  wire signed [32:0] sum_38_temp;  // sfix33_En32
  wire signed [31:0] sum_38;  // sfix32_En32
  reg signed [31:0] del_38;  // sfix32_En32
  wire signed [32:0] adder_add_cast_50;  // sfix33_En32
  wire signed [32:0] adder_add_cast_51;  // sfix33_En32
  wire signed [32:0] sum_37_temp;  // sfix33_En32
  wire signed [31:0] sum_37;  // sfix32_En32
  reg signed [31:0] del_37;  // sfix32_En32
  wire signed [32:0] adder_add_cast_52;  // sfix33_En32
  wire signed [32:0] adder_add_cast_53;  // sfix33_En32
  wire signed [32:0] sum_36_temp;  // sfix33_En32
  wire signed [31:0] sum_36;  // sfix32_En32
  reg signed [31:0] del_36;  // sfix32_En32
  wire signed [32:0] adder_add_cast_54;  // sfix33_En32
  wire signed [32:0] adder_add_cast_55;  // sfix33_En32
  wire signed [32:0] sum_35_temp;  // sfix33_En32
  wire signed [31:0] sum_35;  // sfix32_En32
  reg signed [31:0] del_35;  // sfix32_En32
  wire signed [32:0] adder_add_cast_56;  // sfix33_En32
  wire signed [32:0] adder_add_cast_57;  // sfix33_En32
  wire signed [32:0] sum_34_temp;  // sfix33_En32
  wire signed [31:0] sum_34;  // sfix32_En32
  reg signed [31:0] del_34;  // sfix32_En32
  wire signed [32:0] adder_add_cast_58;  // sfix33_En32
  wire signed [32:0] adder_add_cast_59;  // sfix33_En32
  wire signed [32:0] sum_33_temp;  // sfix33_En32
  wire signed [31:0] sum_33;  // sfix32_En32
  reg signed [31:0] del_33;  // sfix32_En32
  wire signed [32:0] adder_add_cast_60;  // sfix33_En32
  wire signed [32:0] adder_add_cast_61;  // sfix33_En32
  wire signed [32:0] sum_32_temp;  // sfix33_En32
  wire signed [31:0] sum_32;  // sfix32_En32
  reg signed [31:0] del_32;  // sfix32_En32
  wire signed [32:0] adder_add_cast_62;  // sfix33_En32
  wire signed [32:0] adder_add_cast_63;  // sfix33_En32
  wire signed [32:0] sum_31_temp;  // sfix33_En32
  wire signed [31:0] sum_31;  // sfix32_En32
  reg signed [31:0] del_31;  // sfix32_En32
  wire signed [32:0] adder_add_cast_64;  // sfix33_En32
  wire signed [32:0] adder_add_cast_65;  // sfix33_En32
  wire signed [32:0] sum_30_temp;  // sfix33_En32
  wire signed [31:0] sum_30;  // sfix32_En32
  reg signed [31:0] del_30;  // sfix32_En32
  wire signed [32:0] adder_add_cast_66;  // sfix33_En32
  wire signed [32:0] adder_add_cast_67;  // sfix33_En32
  wire signed [32:0] sum_29_temp;  // sfix33_En32
  wire signed [31:0] sum_29;  // sfix32_En32
  reg signed [31:0] del_29;  // sfix32_En32
  wire signed [32:0] adder_add_cast_68;  // sfix33_En32
  wire signed [32:0] adder_add_cast_69;  // sfix33_En32
  wire signed [32:0] sum_28_temp;  // sfix33_En32
  wire signed [31:0] sum_28;  // sfix32_En32
  reg signed [31:0] del_28;  // sfix32_En32
  wire signed [32:0] adder_add_cast_70;  // sfix33_En32
  wire signed [32:0] adder_add_cast_71;  // sfix33_En32
  wire signed [32:0] sum_27_temp;  // sfix33_En32
  wire signed [31:0] sum_27;  // sfix32_En32
  reg signed [31:0] del_27;  // sfix32_En32
  wire signed [32:0] adder_add_cast_72;  // sfix33_En32
  wire signed [32:0] adder_add_cast_73;  // sfix33_En32
  wire signed [32:0] sum_26_temp;  // sfix33_En32
  wire signed [31:0] sum_26;  // sfix32_En32
  reg signed [31:0] del_26;  // sfix32_En32
  wire signed [32:0] adder_add_cast_74;  // sfix33_En32
  wire signed [32:0] adder_add_cast_75;  // sfix33_En32
  wire signed [32:0] sum_25_temp;  // sfix33_En32
  wire signed [31:0] sum_25;  // sfix32_En32
  reg signed [31:0] del_25;  // sfix32_En32
  wire signed [32:0] adder_add_cast_76;  // sfix33_En32
  wire signed [32:0] adder_add_cast_77;  // sfix33_En32
  wire signed [32:0] sum_24_temp;  // sfix33_En32
  wire signed [31:0] sum_24;  // sfix32_En32
  reg signed [31:0] del_24;  // sfix32_En32
  wire signed [32:0] adder_add_cast_78;  // sfix33_En32
  wire signed [32:0] adder_add_cast_79;  // sfix33_En32
  wire signed [32:0] sum_23_temp;  // sfix33_En32
  wire signed [31:0] sum_23;  // sfix32_En32
  reg signed [31:0] del_23;  // sfix32_En32
  wire signed [32:0] adder_add_cast_80;  // sfix33_En32
  wire signed [32:0] adder_add_cast_81;  // sfix33_En32
  wire signed [32:0] sum_22_temp;  // sfix33_En32
  wire signed [31:0] sum_22;  // sfix32_En32
  reg signed [31:0] del_22;  // sfix32_En32
  wire signed [32:0] adder_add_cast_82;  // sfix33_En32
  wire signed [32:0] adder_add_cast_83;  // sfix33_En32
  wire signed [32:0] sum_21_temp;  // sfix33_En32
  wire signed [31:0] sum_21;  // sfix32_En32
  reg signed [31:0] del_21;  // sfix32_En32
  wire signed [32:0] adder_add_cast_84;  // sfix33_En32
  wire signed [32:0] adder_add_cast_85;  // sfix33_En32
  wire signed [32:0] sum_20_temp;  // sfix33_En32
  wire signed [31:0] sum_20;  // sfix32_En32
  reg signed [31:0] del_20;  // sfix32_En32
  wire signed [32:0] adder_add_cast_86;  // sfix33_En32
  wire signed [32:0] adder_add_cast_87;  // sfix33_En32
  wire signed [32:0] sum_19_temp;  // sfix33_En32
  wire signed [31:0] sum_19;  // sfix32_En32
  reg signed [31:0] del_19;  // sfix32_En32
  wire signed [32:0] adder_add_cast_88;  // sfix33_En32
  wire signed [32:0] adder_add_cast_89;  // sfix33_En32
  wire signed [32:0] sum_18_temp;  // sfix33_En32
  wire signed [31:0] sum_18;  // sfix32_En32
  reg signed [31:0] del_18;  // sfix32_En32
  wire signed [32:0] adder_add_cast_90;  // sfix33_En32
  wire signed [32:0] adder_add_cast_91;  // sfix33_En32
  wire signed [32:0] sum_17_temp;  // sfix33_En32
  wire signed [31:0] sum_17;  // sfix32_En32
  reg signed [31:0] del_17;  // sfix32_En32
  wire signed [32:0] adder_add_cast_92;  // sfix33_En32
  wire signed [32:0] adder_add_cast_93;  // sfix33_En32
  wire signed [32:0] sum_16_temp;  // sfix33_En32
  wire signed [31:0] sum_16;  // sfix32_En32
  reg signed [31:0] del_16;  // sfix32_En32
  wire signed [32:0] adder_add_cast_94;  // sfix33_En32
  wire signed [32:0] adder_add_cast_95;  // sfix33_En32
  wire signed [32:0] sum_15_temp;  // sfix33_En32
  wire signed [31:0] sum_15;  // sfix32_En32
  reg signed [31:0] del_15;  // sfix32_En32
  wire signed [32:0] adder_add_cast_96;  // sfix33_En32
  wire signed [32:0] adder_add_cast_97;  // sfix33_En32
  wire signed [32:0] sum_14_temp;  // sfix33_En32
  wire signed [31:0] sum_14;  // sfix32_En32
  reg signed [31:0] del_14;  // sfix32_En32
  wire signed [32:0] adder_add_cast_98;  // sfix33_En32
  wire signed [32:0] adder_add_cast_99;  // sfix33_En32
  wire signed [32:0] sum_13_temp;  // sfix33_En32
  wire signed [31:0] sum_13;  // sfix32_En32
  reg signed [31:0] del_13;  // sfix32_En32
  wire signed [32:0] adder_add_cast_100;  // sfix33_En32
  wire signed [32:0] adder_add_cast_101;  // sfix33_En32
  wire signed [32:0] sum_12_temp;  // sfix33_En32
  wire signed [31:0] sum_12;  // sfix32_En32
  reg signed [31:0] del_12;  // sfix32_En32
  wire signed [32:0] adder_add_cast_102;  // sfix33_En32
  wire signed [32:0] adder_add_cast_103;  // sfix33_En32
  wire signed [32:0] sum_11_temp;  // sfix33_En32
  wire signed [31:0] sum_11;  // sfix32_En32
  reg signed [31:0] del_11;  // sfix32_En32
  wire signed [32:0] adder_add_cast_104;  // sfix33_En32
  wire signed [32:0] adder_add_cast_105;  // sfix33_En32
  wire signed [32:0] sum_10_temp;  // sfix33_En32
  wire signed [31:0] sum_10;  // sfix32_En32
  reg signed [31:0] del_10;  // sfix32_En32
  wire signed [32:0] adder_add_cast_106;  // sfix33_En32
  wire signed [32:0] adder_add_cast_107;  // sfix33_En32
  wire signed [32:0] sum_9_temp;  // sfix33_En32
  wire signed [31:0] sum_9;  // sfix32_En32
  reg signed [31:0] del_9;  // sfix32_En32
  wire signed [32:0] adder_add_cast_108;  // sfix33_En32
  wire signed [32:0] adder_add_cast_109;  // sfix33_En32
  wire signed [32:0] sum_8_temp;  // sfix33_En32
  wire signed [31:0] sum_8;  // sfix32_En32
  reg signed [31:0] del_8;  // sfix32_En32
  wire signed [32:0] adder_add_cast_110;  // sfix33_En32
  wire signed [32:0] adder_add_cast_111;  // sfix33_En32
  wire signed [32:0] sum_7_temp;  // sfix33_En32
  wire signed [31:0] sum_7;  // sfix32_En32
  reg signed [31:0] del_7;  // sfix32_En32
  wire signed [32:0] adder_add_cast_112;  // sfix33_En32
  wire signed [32:0] adder_add_cast_113;  // sfix33_En32
  wire signed [32:0] sum_6_temp;  // sfix33_En32
  wire signed [31:0] sum_6;  // sfix32_En32
  reg signed [31:0] del_6;  // sfix32_En32
  wire signed [32:0] adder_add_cast_114;  // sfix33_En32
  wire signed [32:0] adder_add_cast_115;  // sfix33_En32
  wire signed [32:0] sum_5_temp;  // sfix33_En32
  wire signed [31:0] sum_5;  // sfix32_En32
  reg signed [31:0] del_5;  // sfix32_En32
  wire signed [32:0] adder_add_cast_116;  // sfix33_En32
  wire signed [32:0] adder_add_cast_117;  // sfix33_En32
  wire signed [32:0] sum_4_temp;  // sfix33_En32
  wire signed [31:0] sum_4;  // sfix32_En32
  reg signed [31:0] del_4;  // sfix32_En32
  wire signed [32:0] adder_add_cast_118;  // sfix33_En32
  wire signed [32:0] adder_add_cast_119;  // sfix33_En32
  wire signed [32:0] sum_3_temp;  // sfix33_En32
  wire signed [31:0] sum_3;  // sfix32_En32
  reg signed [31:0] del_3;  // sfix32_En32
  wire signed [32:0] adder_add_cast_120;  // sfix33_En32
  wire signed [32:0] adder_add_cast_121;  // sfix33_En32
  wire signed [32:0] sum_2_temp;  // sfix33_En32
  wire signed [31:0] sum_2;  // sfix32_En32
  reg signed [31:0] del_2;  // sfix32_En32
  wire signed [32:0] adder_add_cast_122;  // sfix33_En32
  wire signed [32:0] adder_add_cast_123;  // sfix33_En32
  wire signed [32:0] sum_1_temp;  // sfix33_En32
  wire signed [31:0] sum_1;  // sfix32_En32
  reg signed [31:0] del_1;  // sfix32_En32
  wire signed [32:0] adder_add_cast_124;  // sfix33_En32
  wire signed [32:0] adder_add_cast_125;  // sfix33_En32
  wire signed [32:0] finalsum_temp;  // sfix33_En32
  wire signed [31:0] finalsum;  // sfix32_En32
  wire signed [15:0] output_typeconvert;  // sfix16_En16


  // coeff64
  assign gain_cast = {{2{NoiseFloor_in[15]}}, {NoiseFloor_in, 14'b00000000000000}};
  assign product64 = {gain_cast[29:0], 2'b00};



  // coeff1
  // 
  // coeff2
  // 
  // coeff3
  // 
  // coeff4
  // 
  // coeff5
  // 
  // coeff6
  // 
  // coeff7
  // 
  // coeff8
  // 
  // coeff9
  // 
  // coeff10
  // 
  // coeff11
  // 
  // coeff12
  // 
  // coeff13
  // 
  // coeff14
  // 
  // coeff15
  // 
  // coeff16
  // 
  // coeff17
  // 
  // coeff18
  // 
  // coeff19
  // 
  // coeff20
  // 
  // coeff21
  // 
  // coeff22
  // 
  // coeff23
  // 
  // coeff24
  // 
  // coeff25
  // 
  // coeff26
  // 
  // coeff27
  // 
  // coeff28
  // 
  // coeff29
  // 
  // coeff30
  // 
  // coeff31
  // 
  // coeff32
  // 
  // coeff33
  // 
  // coeff34
  // 
  // coeff35
  // 
  // coeff36
  // 
  // coeff37
  // 
  // coeff38
  // 
  // coeff39
  // 
  // coeff40
  // 
  // coeff41
  // 
  // coeff42
  // 
  // coeff43
  // 
  // coeff44
  // 
  // coeff45
  // 
  // coeff46
  // 
  // coeff47
  // 
  // coeff48
  // 
  // coeff49
  // 
  // coeff50
  // 
  // coeff51
  // 
  // coeff52
  // 
  // coeff53
  // 
  // coeff54
  // 
  // coeff55
  // 
  // coeff56
  // 
  // coeff57
  // 
  // coeff58
  // 
  // coeff59
  // 
  // coeff60
  // 
  // coeff61
  // 
  // coeff62
  // 
  // coeff63
  always @(posedge clk or posedge reset)
    begin : product64_out_buff_out_pipe_process
      if (reset == 1'b1) begin
        product64_out_buff_out_pipe_reg[0] <= 32'sb00000000000000000000000000000000;
        product64_out_buff_out_pipe_reg[1] <= 32'sb00000000000000000000000000000000;
      end
      else begin
        if (enb) begin
          product64_out_buff_out_pipe_reg[0] <= product64_out_buff_out_pipe_reg_next[0];
          product64_out_buff_out_pipe_reg[1] <= product64_out_buff_out_pipe_reg_next[1];
        end
      end
    end

  assign product64_out_pipe = product64_out_buff_out_pipe_reg[1];
  assign product64_out_buff_out_pipe_reg_next[0] = product64;
  assign product64_out_buff_out_pipe_reg_next[1] = product64_out_buff_out_pipe_reg[0];



  assign finalsum_cast1 = {{5{product64_out_pipe[31]}}, product64_out_pipe[31:5]};



  assign sum_1_cast1 = {{5{product64_out_pipe[31]}}, product64_out_pipe[31:5]};



  assign sum_2_cast1 = {{5{product64_out_pipe[31]}}, product64_out_pipe[31:5]};



  assign sum_3_cast1 = {{5{product64_out_pipe[31]}}, product64_out_pipe[31:5]};



  assign sum_4_cast1 = {{5{product64_out_pipe[31]}}, product64_out_pipe[31:5]};



  assign sum_5_cast1 = {{5{product64_out_pipe[31]}}, product64_out_pipe[31:5]};



  assign sum_6_cast1 = {{5{product64_out_pipe[31]}}, product64_out_pipe[31:5]};



  assign sum_7_cast1 = {{5{product64_out_pipe[31]}}, product64_out_pipe[31:5]};



  assign sum_8_cast1 = {{5{product64_out_pipe[31]}}, product64_out_pipe[31:5]};



  assign sum_9_cast1 = {{5{product64_out_pipe[31]}}, product64_out_pipe[31:5]};



  assign sum_10_cast1 = {{5{product64_out_pipe[31]}}, product64_out_pipe[31:5]};



  assign sum_11_cast1 = {{5{product64_out_pipe[31]}}, product64_out_pipe[31:5]};



  assign sum_12_cast1 = {{5{product64_out_pipe[31]}}, product64_out_pipe[31:5]};



  assign sum_13_cast1 = {{5{product64_out_pipe[31]}}, product64_out_pipe[31:5]};



  assign sum_14_cast1 = {{5{product64_out_pipe[31]}}, product64_out_pipe[31:5]};



  assign sum_15_cast1 = {{5{product64_out_pipe[31]}}, product64_out_pipe[31:5]};



  assign sum_16_cast1 = {{5{product64_out_pipe[31]}}, product64_out_pipe[31:5]};



  assign sum_17_cast1 = {{5{product64_out_pipe[31]}}, product64_out_pipe[31:5]};



  assign sum_18_cast1 = {{5{product64_out_pipe[31]}}, product64_out_pipe[31:5]};



  assign sum_19_cast1 = {{5{product64_out_pipe[31]}}, product64_out_pipe[31:5]};



  assign sum_20_cast1 = {{5{product64_out_pipe[31]}}, product64_out_pipe[31:5]};



  assign sum_21_cast1 = {{5{product64_out_pipe[31]}}, product64_out_pipe[31:5]};



  assign sum_22_cast1 = {{5{product64_out_pipe[31]}}, product64_out_pipe[31:5]};



  assign sum_23_cast1 = {{5{product64_out_pipe[31]}}, product64_out_pipe[31:5]};



  assign sum_24_cast1 = {{5{product64_out_pipe[31]}}, product64_out_pipe[31:5]};



  assign sum_25_cast1 = {{5{product64_out_pipe[31]}}, product64_out_pipe[31:5]};



  assign sum_26_cast1 = {{5{product64_out_pipe[31]}}, product64_out_pipe[31:5]};



  assign sum_27_cast1 = {{5{product64_out_pipe[31]}}, product64_out_pipe[31:5]};



  assign sum_28_cast1 = {{5{product64_out_pipe[31]}}, product64_out_pipe[31:5]};



  assign sum_29_cast1 = {{5{product64_out_pipe[31]}}, product64_out_pipe[31:5]};



  assign sum_30_cast1 = {{5{product64_out_pipe[31]}}, product64_out_pipe[31:5]};



  assign sum_31_cast1 = {{5{product64_out_pipe[31]}}, product64_out_pipe[31:5]};



  assign sum_32_cast1 = {{5{product64_out_pipe[31]}}, product64_out_pipe[31:5]};



  assign sum_33_cast1 = {{5{product64_out_pipe[31]}}, product64_out_pipe[31:5]};



  assign sum_34_cast1 = {{5{product64_out_pipe[31]}}, product64_out_pipe[31:5]};



  assign sum_35_cast1 = {{5{product64_out_pipe[31]}}, product64_out_pipe[31:5]};



  assign sum_36_cast1 = {{5{product64_out_pipe[31]}}, product64_out_pipe[31:5]};



  assign sum_37_cast1 = {{5{product64_out_pipe[31]}}, product64_out_pipe[31:5]};



  assign sum_38_cast1 = {{5{product64_out_pipe[31]}}, product64_out_pipe[31:5]};



  assign sum_39_cast1 = {{5{product64_out_pipe[31]}}, product64_out_pipe[31:5]};



  assign sum_40_cast1 = {{5{product64_out_pipe[31]}}, product64_out_pipe[31:5]};



  assign sum_41_cast1 = {{5{product64_out_pipe[31]}}, product64_out_pipe[31:5]};



  assign sum_42_cast1 = {{5{product64_out_pipe[31]}}, product64_out_pipe[31:5]};



  assign sum_43_cast1 = {{5{product64_out_pipe[31]}}, product64_out_pipe[31:5]};



  assign sum_44_cast1 = {{5{product64_out_pipe[31]}}, product64_out_pipe[31:5]};



  assign sum_45_cast1 = {{5{product64_out_pipe[31]}}, product64_out_pipe[31:5]};



  assign sum_46_cast1 = {{5{product64_out_pipe[31]}}, product64_out_pipe[31:5]};



  assign sum_47_cast1 = {{5{product64_out_pipe[31]}}, product64_out_pipe[31:5]};



  assign sum_48_cast1 = {{5{product64_out_pipe[31]}}, product64_out_pipe[31:5]};



  assign sum_49_cast1 = {{5{product64_out_pipe[31]}}, product64_out_pipe[31:5]};



  assign sum_50_cast1 = {{5{product64_out_pipe[31]}}, product64_out_pipe[31:5]};



  assign sum_51_cast1 = {{5{product64_out_pipe[31]}}, product64_out_pipe[31:5]};



  assign sum_52_cast1 = {{5{product64_out_pipe[31]}}, product64_out_pipe[31:5]};



  assign sum_53_cast1 = {{5{product64_out_pipe[31]}}, product64_out_pipe[31:5]};



  assign sum_54_cast1 = {{5{product64_out_pipe[31]}}, product64_out_pipe[31:5]};



  assign sum_55_cast1 = {{5{product64_out_pipe[31]}}, product64_out_pipe[31:5]};



  assign sum_56_cast1 = {{5{product64_out_pipe[31]}}, product64_out_pipe[31:5]};



  assign sum_57_cast1 = {{5{product64_out_pipe[31]}}, product64_out_pipe[31:5]};



  assign sum_58_cast1 = {{5{product64_out_pipe[31]}}, product64_out_pipe[31:5]};



  assign sum_59_cast1 = {{5{product64_out_pipe[31]}}, product64_out_pipe[31:5]};



  assign sum_60_cast1 = {{5{product64_out_pipe[31]}}, product64_out_pipe[31:5]};



  assign sum_61_cast1 = {{5{product64_out_pipe[31]}}, product64_out_pipe[31:5]};



  assign sum_62_cast1 = {{5{product64_out_pipe[31]}}, product64_out_pipe[31:5]};



  assign sum_63 = {{5{product64_out_pipe[31]}}, product64_out_pipe[31:5]};



  always @(posedge clk or posedge reset)
    begin : intdelay_process
      if (reset == 1'b1) begin
        del_63 <= 32'sb00000000000000000000000000000000;
      end
      else begin
        if (enb) begin
          del_63 <= sum_63;
        end
      end
    end



  assign adder_add_cast = {sum_62_cast1[31], sum_62_cast1};
  assign adder_add_cast_1 = {del_63[31], del_63};
  assign sum_62_temp = adder_add_cast + adder_add_cast_1;



  assign sum_62 = sum_62_temp[31:0];



  always @(posedge clk or posedge reset)
    begin : intdelay_1_process
      if (reset == 1'b1) begin
        del_62 <= 32'sb00000000000000000000000000000000;
      end
      else begin
        if (enb) begin
          del_62 <= sum_62;
        end
      end
    end



  assign adder_add_cast_2 = {sum_61_cast1[31], sum_61_cast1};
  assign adder_add_cast_3 = {del_62[31], del_62};
  assign sum_61_temp = adder_add_cast_2 + adder_add_cast_3;



  assign sum_61 = sum_61_temp[31:0];



  always @(posedge clk or posedge reset)
    begin : intdelay_2_process
      if (reset == 1'b1) begin
        del_61 <= 32'sb00000000000000000000000000000000;
      end
      else begin
        if (enb) begin
          del_61 <= sum_61;
        end
      end
    end



  assign adder_add_cast_4 = {sum_60_cast1[31], sum_60_cast1};
  assign adder_add_cast_5 = {del_61[31], del_61};
  assign sum_60_temp = adder_add_cast_4 + adder_add_cast_5;



  assign sum_60 = sum_60_temp[31:0];



  always @(posedge clk or posedge reset)
    begin : intdelay_3_process
      if (reset == 1'b1) begin
        del_60 <= 32'sb00000000000000000000000000000000;
      end
      else begin
        if (enb) begin
          del_60 <= sum_60;
        end
      end
    end



  assign adder_add_cast_6 = {sum_59_cast1[31], sum_59_cast1};
  assign adder_add_cast_7 = {del_60[31], del_60};
  assign sum_59_temp = adder_add_cast_6 + adder_add_cast_7;



  assign sum_59 = sum_59_temp[31:0];



  always @(posedge clk or posedge reset)
    begin : intdelay_4_process
      if (reset == 1'b1) begin
        del_59 <= 32'sb00000000000000000000000000000000;
      end
      else begin
        if (enb) begin
          del_59 <= sum_59;
        end
      end
    end



  assign adder_add_cast_8 = {sum_58_cast1[31], sum_58_cast1};
  assign adder_add_cast_9 = {del_59[31], del_59};
  assign sum_58_temp = adder_add_cast_8 + adder_add_cast_9;



  assign sum_58 = sum_58_temp[31:0];



  always @(posedge clk or posedge reset)
    begin : intdelay_5_process
      if (reset == 1'b1) begin
        del_58 <= 32'sb00000000000000000000000000000000;
      end
      else begin
        if (enb) begin
          del_58 <= sum_58;
        end
      end
    end



  assign adder_add_cast_10 = {sum_57_cast1[31], sum_57_cast1};
  assign adder_add_cast_11 = {del_58[31], del_58};
  assign sum_57_temp = adder_add_cast_10 + adder_add_cast_11;



  assign sum_57 = sum_57_temp[31:0];



  always @(posedge clk or posedge reset)
    begin : intdelay_6_process
      if (reset == 1'b1) begin
        del_57 <= 32'sb00000000000000000000000000000000;
      end
      else begin
        if (enb) begin
          del_57 <= sum_57;
        end
      end
    end



  assign adder_add_cast_12 = {sum_56_cast1[31], sum_56_cast1};
  assign adder_add_cast_13 = {del_57[31], del_57};
  assign sum_56_temp = adder_add_cast_12 + adder_add_cast_13;



  assign sum_56 = sum_56_temp[31:0];



  always @(posedge clk or posedge reset)
    begin : intdelay_7_process
      if (reset == 1'b1) begin
        del_56 <= 32'sb00000000000000000000000000000000;
      end
      else begin
        if (enb) begin
          del_56 <= sum_56;
        end
      end
    end



  assign adder_add_cast_14 = {sum_55_cast1[31], sum_55_cast1};
  assign adder_add_cast_15 = {del_56[31], del_56};
  assign sum_55_temp = adder_add_cast_14 + adder_add_cast_15;



  assign sum_55 = sum_55_temp[31:0];



  always @(posedge clk or posedge reset)
    begin : intdelay_8_process
      if (reset == 1'b1) begin
        del_55 <= 32'sb00000000000000000000000000000000;
      end
      else begin
        if (enb) begin
          del_55 <= sum_55;
        end
      end
    end



  assign adder_add_cast_16 = {sum_54_cast1[31], sum_54_cast1};
  assign adder_add_cast_17 = {del_55[31], del_55};
  assign sum_54_temp = adder_add_cast_16 + adder_add_cast_17;



  assign sum_54 = sum_54_temp[31:0];



  always @(posedge clk or posedge reset)
    begin : intdelay_9_process
      if (reset == 1'b1) begin
        del_54 <= 32'sb00000000000000000000000000000000;
      end
      else begin
        if (enb) begin
          del_54 <= sum_54;
        end
      end
    end



  assign adder_add_cast_18 = {sum_53_cast1[31], sum_53_cast1};
  assign adder_add_cast_19 = {del_54[31], del_54};
  assign sum_53_temp = adder_add_cast_18 + adder_add_cast_19;



  assign sum_53 = sum_53_temp[31:0];



  always @(posedge clk or posedge reset)
    begin : intdelay_10_process
      if (reset == 1'b1) begin
        del_53 <= 32'sb00000000000000000000000000000000;
      end
      else begin
        if (enb) begin
          del_53 <= sum_53;
        end
      end
    end



  assign adder_add_cast_20 = {sum_52_cast1[31], sum_52_cast1};
  assign adder_add_cast_21 = {del_53[31], del_53};
  assign sum_52_temp = adder_add_cast_20 + adder_add_cast_21;



  assign sum_52 = sum_52_temp[31:0];



  always @(posedge clk or posedge reset)
    begin : intdelay_11_process
      if (reset == 1'b1) begin
        del_52 <= 32'sb00000000000000000000000000000000;
      end
      else begin
        if (enb) begin
          del_52 <= sum_52;
        end
      end
    end



  assign adder_add_cast_22 = {sum_51_cast1[31], sum_51_cast1};
  assign adder_add_cast_23 = {del_52[31], del_52};
  assign sum_51_temp = adder_add_cast_22 + adder_add_cast_23;



  assign sum_51 = sum_51_temp[31:0];



  always @(posedge clk or posedge reset)
    begin : intdelay_12_process
      if (reset == 1'b1) begin
        del_51 <= 32'sb00000000000000000000000000000000;
      end
      else begin
        if (enb) begin
          del_51 <= sum_51;
        end
      end
    end



  assign adder_add_cast_24 = {sum_50_cast1[31], sum_50_cast1};
  assign adder_add_cast_25 = {del_51[31], del_51};
  assign sum_50_temp = adder_add_cast_24 + adder_add_cast_25;



  assign sum_50 = sum_50_temp[31:0];



  always @(posedge clk or posedge reset)
    begin : intdelay_13_process
      if (reset == 1'b1) begin
        del_50 <= 32'sb00000000000000000000000000000000;
      end
      else begin
        if (enb) begin
          del_50 <= sum_50;
        end
      end
    end



  assign adder_add_cast_26 = {sum_49_cast1[31], sum_49_cast1};
  assign adder_add_cast_27 = {del_50[31], del_50};
  assign sum_49_temp = adder_add_cast_26 + adder_add_cast_27;



  assign sum_49 = sum_49_temp[31:0];



  always @(posedge clk or posedge reset)
    begin : intdelay_14_process
      if (reset == 1'b1) begin
        del_49 <= 32'sb00000000000000000000000000000000;
      end
      else begin
        if (enb) begin
          del_49 <= sum_49;
        end
      end
    end



  assign adder_add_cast_28 = {sum_48_cast1[31], sum_48_cast1};
  assign adder_add_cast_29 = {del_49[31], del_49};
  assign sum_48_temp = adder_add_cast_28 + adder_add_cast_29;



  assign sum_48 = sum_48_temp[31:0];



  always @(posedge clk or posedge reset)
    begin : intdelay_15_process
      if (reset == 1'b1) begin
        del_48 <= 32'sb00000000000000000000000000000000;
      end
      else begin
        if (enb) begin
          del_48 <= sum_48;
        end
      end
    end



  assign adder_add_cast_30 = {sum_47_cast1[31], sum_47_cast1};
  assign adder_add_cast_31 = {del_48[31], del_48};
  assign sum_47_temp = adder_add_cast_30 + adder_add_cast_31;



  assign sum_47 = sum_47_temp[31:0];



  always @(posedge clk or posedge reset)
    begin : intdelay_16_process
      if (reset == 1'b1) begin
        del_47 <= 32'sb00000000000000000000000000000000;
      end
      else begin
        if (enb) begin
          del_47 <= sum_47;
        end
      end
    end



  assign adder_add_cast_32 = {sum_46_cast1[31], sum_46_cast1};
  assign adder_add_cast_33 = {del_47[31], del_47};
  assign sum_46_temp = adder_add_cast_32 + adder_add_cast_33;



  assign sum_46 = sum_46_temp[31:0];



  always @(posedge clk or posedge reset)
    begin : intdelay_17_process
      if (reset == 1'b1) begin
        del_46 <= 32'sb00000000000000000000000000000000;
      end
      else begin
        if (enb) begin
          del_46 <= sum_46;
        end
      end
    end



  assign adder_add_cast_34 = {sum_45_cast1[31], sum_45_cast1};
  assign adder_add_cast_35 = {del_46[31], del_46};
  assign sum_45_temp = adder_add_cast_34 + adder_add_cast_35;



  assign sum_45 = sum_45_temp[31:0];



  always @(posedge clk or posedge reset)
    begin : intdelay_18_process
      if (reset == 1'b1) begin
        del_45 <= 32'sb00000000000000000000000000000000;
      end
      else begin
        if (enb) begin
          del_45 <= sum_45;
        end
      end
    end



  assign adder_add_cast_36 = {sum_44_cast1[31], sum_44_cast1};
  assign adder_add_cast_37 = {del_45[31], del_45};
  assign sum_44_temp = adder_add_cast_36 + adder_add_cast_37;



  assign sum_44 = sum_44_temp[31:0];



  always @(posedge clk or posedge reset)
    begin : intdelay_19_process
      if (reset == 1'b1) begin
        del_44 <= 32'sb00000000000000000000000000000000;
      end
      else begin
        if (enb) begin
          del_44 <= sum_44;
        end
      end
    end



  assign adder_add_cast_38 = {sum_43_cast1[31], sum_43_cast1};
  assign adder_add_cast_39 = {del_44[31], del_44};
  assign sum_43_temp = adder_add_cast_38 + adder_add_cast_39;



  assign sum_43 = sum_43_temp[31:0];



  always @(posedge clk or posedge reset)
    begin : intdelay_20_process
      if (reset == 1'b1) begin
        del_43 <= 32'sb00000000000000000000000000000000;
      end
      else begin
        if (enb) begin
          del_43 <= sum_43;
        end
      end
    end



  assign adder_add_cast_40 = {sum_42_cast1[31], sum_42_cast1};
  assign adder_add_cast_41 = {del_43[31], del_43};
  assign sum_42_temp = adder_add_cast_40 + adder_add_cast_41;



  assign sum_42 = sum_42_temp[31:0];



  always @(posedge clk or posedge reset)
    begin : intdelay_21_process
      if (reset == 1'b1) begin
        del_42 <= 32'sb00000000000000000000000000000000;
      end
      else begin
        if (enb) begin
          del_42 <= sum_42;
        end
      end
    end



  assign adder_add_cast_42 = {sum_41_cast1[31], sum_41_cast1};
  assign adder_add_cast_43 = {del_42[31], del_42};
  assign sum_41_temp = adder_add_cast_42 + adder_add_cast_43;



  assign sum_41 = sum_41_temp[31:0];



  always @(posedge clk or posedge reset)
    begin : intdelay_22_process
      if (reset == 1'b1) begin
        del_41 <= 32'sb00000000000000000000000000000000;
      end
      else begin
        if (enb) begin
          del_41 <= sum_41;
        end
      end
    end



  assign adder_add_cast_44 = {sum_40_cast1[31], sum_40_cast1};
  assign adder_add_cast_45 = {del_41[31], del_41};
  assign sum_40_temp = adder_add_cast_44 + adder_add_cast_45;



  assign sum_40 = sum_40_temp[31:0];



  always @(posedge clk or posedge reset)
    begin : intdelay_23_process
      if (reset == 1'b1) begin
        del_40 <= 32'sb00000000000000000000000000000000;
      end
      else begin
        if (enb) begin
          del_40 <= sum_40;
        end
      end
    end



  assign adder_add_cast_46 = {sum_39_cast1[31], sum_39_cast1};
  assign adder_add_cast_47 = {del_40[31], del_40};
  assign sum_39_temp = adder_add_cast_46 + adder_add_cast_47;



  assign sum_39 = sum_39_temp[31:0];



  always @(posedge clk or posedge reset)
    begin : intdelay_24_process
      if (reset == 1'b1) begin
        del_39 <= 32'sb00000000000000000000000000000000;
      end
      else begin
        if (enb) begin
          del_39 <= sum_39;
        end
      end
    end



  assign adder_add_cast_48 = {sum_38_cast1[31], sum_38_cast1};
  assign adder_add_cast_49 = {del_39[31], del_39};
  assign sum_38_temp = adder_add_cast_48 + adder_add_cast_49;



  assign sum_38 = sum_38_temp[31:0];



  always @(posedge clk or posedge reset)
    begin : intdelay_25_process
      if (reset == 1'b1) begin
        del_38 <= 32'sb00000000000000000000000000000000;
      end
      else begin
        if (enb) begin
          del_38 <= sum_38;
        end
      end
    end



  assign adder_add_cast_50 = {sum_37_cast1[31], sum_37_cast1};
  assign adder_add_cast_51 = {del_38[31], del_38};
  assign sum_37_temp = adder_add_cast_50 + adder_add_cast_51;



  assign sum_37 = sum_37_temp[31:0];



  always @(posedge clk or posedge reset)
    begin : intdelay_26_process
      if (reset == 1'b1) begin
        del_37 <= 32'sb00000000000000000000000000000000;
      end
      else begin
        if (enb) begin
          del_37 <= sum_37;
        end
      end
    end



  assign adder_add_cast_52 = {sum_36_cast1[31], sum_36_cast1};
  assign adder_add_cast_53 = {del_37[31], del_37};
  assign sum_36_temp = adder_add_cast_52 + adder_add_cast_53;



  assign sum_36 = sum_36_temp[31:0];



  always @(posedge clk or posedge reset)
    begin : intdelay_27_process
      if (reset == 1'b1) begin
        del_36 <= 32'sb00000000000000000000000000000000;
      end
      else begin
        if (enb) begin
          del_36 <= sum_36;
        end
      end
    end



  assign adder_add_cast_54 = {sum_35_cast1[31], sum_35_cast1};
  assign adder_add_cast_55 = {del_36[31], del_36};
  assign sum_35_temp = adder_add_cast_54 + adder_add_cast_55;



  assign sum_35 = sum_35_temp[31:0];



  always @(posedge clk or posedge reset)
    begin : intdelay_28_process
      if (reset == 1'b1) begin
        del_35 <= 32'sb00000000000000000000000000000000;
      end
      else begin
        if (enb) begin
          del_35 <= sum_35;
        end
      end
    end



  assign adder_add_cast_56 = {sum_34_cast1[31], sum_34_cast1};
  assign adder_add_cast_57 = {del_35[31], del_35};
  assign sum_34_temp = adder_add_cast_56 + adder_add_cast_57;



  assign sum_34 = sum_34_temp[31:0];



  always @(posedge clk or posedge reset)
    begin : intdelay_29_process
      if (reset == 1'b1) begin
        del_34 <= 32'sb00000000000000000000000000000000;
      end
      else begin
        if (enb) begin
          del_34 <= sum_34;
        end
      end
    end



  assign adder_add_cast_58 = {sum_33_cast1[31], sum_33_cast1};
  assign adder_add_cast_59 = {del_34[31], del_34};
  assign sum_33_temp = adder_add_cast_58 + adder_add_cast_59;



  assign sum_33 = sum_33_temp[31:0];



  always @(posedge clk or posedge reset)
    begin : intdelay_30_process
      if (reset == 1'b1) begin
        del_33 <= 32'sb00000000000000000000000000000000;
      end
      else begin
        if (enb) begin
          del_33 <= sum_33;
        end
      end
    end



  assign adder_add_cast_60 = {sum_32_cast1[31], sum_32_cast1};
  assign adder_add_cast_61 = {del_33[31], del_33};
  assign sum_32_temp = adder_add_cast_60 + adder_add_cast_61;



  assign sum_32 = sum_32_temp[31:0];



  always @(posedge clk or posedge reset)
    begin : intdelay_31_process
      if (reset == 1'b1) begin
        del_32 <= 32'sb00000000000000000000000000000000;
      end
      else begin
        if (enb) begin
          del_32 <= sum_32;
        end
      end
    end



  assign adder_add_cast_62 = {sum_31_cast1[31], sum_31_cast1};
  assign adder_add_cast_63 = {del_32[31], del_32};
  assign sum_31_temp = adder_add_cast_62 + adder_add_cast_63;



  assign sum_31 = sum_31_temp[31:0];



  always @(posedge clk or posedge reset)
    begin : intdelay_32_process
      if (reset == 1'b1) begin
        del_31 <= 32'sb00000000000000000000000000000000;
      end
      else begin
        if (enb) begin
          del_31 <= sum_31;
        end
      end
    end



  assign adder_add_cast_64 = {sum_30_cast1[31], sum_30_cast1};
  assign adder_add_cast_65 = {del_31[31], del_31};
  assign sum_30_temp = adder_add_cast_64 + adder_add_cast_65;



  assign sum_30 = sum_30_temp[31:0];



  always @(posedge clk or posedge reset)
    begin : intdelay_33_process
      if (reset == 1'b1) begin
        del_30 <= 32'sb00000000000000000000000000000000;
      end
      else begin
        if (enb) begin
          del_30 <= sum_30;
        end
      end
    end



  assign adder_add_cast_66 = {sum_29_cast1[31], sum_29_cast1};
  assign adder_add_cast_67 = {del_30[31], del_30};
  assign sum_29_temp = adder_add_cast_66 + adder_add_cast_67;



  assign sum_29 = sum_29_temp[31:0];



  always @(posedge clk or posedge reset)
    begin : intdelay_34_process
      if (reset == 1'b1) begin
        del_29 <= 32'sb00000000000000000000000000000000;
      end
      else begin
        if (enb) begin
          del_29 <= sum_29;
        end
      end
    end



  assign adder_add_cast_68 = {sum_28_cast1[31], sum_28_cast1};
  assign adder_add_cast_69 = {del_29[31], del_29};
  assign sum_28_temp = adder_add_cast_68 + adder_add_cast_69;



  assign sum_28 = sum_28_temp[31:0];



  always @(posedge clk or posedge reset)
    begin : intdelay_35_process
      if (reset == 1'b1) begin
        del_28 <= 32'sb00000000000000000000000000000000;
      end
      else begin
        if (enb) begin
          del_28 <= sum_28;
        end
      end
    end



  assign adder_add_cast_70 = {sum_27_cast1[31], sum_27_cast1};
  assign adder_add_cast_71 = {del_28[31], del_28};
  assign sum_27_temp = adder_add_cast_70 + adder_add_cast_71;



  assign sum_27 = sum_27_temp[31:0];



  always @(posedge clk or posedge reset)
    begin : intdelay_36_process
      if (reset == 1'b1) begin
        del_27 <= 32'sb00000000000000000000000000000000;
      end
      else begin
        if (enb) begin
          del_27 <= sum_27;
        end
      end
    end



  assign adder_add_cast_72 = {sum_26_cast1[31], sum_26_cast1};
  assign adder_add_cast_73 = {del_27[31], del_27};
  assign sum_26_temp = adder_add_cast_72 + adder_add_cast_73;



  assign sum_26 = sum_26_temp[31:0];



  always @(posedge clk or posedge reset)
    begin : intdelay_37_process
      if (reset == 1'b1) begin
        del_26 <= 32'sb00000000000000000000000000000000;
      end
      else begin
        if (enb) begin
          del_26 <= sum_26;
        end
      end
    end



  assign adder_add_cast_74 = {sum_25_cast1[31], sum_25_cast1};
  assign adder_add_cast_75 = {del_26[31], del_26};
  assign sum_25_temp = adder_add_cast_74 + adder_add_cast_75;



  assign sum_25 = sum_25_temp[31:0];



  always @(posedge clk or posedge reset)
    begin : intdelay_38_process
      if (reset == 1'b1) begin
        del_25 <= 32'sb00000000000000000000000000000000;
      end
      else begin
        if (enb) begin
          del_25 <= sum_25;
        end
      end
    end



  assign adder_add_cast_76 = {sum_24_cast1[31], sum_24_cast1};
  assign adder_add_cast_77 = {del_25[31], del_25};
  assign sum_24_temp = adder_add_cast_76 + adder_add_cast_77;



  assign sum_24 = sum_24_temp[31:0];



  always @(posedge clk or posedge reset)
    begin : intdelay_39_process
      if (reset == 1'b1) begin
        del_24 <= 32'sb00000000000000000000000000000000;
      end
      else begin
        if (enb) begin
          del_24 <= sum_24;
        end
      end
    end



  assign adder_add_cast_78 = {sum_23_cast1[31], sum_23_cast1};
  assign adder_add_cast_79 = {del_24[31], del_24};
  assign sum_23_temp = adder_add_cast_78 + adder_add_cast_79;



  assign sum_23 = sum_23_temp[31:0];



  always @(posedge clk or posedge reset)
    begin : intdelay_40_process
      if (reset == 1'b1) begin
        del_23 <= 32'sb00000000000000000000000000000000;
      end
      else begin
        if (enb) begin
          del_23 <= sum_23;
        end
      end
    end



  assign adder_add_cast_80 = {sum_22_cast1[31], sum_22_cast1};
  assign adder_add_cast_81 = {del_23[31], del_23};
  assign sum_22_temp = adder_add_cast_80 + adder_add_cast_81;



  assign sum_22 = sum_22_temp[31:0];



  always @(posedge clk or posedge reset)
    begin : intdelay_41_process
      if (reset == 1'b1) begin
        del_22 <= 32'sb00000000000000000000000000000000;
      end
      else begin
        if (enb) begin
          del_22 <= sum_22;
        end
      end
    end



  assign adder_add_cast_82 = {sum_21_cast1[31], sum_21_cast1};
  assign adder_add_cast_83 = {del_22[31], del_22};
  assign sum_21_temp = adder_add_cast_82 + adder_add_cast_83;



  assign sum_21 = sum_21_temp[31:0];



  always @(posedge clk or posedge reset)
    begin : intdelay_42_process
      if (reset == 1'b1) begin
        del_21 <= 32'sb00000000000000000000000000000000;
      end
      else begin
        if (enb) begin
          del_21 <= sum_21;
        end
      end
    end



  assign adder_add_cast_84 = {sum_20_cast1[31], sum_20_cast1};
  assign adder_add_cast_85 = {del_21[31], del_21};
  assign sum_20_temp = adder_add_cast_84 + adder_add_cast_85;



  assign sum_20 = sum_20_temp[31:0];



  always @(posedge clk or posedge reset)
    begin : intdelay_43_process
      if (reset == 1'b1) begin
        del_20 <= 32'sb00000000000000000000000000000000;
      end
      else begin
        if (enb) begin
          del_20 <= sum_20;
        end
      end
    end



  assign adder_add_cast_86 = {sum_19_cast1[31], sum_19_cast1};
  assign adder_add_cast_87 = {del_20[31], del_20};
  assign sum_19_temp = adder_add_cast_86 + adder_add_cast_87;



  assign sum_19 = sum_19_temp[31:0];



  always @(posedge clk or posedge reset)
    begin : intdelay_44_process
      if (reset == 1'b1) begin
        del_19 <= 32'sb00000000000000000000000000000000;
      end
      else begin
        if (enb) begin
          del_19 <= sum_19;
        end
      end
    end



  assign adder_add_cast_88 = {sum_18_cast1[31], sum_18_cast1};
  assign adder_add_cast_89 = {del_19[31], del_19};
  assign sum_18_temp = adder_add_cast_88 + adder_add_cast_89;



  assign sum_18 = sum_18_temp[31:0];



  always @(posedge clk or posedge reset)
    begin : intdelay_45_process
      if (reset == 1'b1) begin
        del_18 <= 32'sb00000000000000000000000000000000;
      end
      else begin
        if (enb) begin
          del_18 <= sum_18;
        end
      end
    end



  assign adder_add_cast_90 = {sum_17_cast1[31], sum_17_cast1};
  assign adder_add_cast_91 = {del_18[31], del_18};
  assign sum_17_temp = adder_add_cast_90 + adder_add_cast_91;



  assign sum_17 = sum_17_temp[31:0];



  always @(posedge clk or posedge reset)
    begin : intdelay_46_process
      if (reset == 1'b1) begin
        del_17 <= 32'sb00000000000000000000000000000000;
      end
      else begin
        if (enb) begin
          del_17 <= sum_17;
        end
      end
    end



  assign adder_add_cast_92 = {sum_16_cast1[31], sum_16_cast1};
  assign adder_add_cast_93 = {del_17[31], del_17};
  assign sum_16_temp = adder_add_cast_92 + adder_add_cast_93;



  assign sum_16 = sum_16_temp[31:0];



  always @(posedge clk or posedge reset)
    begin : intdelay_47_process
      if (reset == 1'b1) begin
        del_16 <= 32'sb00000000000000000000000000000000;
      end
      else begin
        if (enb) begin
          del_16 <= sum_16;
        end
      end
    end



  assign adder_add_cast_94 = {sum_15_cast1[31], sum_15_cast1};
  assign adder_add_cast_95 = {del_16[31], del_16};
  assign sum_15_temp = adder_add_cast_94 + adder_add_cast_95;



  assign sum_15 = sum_15_temp[31:0];



  always @(posedge clk or posedge reset)
    begin : intdelay_48_process
      if (reset == 1'b1) begin
        del_15 <= 32'sb00000000000000000000000000000000;
      end
      else begin
        if (enb) begin
          del_15 <= sum_15;
        end
      end
    end



  assign adder_add_cast_96 = {sum_14_cast1[31], sum_14_cast1};
  assign adder_add_cast_97 = {del_15[31], del_15};
  assign sum_14_temp = adder_add_cast_96 + adder_add_cast_97;



  assign sum_14 = sum_14_temp[31:0];



  always @(posedge clk or posedge reset)
    begin : intdelay_49_process
      if (reset == 1'b1) begin
        del_14 <= 32'sb00000000000000000000000000000000;
      end
      else begin
        if (enb) begin
          del_14 <= sum_14;
        end
      end
    end



  assign adder_add_cast_98 = {sum_13_cast1[31], sum_13_cast1};
  assign adder_add_cast_99 = {del_14[31], del_14};
  assign sum_13_temp = adder_add_cast_98 + adder_add_cast_99;



  assign sum_13 = sum_13_temp[31:0];



  always @(posedge clk or posedge reset)
    begin : intdelay_50_process
      if (reset == 1'b1) begin
        del_13 <= 32'sb00000000000000000000000000000000;
      end
      else begin
        if (enb) begin
          del_13 <= sum_13;
        end
      end
    end



  assign adder_add_cast_100 = {sum_12_cast1[31], sum_12_cast1};
  assign adder_add_cast_101 = {del_13[31], del_13};
  assign sum_12_temp = adder_add_cast_100 + adder_add_cast_101;



  assign sum_12 = sum_12_temp[31:0];



  always @(posedge clk or posedge reset)
    begin : intdelay_51_process
      if (reset == 1'b1) begin
        del_12 <= 32'sb00000000000000000000000000000000;
      end
      else begin
        if (enb) begin
          del_12 <= sum_12;
        end
      end
    end



  assign adder_add_cast_102 = {sum_11_cast1[31], sum_11_cast1};
  assign adder_add_cast_103 = {del_12[31], del_12};
  assign sum_11_temp = adder_add_cast_102 + adder_add_cast_103;



  assign sum_11 = sum_11_temp[31:0];



  always @(posedge clk or posedge reset)
    begin : intdelay_52_process
      if (reset == 1'b1) begin
        del_11 <= 32'sb00000000000000000000000000000000;
      end
      else begin
        if (enb) begin
          del_11 <= sum_11;
        end
      end
    end



  assign adder_add_cast_104 = {sum_10_cast1[31], sum_10_cast1};
  assign adder_add_cast_105 = {del_11[31], del_11};
  assign sum_10_temp = adder_add_cast_104 + adder_add_cast_105;



  assign sum_10 = sum_10_temp[31:0];



  always @(posedge clk or posedge reset)
    begin : intdelay_53_process
      if (reset == 1'b1) begin
        del_10 <= 32'sb00000000000000000000000000000000;
      end
      else begin
        if (enb) begin
          del_10 <= sum_10;
        end
      end
    end



  assign adder_add_cast_106 = {sum_9_cast1[31], sum_9_cast1};
  assign adder_add_cast_107 = {del_10[31], del_10};
  assign sum_9_temp = adder_add_cast_106 + adder_add_cast_107;



  assign sum_9 = sum_9_temp[31:0];



  always @(posedge clk or posedge reset)
    begin : intdelay_54_process
      if (reset == 1'b1) begin
        del_9 <= 32'sb00000000000000000000000000000000;
      end
      else begin
        if (enb) begin
          del_9 <= sum_9;
        end
      end
    end



  assign adder_add_cast_108 = {sum_8_cast1[31], sum_8_cast1};
  assign adder_add_cast_109 = {del_9[31], del_9};
  assign sum_8_temp = adder_add_cast_108 + adder_add_cast_109;



  assign sum_8 = sum_8_temp[31:0];



  always @(posedge clk or posedge reset)
    begin : intdelay_55_process
      if (reset == 1'b1) begin
        del_8 <= 32'sb00000000000000000000000000000000;
      end
      else begin
        if (enb) begin
          del_8 <= sum_8;
        end
      end
    end



  assign adder_add_cast_110 = {sum_7_cast1[31], sum_7_cast1};
  assign adder_add_cast_111 = {del_8[31], del_8};
  assign sum_7_temp = adder_add_cast_110 + adder_add_cast_111;



  assign sum_7 = sum_7_temp[31:0];



  always @(posedge clk or posedge reset)
    begin : intdelay_56_process
      if (reset == 1'b1) begin
        del_7 <= 32'sb00000000000000000000000000000000;
      end
      else begin
        if (enb) begin
          del_7 <= sum_7;
        end
      end
    end



  assign adder_add_cast_112 = {sum_6_cast1[31], sum_6_cast1};
  assign adder_add_cast_113 = {del_7[31], del_7};
  assign sum_6_temp = adder_add_cast_112 + adder_add_cast_113;



  assign sum_6 = sum_6_temp[31:0];



  always @(posedge clk or posedge reset)
    begin : intdelay_57_process
      if (reset == 1'b1) begin
        del_6 <= 32'sb00000000000000000000000000000000;
      end
      else begin
        if (enb) begin
          del_6 <= sum_6;
        end
      end
    end



  assign adder_add_cast_114 = {sum_5_cast1[31], sum_5_cast1};
  assign adder_add_cast_115 = {del_6[31], del_6};
  assign sum_5_temp = adder_add_cast_114 + adder_add_cast_115;



  assign sum_5 = sum_5_temp[31:0];



  always @(posedge clk or posedge reset)
    begin : intdelay_58_process
      if (reset == 1'b1) begin
        del_5 <= 32'sb00000000000000000000000000000000;
      end
      else begin
        if (enb) begin
          del_5 <= sum_5;
        end
      end
    end



  assign adder_add_cast_116 = {sum_4_cast1[31], sum_4_cast1};
  assign adder_add_cast_117 = {del_5[31], del_5};
  assign sum_4_temp = adder_add_cast_116 + adder_add_cast_117;



  assign sum_4 = sum_4_temp[31:0];



  always @(posedge clk or posedge reset)
    begin : intdelay_59_process
      if (reset == 1'b1) begin
        del_4 <= 32'sb00000000000000000000000000000000;
      end
      else begin
        if (enb) begin
          del_4 <= sum_4;
        end
      end
    end



  assign adder_add_cast_118 = {sum_3_cast1[31], sum_3_cast1};
  assign adder_add_cast_119 = {del_4[31], del_4};
  assign sum_3_temp = adder_add_cast_118 + adder_add_cast_119;



  assign sum_3 = sum_3_temp[31:0];



  always @(posedge clk or posedge reset)
    begin : intdelay_60_process
      if (reset == 1'b1) begin
        del_3 <= 32'sb00000000000000000000000000000000;
      end
      else begin
        if (enb) begin
          del_3 <= sum_3;
        end
      end
    end



  assign adder_add_cast_120 = {sum_2_cast1[31], sum_2_cast1};
  assign adder_add_cast_121 = {del_3[31], del_3};
  assign sum_2_temp = adder_add_cast_120 + adder_add_cast_121;



  assign sum_2 = sum_2_temp[31:0];



  always @(posedge clk or posedge reset)
    begin : intdelay_61_process
      if (reset == 1'b1) begin
        del_2 <= 32'sb00000000000000000000000000000000;
      end
      else begin
        if (enb) begin
          del_2 <= sum_2;
        end
      end
    end



  assign adder_add_cast_122 = {sum_1_cast1[31], sum_1_cast1};
  assign adder_add_cast_123 = {del_2[31], del_2};
  assign sum_1_temp = adder_add_cast_122 + adder_add_cast_123;



  assign sum_1 = sum_1_temp[31:0];



  always @(posedge clk or posedge reset)
    begin : intdelay_62_process
      if (reset == 1'b1) begin
        del_1 <= 32'sb00000000000000000000000000000000;
      end
      else begin
        if (enb) begin
          del_1 <= sum_1;
        end
      end
    end



  assign adder_add_cast_124 = {finalsum_cast1[31], finalsum_cast1};
  assign adder_add_cast_125 = {del_1[31], del_1};
  assign finalsum_temp = adder_add_cast_124 + adder_add_cast_125;



  assign finalsum = finalsum_temp[31:0];



  assign output_typeconvert = finalsum[31:16];



  assign NoiseFloor_out = output_typeconvert;

endmodule  // Detector_ip_src_NoiseFloor


// -------------------------------------------------------------
// 
// File Name: hdl_prj\hdlsrc\ModeS_ADI_Codegen\Detector_ip_src_SyncCorr.v
// Created: 2017-07-24 12:12:58
// 
// Generated by MATLAB 9.2 and HDL Coder 3.10
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: Detector_ip_src_SyncCorr
// Source Path: ModeS_ADI_Codegen/Detector/CalcSyncCorr/SyncCorr
// Hierarchy Level: 2
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module Detector_ip_src_SyncCorr
          (clk,
           reset,
           enb,
           SyncCorr_in,
           SyncCorr_out);


  input   clk;
  input   reset;
  input   enb;
  input   signed [15:0] SyncCorr_in;  // sfix16_En15
  output  signed [15:0] SyncCorr_out;  // sfix16_En11

  reg signed [15:0] Delay_Pipeline_reg [0:73];  // sfix16 [74]
  wire signed [15:0] Delay_Pipeline_reg_next [0:73];  // sfix16_En15 [74]
  wire signed [15:0] delay_pipeline_1 [0:73];  // sfix16_En15 [74]
  wire signed [15:0] delay_pipeline_73;  // sfix16_En15
  wire signed [30:0] product75;  // sfix31_En29
  wire signed [15:0] delay_pipeline_72;  // sfix16_En15
  wire signed [30:0] product74;  // sfix31_En29
  reg signed [30:0] product75_out_pipe_1;  // sfix31_En29
  wire signed [36:0] sum1_1_cast1;  // sfix37_En29
  reg signed [30:0] product74_out_pipe_1;  // sfix31_En29
  wire signed [36:0] sum1_1_cast2;  // sfix37_En29
  wire signed [37:0] adder_add_cast;  // sfix38_En29
  wire signed [37:0] adder_add_cast_1;  // sfix38_En29
  wire signed [37:0] sum1_1_temp;  // sfix38_En29
  wire signed [36:0] sum1_1;  // sfix37_En29
  reg signed [36:0] sum1_1_1;  // sfix37_En29
  wire signed [15:0] delay_pipeline_71;  // sfix16_En15
  wire signed [30:0] product73;  // sfix31_En29
  wire signed [15:0] delay_pipeline_70;  // sfix16_En15
  wire signed [30:0] product72;  // sfix31_En29
  reg signed [30:0] product73_out_pipe_1;  // sfix31_En29
  wire signed [36:0] sum1_2_cast1;  // sfix37_En29
  reg signed [30:0] product72_out_pipe_1;  // sfix31_En29
  wire signed [36:0] sum1_2_cast2;  // sfix37_En29
  wire signed [37:0] adder_add_cast_2;  // sfix38_En29
  wire signed [37:0] adder_add_cast_3;  // sfix38_En29
  wire signed [37:0] sum1_2_temp;  // sfix38_En29
  wire signed [36:0] sum1_2;  // sfix37_En29
  reg signed [36:0] sum1_2_1;  // sfix37_En29
  wire signed [37:0] adder_add_cast_4;  // sfix38_En29
  wire signed [37:0] adder_add_cast_5;  // sfix38_En29
  wire signed [37:0] sum2_1_temp;  // sfix38_En29
  wire signed [36:0] sum2_1;  // sfix37_En29
  reg signed [36:0] sum2_1_1;  // sfix37_En29
  wire signed [15:0] delay_pipeline_69;  // sfix16_En15
  wire signed [30:0] product71;  // sfix31_En29
  wire signed [15:0] delay_pipeline_68;  // sfix16_En15
  wire signed [30:0] product70;  // sfix31_En29
  reg signed [30:0] product71_out_pipe_1;  // sfix31_En29
  wire signed [36:0] sum1_3_cast1;  // sfix37_En29
  reg signed [30:0] product70_out_pipe_1;  // sfix31_En29
  wire signed [36:0] sum1_3_cast2;  // sfix37_En29
  wire signed [37:0] adder_add_cast_6;  // sfix38_En29
  wire signed [37:0] adder_add_cast_7;  // sfix38_En29
  wire signed [37:0] sum1_3_temp;  // sfix38_En29
  wire signed [36:0] sum1_3;  // sfix37_En29
  reg signed [36:0] sum1_3_1;  // sfix37_En29
  wire signed [15:0] delay_pipeline_67;  // sfix16_En15
  wire signed [16:0] gain_cast;  // sfix17_En15
  wire signed [16:0] gain_cast_1;  // sfix17_En15
  wire signed [31:0] gain_cast_2;  // sfix32_En29
  wire signed [30:0] product69;  // sfix31_En29
  wire signed [15:0] delay_pipeline_66;  // sfix16_En15
  wire signed [16:0] gain_cast_3;  // sfix17_En15
  wire signed [16:0] gain_cast_4;  // sfix17_En15
  wire signed [31:0] gain_cast_5;  // sfix32_En29
  wire signed [30:0] product68;  // sfix31_En29
  reg signed [30:0] product69_out_pipe_1;  // sfix31_En29
  wire signed [36:0] sum1_4_cast1;  // sfix37_En29
  reg signed [30:0] product68_out_pipe_1;  // sfix31_En29
  wire signed [36:0] sum1_4_cast2;  // sfix37_En29
  wire signed [37:0] adder_add_cast_8;  // sfix38_En29
  wire signed [37:0] adder_add_cast_9;  // sfix38_En29
  wire signed [37:0] sum1_4_temp;  // sfix38_En29
  wire signed [36:0] sum1_4;  // sfix37_En29
  reg signed [36:0] sum1_4_1;  // sfix37_En29
  wire signed [37:0] adder_add_cast_10;  // sfix38_En29
  wire signed [37:0] adder_add_cast_11;  // sfix38_En29
  wire signed [37:0] sum2_2_temp;  // sfix38_En29
  wire signed [36:0] sum2_2;  // sfix37_En29
  reg signed [36:0] sum2_2_1;  // sfix37_En29
  wire signed [37:0] adder_add_cast_12;  // sfix38_En29
  wire signed [37:0] adder_add_cast_13;  // sfix38_En29
  wire signed [37:0] sum3_1_temp;  // sfix38_En29
  wire signed [36:0] sum3_1;  // sfix37_En29
  reg signed [36:0] sum3_1_1;  // sfix37_En29
  wire signed [15:0] delay_pipeline_65;  // sfix16_En15
  wire signed [16:0] gain_cast_6;  // sfix17_En15
  wire signed [16:0] gain_cast_7;  // sfix17_En15
  wire signed [31:0] gain_cast_8;  // sfix32_En29
  wire signed [30:0] product67;  // sfix31_En29
  wire signed [15:0] delay_pipeline_64;  // sfix16_En15
  wire signed [16:0] gain_cast_9;  // sfix17_En15
  wire signed [16:0] gain_cast_10;  // sfix17_En15
  wire signed [31:0] gain_cast_11;  // sfix32_En29
  wire signed [30:0] product66;  // sfix31_En29
  reg signed [30:0] product67_out_pipe_1;  // sfix31_En29
  wire signed [36:0] sum1_5_cast1;  // sfix37_En29
  reg signed [30:0] product66_out_pipe_1;  // sfix31_En29
  wire signed [36:0] sum1_5_cast2;  // sfix37_En29
  wire signed [37:0] adder_add_cast_14;  // sfix38_En29
  wire signed [37:0] adder_add_cast_15;  // sfix38_En29
  wire signed [37:0] sum1_5_temp;  // sfix38_En29
  wire signed [36:0] sum1_5;  // sfix37_En29
  reg signed [36:0] sum1_5_1;  // sfix37_En29
  wire signed [15:0] delay_pipeline_63;  // sfix16_En15
  wire signed [16:0] gain_cast_12;  // sfix17_En15
  wire signed [16:0] gain_cast_13;  // sfix17_En15
  wire signed [31:0] gain_cast_14;  // sfix32_En29
  wire signed [30:0] product65;  // sfix31_En29
  wire signed [15:0] delay_pipeline_62;  // sfix16_En15
  wire signed [16:0] gain_cast_15;  // sfix17_En15
  wire signed [16:0] gain_cast_16;  // sfix17_En15
  wire signed [31:0] gain_cast_17;  // sfix32_En29
  wire signed [30:0] product64;  // sfix31_En29
  reg signed [30:0] product65_out_pipe_1;  // sfix31_En29
  wire signed [36:0] sum1_6_cast1;  // sfix37_En29
  reg signed [30:0] product64_out_pipe_1;  // sfix31_En29
  wire signed [36:0] sum1_6_cast2;  // sfix37_En29
  wire signed [37:0] adder_add_cast_16;  // sfix38_En29
  wire signed [37:0] adder_add_cast_17;  // sfix38_En29
  wire signed [37:0] sum1_6_temp;  // sfix38_En29
  wire signed [36:0] sum1_6;  // sfix37_En29
  reg signed [36:0] sum1_6_1;  // sfix37_En29
  wire signed [37:0] adder_add_cast_18;  // sfix38_En29
  wire signed [37:0] adder_add_cast_19;  // sfix38_En29
  wire signed [37:0] sum2_3_temp;  // sfix38_En29
  wire signed [36:0] sum2_3;  // sfix37_En29
  reg signed [36:0] sum2_3_1;  // sfix37_En29
  wire signed [15:0] delay_pipeline_61;  // sfix16_En15
  wire signed [30:0] product63;  // sfix31_En29
  wire signed [15:0] delay_pipeline_60;  // sfix16_En15
  wire signed [30:0] product62;  // sfix31_En29
  reg signed [30:0] product63_out_pipe_1;  // sfix31_En29
  wire signed [36:0] sum1_7_cast1;  // sfix37_En29
  reg signed [30:0] product62_out_pipe_1;  // sfix31_En29
  wire signed [36:0] sum1_7_cast2;  // sfix37_En29
  wire signed [37:0] adder_add_cast_20;  // sfix38_En29
  wire signed [37:0] adder_add_cast_21;  // sfix38_En29
  wire signed [37:0] sum1_7_temp;  // sfix38_En29
  wire signed [36:0] sum1_7;  // sfix37_En29
  reg signed [36:0] sum1_7_1;  // sfix37_En29
  wire signed [15:0] delay_pipeline_59;  // sfix16_En15
  wire signed [30:0] product61;  // sfix31_En29
  wire signed [15:0] delay_pipeline_58;  // sfix16_En15
  wire signed [30:0] product60;  // sfix31_En29
  reg signed [30:0] product61_out_pipe_1;  // sfix31_En29
  wire signed [36:0] sum1_8_cast1;  // sfix37_En29
  reg signed [30:0] product60_out_pipe_1;  // sfix31_En29
  wire signed [36:0] sum1_8_cast2;  // sfix37_En29
  wire signed [37:0] adder_add_cast_22;  // sfix38_En29
  wire signed [37:0] adder_add_cast_23;  // sfix38_En29
  wire signed [37:0] sum1_8_temp;  // sfix38_En29
  wire signed [36:0] sum1_8;  // sfix37_En29
  reg signed [36:0] sum1_8_1;  // sfix37_En29
  wire signed [37:0] adder_add_cast_24;  // sfix38_En29
  wire signed [37:0] adder_add_cast_25;  // sfix38_En29
  wire signed [37:0] sum2_4_temp;  // sfix38_En29
  wire signed [36:0] sum2_4;  // sfix37_En29
  reg signed [36:0] sum2_4_1;  // sfix37_En29
  wire signed [37:0] adder_add_cast_26;  // sfix38_En29
  wire signed [37:0] adder_add_cast_27;  // sfix38_En29
  wire signed [37:0] sum3_2_temp;  // sfix38_En29
  wire signed [36:0] sum3_2;  // sfix37_En29
  reg signed [36:0] sum3_2_1;  // sfix37_En29
  wire signed [37:0] adder_add_cast_28;  // sfix38_En29
  wire signed [37:0] adder_add_cast_29;  // sfix38_En29
  wire signed [37:0] sum4_1_temp;  // sfix38_En29
  wire signed [36:0] sum4_1;  // sfix37_En29
  reg signed [36:0] sum4_1_1;  // sfix37_En29
  wire signed [15:0] delay_pipeline_57;  // sfix16_En15
  wire signed [30:0] product59;  // sfix31_En29
  wire signed [15:0] delay_pipeline_56;  // sfix16_En15
  wire signed [30:0] product58;  // sfix31_En29
  reg signed [30:0] product59_out_pipe_1;  // sfix31_En29
  wire signed [36:0] sum1_9_cast1;  // sfix37_En29
  reg signed [30:0] product58_out_pipe_1;  // sfix31_En29
  wire signed [36:0] sum1_9_cast2;  // sfix37_En29
  wire signed [37:0] adder_add_cast_30;  // sfix38_En29
  wire signed [37:0] adder_add_cast_31;  // sfix38_En29
  wire signed [37:0] sum1_9_temp;  // sfix38_En29
  wire signed [36:0] sum1_9;  // sfix37_En29
  reg signed [36:0] sum1_9_1;  // sfix37_En29
  wire signed [15:0] delay_pipeline_55;  // sfix16_En15
  wire signed [16:0] gain_cast_18;  // sfix17_En15
  wire signed [16:0] gain_cast_19;  // sfix17_En15
  wire signed [31:0] gain_cast_20;  // sfix32_En29
  wire signed [30:0] product57;  // sfix31_En29
  wire signed [15:0] delay_pipeline_54;  // sfix16_En15
  wire signed [16:0] gain_cast_21;  // sfix17_En15
  wire signed [16:0] gain_cast_22;  // sfix17_En15
  wire signed [31:0] gain_cast_23;  // sfix32_En29
  wire signed [30:0] product56;  // sfix31_En29
  reg signed [30:0] product57_out_pipe_1;  // sfix31_En29
  wire signed [36:0] sum1_10_cast1;  // sfix37_En29
  reg signed [30:0] product56_out_pipe_1;  // sfix31_En29
  wire signed [36:0] sum1_10_cast2;  // sfix37_En29
  wire signed [37:0] adder_add_cast_32;  // sfix38_En29
  wire signed [37:0] adder_add_cast_33;  // sfix38_En29
  wire signed [37:0] sum1_10_temp;  // sfix38_En29
  wire signed [36:0] sum1_10;  // sfix37_En29
  reg signed [36:0] sum1_10_1;  // sfix37_En29
  wire signed [37:0] adder_add_cast_34;  // sfix38_En29
  wire signed [37:0] adder_add_cast_35;  // sfix38_En29
  wire signed [37:0] sum2_5_temp;  // sfix38_En29
  wire signed [36:0] sum2_5;  // sfix37_En29
  reg signed [36:0] sum2_5_1;  // sfix37_En29
  wire signed [15:0] delay_pipeline_53;  // sfix16_En15
  wire signed [16:0] gain_cast_24;  // sfix17_En15
  wire signed [16:0] gain_cast_25;  // sfix17_En15
  wire signed [31:0] gain_cast_26;  // sfix32_En29
  wire signed [30:0] product55;  // sfix31_En29
  wire signed [15:0] delay_pipeline_52;  // sfix16_En15
  wire signed [16:0] gain_cast_27;  // sfix17_En15
  wire signed [16:0] gain_cast_28;  // sfix17_En15
  wire signed [31:0] gain_cast_29;  // sfix32_En29
  wire signed [30:0] product54;  // sfix31_En29
  reg signed [30:0] product55_out_pipe_1;  // sfix31_En29
  wire signed [36:0] sum1_11_cast1;  // sfix37_En29
  reg signed [30:0] product54_out_pipe_1;  // sfix31_En29
  wire signed [36:0] sum1_11_cast2;  // sfix37_En29
  wire signed [37:0] adder_add_cast_36;  // sfix38_En29
  wire signed [37:0] adder_add_cast_37;  // sfix38_En29
  wire signed [37:0] sum1_11_temp;  // sfix38_En29
  wire signed [36:0] sum1_11;  // sfix37_En29
  reg signed [36:0] sum1_11_1;  // sfix37_En29
  wire signed [15:0] delay_pipeline_51;  // sfix16_En15
  wire signed [16:0] gain_cast_30;  // sfix17_En15
  wire signed [16:0] gain_cast_31;  // sfix17_En15
  wire signed [31:0] gain_cast_32;  // sfix32_En29
  wire signed [30:0] product53;  // sfix31_En29
  wire signed [15:0] delay_pipeline_50;  // sfix16_En15
  wire signed [16:0] gain_cast_33;  // sfix17_En15
  wire signed [16:0] gain_cast_34;  // sfix17_En15
  wire signed [31:0] gain_cast_35;  // sfix32_En29
  wire signed [30:0] product52;  // sfix31_En29
  reg signed [30:0] product53_out_pipe_1;  // sfix31_En29
  wire signed [36:0] sum1_12_cast1;  // sfix37_En29
  reg signed [30:0] product52_out_pipe_1;  // sfix31_En29
  wire signed [36:0] sum1_12_cast2;  // sfix37_En29
  wire signed [37:0] adder_add_cast_38;  // sfix38_En29
  wire signed [37:0] adder_add_cast_39;  // sfix38_En29
  wire signed [37:0] sum1_12_temp;  // sfix38_En29
  wire signed [36:0] sum1_12;  // sfix37_En29
  reg signed [36:0] sum1_12_1;  // sfix37_En29
  wire signed [37:0] adder_add_cast_40;  // sfix38_En29
  wire signed [37:0] adder_add_cast_41;  // sfix38_En29
  wire signed [37:0] sum2_6_temp;  // sfix38_En29
  wire signed [36:0] sum2_6;  // sfix37_En29
  reg signed [36:0] sum2_6_1;  // sfix37_En29
  wire signed [37:0] adder_add_cast_42;  // sfix38_En29
  wire signed [37:0] adder_add_cast_43;  // sfix38_En29
  wire signed [37:0] sum3_3_temp;  // sfix38_En29
  wire signed [36:0] sum3_3;  // sfix37_En29
  reg signed [36:0] sum3_3_1;  // sfix37_En29
  wire signed [15:0] delay_pipeline_49;  // sfix16_En15
  wire signed [16:0] gain_cast_36;  // sfix17_En15
  wire signed [16:0] gain_cast_37;  // sfix17_En15
  wire signed [31:0] gain_cast_38;  // sfix32_En29
  wire signed [30:0] product51;  // sfix31_En29
  wire signed [15:0] delay_pipeline_48;  // sfix16_En15
  wire signed [16:0] gain_cast_39;  // sfix17_En15
  wire signed [16:0] gain_cast_40;  // sfix17_En15
  wire signed [31:0] gain_cast_41;  // sfix32_En29
  wire signed [30:0] product50;  // sfix31_En29
  reg signed [30:0] product51_out_pipe_1;  // sfix31_En29
  wire signed [36:0] sum1_13_cast1;  // sfix37_En29
  reg signed [30:0] product50_out_pipe_1;  // sfix31_En29
  wire signed [36:0] sum1_13_cast2;  // sfix37_En29
  wire signed [37:0] adder_add_cast_44;  // sfix38_En29
  wire signed [37:0] adder_add_cast_45;  // sfix38_En29
  wire signed [37:0] sum1_13_temp;  // sfix38_En29
  wire signed [36:0] sum1_13;  // sfix37_En29
  reg signed [36:0] sum1_13_1;  // sfix37_En29
  wire signed [15:0] delay_pipeline_47;  // sfix16_En15
  wire signed [16:0] gain_cast_42;  // sfix17_En15
  wire signed [16:0] gain_cast_43;  // sfix17_En15
  wire signed [31:0] gain_cast_44;  // sfix32_En29
  wire signed [30:0] product49;  // sfix31_En29
  wire signed [15:0] delay_pipeline_46;  // sfix16_En15
  wire signed [16:0] gain_cast_45;  // sfix17_En15
  wire signed [16:0] gain_cast_46;  // sfix17_En15
  wire signed [31:0] gain_cast_47;  // sfix32_En29
  wire signed [30:0] product48;  // sfix31_En29
  reg signed [30:0] product49_out_pipe_1;  // sfix31_En29
  wire signed [36:0] sum1_14_cast1;  // sfix37_En29
  reg signed [30:0] product48_out_pipe_1;  // sfix31_En29
  wire signed [36:0] sum1_14_cast2;  // sfix37_En29
  wire signed [37:0] adder_add_cast_46;  // sfix38_En29
  wire signed [37:0] adder_add_cast_47;  // sfix38_En29
  wire signed [37:0] sum1_14_temp;  // sfix38_En29
  wire signed [36:0] sum1_14;  // sfix37_En29
  reg signed [36:0] sum1_14_1;  // sfix37_En29
  wire signed [37:0] adder_add_cast_48;  // sfix38_En29
  wire signed [37:0] adder_add_cast_49;  // sfix38_En29
  wire signed [37:0] sum2_7_temp;  // sfix38_En29
  wire signed [36:0] sum2_7;  // sfix37_En29
  reg signed [36:0] sum2_7_1;  // sfix37_En29
  wire signed [15:0] delay_pipeline_45;  // sfix16_En15
  wire signed [16:0] gain_cast_48;  // sfix17_En15
  wire signed [16:0] gain_cast_49;  // sfix17_En15
  wire signed [31:0] gain_cast_50;  // sfix32_En29
  wire signed [30:0] product47;  // sfix31_En29
  wire signed [15:0] delay_pipeline_44;  // sfix16_En15
  wire signed [16:0] gain_cast_51;  // sfix17_En15
  wire signed [16:0] gain_cast_52;  // sfix17_En15
  wire signed [31:0] gain_cast_53;  // sfix32_En29
  wire signed [30:0] product46;  // sfix31_En29
  reg signed [30:0] product47_out_pipe_1;  // sfix31_En29
  wire signed [36:0] sum1_15_cast1;  // sfix37_En29
  reg signed [30:0] product46_out_pipe_1;  // sfix31_En29
  wire signed [36:0] sum1_15_cast2;  // sfix37_En29
  wire signed [37:0] adder_add_cast_50;  // sfix38_En29
  wire signed [37:0] adder_add_cast_51;  // sfix38_En29
  wire signed [37:0] sum1_15_temp;  // sfix38_En29
  wire signed [36:0] sum1_15;  // sfix37_En29
  reg signed [36:0] sum1_15_1;  // sfix37_En29
  wire signed [15:0] delay_pipeline_43;  // sfix16_En15
  wire signed [16:0] gain_cast_54;  // sfix17_En15
  wire signed [16:0] gain_cast_55;  // sfix17_En15
  wire signed [31:0] gain_cast_56;  // sfix32_En29
  wire signed [30:0] product45;  // sfix31_En29
  wire signed [15:0] delay_pipeline_42;  // sfix16_En15
  wire signed [16:0] gain_cast_57;  // sfix17_En15
  wire signed [16:0] gain_cast_58;  // sfix17_En15
  wire signed [31:0] gain_cast_59;  // sfix32_En29
  wire signed [30:0] product44;  // sfix31_En29
  reg signed [30:0] product45_out_pipe_1;  // sfix31_En29
  wire signed [36:0] sum1_16_cast1;  // sfix37_En29
  reg signed [30:0] product44_out_pipe_1;  // sfix31_En29
  wire signed [36:0] sum1_16_cast2;  // sfix37_En29
  wire signed [37:0] adder_add_cast_52;  // sfix38_En29
  wire signed [37:0] adder_add_cast_53;  // sfix38_En29
  wire signed [37:0] sum1_16_temp;  // sfix38_En29
  wire signed [36:0] sum1_16;  // sfix37_En29
  reg signed [36:0] sum1_16_1;  // sfix37_En29
  wire signed [37:0] adder_add_cast_54;  // sfix38_En29
  wire signed [37:0] adder_add_cast_55;  // sfix38_En29
  wire signed [37:0] sum2_8_temp;  // sfix38_En29
  wire signed [36:0] sum2_8;  // sfix37_En29
  reg signed [36:0] sum2_8_1;  // sfix37_En29
  wire signed [37:0] adder_add_cast_56;  // sfix38_En29
  wire signed [37:0] adder_add_cast_57;  // sfix38_En29
  wire signed [37:0] sum3_4_temp;  // sfix38_En29
  wire signed [36:0] sum3_4;  // sfix37_En29
  reg signed [36:0] sum3_4_1;  // sfix37_En29
  wire signed [37:0] adder_add_cast_58;  // sfix38_En29
  wire signed [37:0] adder_add_cast_59;  // sfix38_En29
  wire signed [37:0] sum4_2_temp;  // sfix38_En29
  wire signed [36:0] sum4_2;  // sfix37_En29
  reg signed [36:0] sum4_2_1;  // sfix37_En29
  wire signed [37:0] adder_add_cast_60;  // sfix38_En29
  wire signed [37:0] adder_add_cast_61;  // sfix38_En29
  wire signed [37:0] sum5_1_temp;  // sfix38_En29
  wire signed [36:0] sum5_1;  // sfix37_En29
  reg signed [36:0] sum5_1_1;  // sfix37_En29
  wire signed [15:0] delay_pipeline_41;  // sfix16_En15
  wire signed [16:0] gain_cast_60;  // sfix17_En15
  wire signed [16:0] gain_cast_61;  // sfix17_En15
  wire signed [31:0] gain_cast_62;  // sfix32_En29
  wire signed [30:0] product43;  // sfix31_En29
  wire signed [15:0] delay_pipeline_40;  // sfix16_En15
  wire signed [16:0] gain_cast_63;  // sfix17_En15
  wire signed [16:0] gain_cast_64;  // sfix17_En15
  wire signed [31:0] gain_cast_65;  // sfix32_En29
  wire signed [30:0] product42;  // sfix31_En29
  reg signed [30:0] product43_out_pipe_1;  // sfix31_En29
  wire signed [36:0] sum1_17_cast1;  // sfix37_En29
  reg signed [30:0] product42_out_pipe_1;  // sfix31_En29
  wire signed [36:0] sum1_17_cast2;  // sfix37_En29
  wire signed [37:0] adder_add_cast_62;  // sfix38_En29
  wire signed [37:0] adder_add_cast_63;  // sfix38_En29
  wire signed [37:0] sum1_17_temp;  // sfix38_En29
  wire signed [36:0] sum1_17;  // sfix37_En29
  reg signed [36:0] sum1_17_1;  // sfix37_En29
  wire signed [15:0] delay_pipeline_39;  // sfix16_En15
  wire signed [16:0] gain_cast_66;  // sfix17_En15
  wire signed [16:0] gain_cast_67;  // sfix17_En15
  wire signed [31:0] gain_cast_68;  // sfix32_En29
  wire signed [30:0] product41;  // sfix31_En29
  wire signed [15:0] delay_pipeline_38;  // sfix16_En15
  wire signed [16:0] gain_cast_69;  // sfix17_En15
  wire signed [16:0] gain_cast_70;  // sfix17_En15
  wire signed [31:0] gain_cast_71;  // sfix32_En29
  wire signed [30:0] product40;  // sfix31_En29
  reg signed [30:0] product41_out_pipe_1;  // sfix31_En29
  wire signed [36:0] sum1_18_cast1;  // sfix37_En29
  reg signed [30:0] product40_out_pipe_1;  // sfix31_En29
  wire signed [36:0] sum1_18_cast2;  // sfix37_En29
  wire signed [37:0] adder_add_cast_64;  // sfix38_En29
  wire signed [37:0] adder_add_cast_65;  // sfix38_En29
  wire signed [37:0] sum1_18_temp;  // sfix38_En29
  wire signed [36:0] sum1_18;  // sfix37_En29
  reg signed [36:0] sum1_18_1;  // sfix37_En29
  wire signed [37:0] adder_add_cast_66;  // sfix38_En29
  wire signed [37:0] adder_add_cast_67;  // sfix38_En29
  wire signed [37:0] sum2_9_temp;  // sfix38_En29
  wire signed [36:0] sum2_9;  // sfix37_En29
  reg signed [36:0] sum2_9_1;  // sfix37_En29
  wire signed [15:0] delay_pipeline_37;  // sfix16_En15
  wire signed [16:0] gain_cast_72;  // sfix17_En15
  wire signed [16:0] gain_cast_73;  // sfix17_En15
  wire signed [31:0] gain_cast_74;  // sfix32_En29
  wire signed [30:0] product39;  // sfix31_En29
  wire signed [15:0] delay_pipeline_36;  // sfix16_En15
  wire signed [16:0] gain_cast_75;  // sfix17_En15
  wire signed [16:0] gain_cast_76;  // sfix17_En15
  wire signed [31:0] gain_cast_77;  // sfix32_En29
  wire signed [30:0] product38;  // sfix31_En29
  reg signed [30:0] product39_out_pipe_1;  // sfix31_En29
  wire signed [36:0] sum1_19_cast1;  // sfix37_En29
  reg signed [30:0] product38_out_pipe_1;  // sfix31_En29
  wire signed [36:0] sum1_19_cast2;  // sfix37_En29
  wire signed [37:0] adder_add_cast_68;  // sfix38_En29
  wire signed [37:0] adder_add_cast_69;  // sfix38_En29
  wire signed [37:0] sum1_19_temp;  // sfix38_En29
  wire signed [36:0] sum1_19;  // sfix37_En29
  reg signed [36:0] sum1_19_1;  // sfix37_En29
  wire signed [15:0] delay_pipeline_35;  // sfix16_En15
  wire signed [16:0] gain_cast_78;  // sfix17_En15
  wire signed [16:0] gain_cast_79;  // sfix17_En15
  wire signed [31:0] gain_cast_80;  // sfix32_En29
  wire signed [30:0] product37;  // sfix31_En29
  wire signed [15:0] delay_pipeline_34;  // sfix16_En15
  wire signed [16:0] gain_cast_81;  // sfix17_En15
  wire signed [16:0] gain_cast_82;  // sfix17_En15
  wire signed [31:0] gain_cast_83;  // sfix32_En29
  wire signed [30:0] product36;  // sfix31_En29
  reg signed [30:0] product37_out_pipe_1;  // sfix31_En29
  wire signed [36:0] sum1_20_cast1;  // sfix37_En29
  reg signed [30:0] product36_out_pipe_1;  // sfix31_En29
  wire signed [36:0] sum1_20_cast2;  // sfix37_En29
  wire signed [37:0] adder_add_cast_70;  // sfix38_En29
  wire signed [37:0] adder_add_cast_71;  // sfix38_En29
  wire signed [37:0] sum1_20_temp;  // sfix38_En29
  wire signed [36:0] sum1_20;  // sfix37_En29
  reg signed [36:0] sum1_20_1;  // sfix37_En29
  wire signed [37:0] adder_add_cast_72;  // sfix38_En29
  wire signed [37:0] adder_add_cast_73;  // sfix38_En29
  wire signed [37:0] sum2_10_temp;  // sfix38_En29
  wire signed [36:0] sum2_10;  // sfix37_En29
  reg signed [36:0] sum2_10_1;  // sfix37_En29
  wire signed [37:0] adder_add_cast_74;  // sfix38_En29
  wire signed [37:0] adder_add_cast_75;  // sfix38_En29
  wire signed [37:0] sum3_5_temp;  // sfix38_En29
  wire signed [36:0] sum3_5;  // sfix37_En29
  reg signed [36:0] sum3_5_1;  // sfix37_En29
  wire signed [15:0] delay_pipeline_33;  // sfix16_En15
  wire signed [16:0] gain_cast_84;  // sfix17_En15
  wire signed [16:0] gain_cast_85;  // sfix17_En15
  wire signed [31:0] gain_cast_86;  // sfix32_En29
  wire signed [30:0] product35;  // sfix31_En29
  wire signed [15:0] delay_pipeline_32;  // sfix16_En15
  wire signed [16:0] gain_cast_87;  // sfix17_En15
  wire signed [16:0] gain_cast_88;  // sfix17_En15
  wire signed [31:0] gain_cast_89;  // sfix32_En29
  wire signed [30:0] product34;  // sfix31_En29
  reg signed [30:0] product35_out_pipe_1;  // sfix31_En29
  wire signed [36:0] sum1_21_cast1;  // sfix37_En29
  reg signed [30:0] product34_out_pipe_1;  // sfix31_En29
  wire signed [36:0] sum1_21_cast2;  // sfix37_En29
  wire signed [37:0] adder_add_cast_76;  // sfix38_En29
  wire signed [37:0] adder_add_cast_77;  // sfix38_En29
  wire signed [37:0] sum1_21_temp;  // sfix38_En29
  wire signed [36:0] sum1_21;  // sfix37_En29
  reg signed [36:0] sum1_21_1;  // sfix37_En29
  wire signed [15:0] delay_pipeline_31;  // sfix16_En15
  wire signed [16:0] gain_cast_90;  // sfix17_En15
  wire signed [16:0] gain_cast_91;  // sfix17_En15
  wire signed [31:0] gain_cast_92;  // sfix32_En29
  wire signed [30:0] product33;  // sfix31_En29
  wire signed [15:0] delay_pipeline_30;  // sfix16_En15
  wire signed [30:0] product32;  // sfix31_En29
  reg signed [30:0] product33_out_pipe_1;  // sfix31_En29
  wire signed [36:0] sum1_22_cast1;  // sfix37_En29
  reg signed [30:0] product32_out_pipe_1;  // sfix31_En29
  wire signed [36:0] sum1_22_cast2;  // sfix37_En29
  wire signed [37:0] adder_add_cast_78;  // sfix38_En29
  wire signed [37:0] adder_add_cast_79;  // sfix38_En29
  wire signed [37:0] sum1_22_temp;  // sfix38_En29
  wire signed [36:0] sum1_22;  // sfix37_En29
  reg signed [36:0] sum1_22_1;  // sfix37_En29
  wire signed [37:0] adder_add_cast_80;  // sfix38_En29
  wire signed [37:0] adder_add_cast_81;  // sfix38_En29
  wire signed [37:0] sum2_11_temp;  // sfix38_En29
  wire signed [36:0] sum2_11;  // sfix37_En29
  reg signed [36:0] sum2_11_1;  // sfix37_En29
  wire signed [15:0] delay_pipeline_29;  // sfix16_En15
  wire signed [30:0] product31;  // sfix31_En29
  wire signed [15:0] delay_pipeline_28;  // sfix16_En15
  wire signed [30:0] product30;  // sfix31_En29
  reg signed [30:0] product31_out_pipe_1;  // sfix31_En29
  wire signed [36:0] sum1_23_cast1;  // sfix37_En29
  reg signed [30:0] product30_out_pipe_1;  // sfix31_En29
  wire signed [36:0] sum1_23_cast2;  // sfix37_En29
  wire signed [37:0] adder_add_cast_82;  // sfix38_En29
  wire signed [37:0] adder_add_cast_83;  // sfix38_En29
  wire signed [37:0] sum1_23_temp;  // sfix38_En29
  wire signed [36:0] sum1_23;  // sfix37_En29
  reg signed [36:0] sum1_23_1;  // sfix37_En29
  wire signed [15:0] delay_pipeline_27;  // sfix16_En15
  wire signed [30:0] product29;  // sfix31_En29
  wire signed [15:0] delay_pipeline_26;  // sfix16_En15
  wire signed [30:0] product28;  // sfix31_En29
  reg signed [30:0] product29_out_pipe_1;  // sfix31_En29
  wire signed [36:0] sum1_24_cast1;  // sfix37_En29
  reg signed [30:0] product28_out_pipe_1;  // sfix31_En29
  wire signed [36:0] sum1_24_cast2;  // sfix37_En29
  wire signed [37:0] adder_add_cast_84;  // sfix38_En29
  wire signed [37:0] adder_add_cast_85;  // sfix38_En29
  wire signed [37:0] sum1_24_temp;  // sfix38_En29
  wire signed [36:0] sum1_24;  // sfix37_En29
  reg signed [36:0] sum1_24_1;  // sfix37_En29
  wire signed [37:0] adder_add_cast_86;  // sfix38_En29
  wire signed [37:0] adder_add_cast_87;  // sfix38_En29
  wire signed [37:0] sum2_12_temp;  // sfix38_En29
  wire signed [36:0] sum2_12;  // sfix37_En29
  reg signed [36:0] sum2_12_1;  // sfix37_En29
  wire signed [37:0] adder_add_cast_88;  // sfix38_En29
  wire signed [37:0] adder_add_cast_89;  // sfix38_En29
  wire signed [37:0] sum3_6_temp;  // sfix38_En29
  wire signed [36:0] sum3_6;  // sfix37_En29
  reg signed [36:0] sum3_6_1;  // sfix37_En29
  wire signed [37:0] adder_add_cast_90;  // sfix38_En29
  wire signed [37:0] adder_add_cast_91;  // sfix38_En29
  wire signed [37:0] sum4_3_temp;  // sfix38_En29
  wire signed [36:0] sum4_3;  // sfix37_En29
  reg signed [36:0] sum4_3_1;  // sfix37_En29
  wire signed [15:0] delay_pipeline_25;  // sfix16_En15
  wire signed [30:0] product27;  // sfix31_En29
  wire signed [15:0] delay_pipeline_24;  // sfix16_En15
  wire signed [30:0] product26;  // sfix31_En29
  reg signed [30:0] product27_out_pipe_1;  // sfix31_En29
  wire signed [36:0] sum1_25_cast1;  // sfix37_En29
  reg signed [30:0] product26_out_pipe_1;  // sfix31_En29
  wire signed [36:0] sum1_25_cast2;  // sfix37_En29
  wire signed [37:0] adder_add_cast_92;  // sfix38_En29
  wire signed [37:0] adder_add_cast_93;  // sfix38_En29
  wire signed [37:0] sum1_25_temp;  // sfix38_En29
  wire signed [36:0] sum1_25;  // sfix37_En29
  reg signed [36:0] sum1_25_1;  // sfix37_En29
  wire signed [15:0] delay_pipeline_23;  // sfix16_En15
  wire signed [16:0] gain_cast_93;  // sfix17_En15
  wire signed [16:0] gain_cast_94;  // sfix17_En15
  wire signed [31:0] gain_cast_95;  // sfix32_En29
  wire signed [30:0] product25;  // sfix31_En29
  wire signed [15:0] delay_pipeline_22;  // sfix16_En15
  wire signed [16:0] gain_cast_96;  // sfix17_En15
  wire signed [16:0] gain_cast_97;  // sfix17_En15
  wire signed [31:0] gain_cast_98;  // sfix32_En29
  wire signed [30:0] product24;  // sfix31_En29
  reg signed [30:0] product25_out_pipe_1;  // sfix31_En29
  wire signed [36:0] sum1_26_cast1;  // sfix37_En29
  reg signed [30:0] product24_out_pipe_1;  // sfix31_En29
  wire signed [36:0] sum1_26_cast2;  // sfix37_En29
  wire signed [37:0] adder_add_cast_94;  // sfix38_En29
  wire signed [37:0] adder_add_cast_95;  // sfix38_En29
  wire signed [37:0] sum1_26_temp;  // sfix38_En29
  wire signed [36:0] sum1_26;  // sfix37_En29
  reg signed [36:0] sum1_26_1;  // sfix37_En29
  wire signed [37:0] adder_add_cast_96;  // sfix38_En29
  wire signed [37:0] adder_add_cast_97;  // sfix38_En29
  wire signed [37:0] sum2_13_temp;  // sfix38_En29
  wire signed [36:0] sum2_13;  // sfix37_En29
  reg signed [36:0] sum2_13_1;  // sfix37_En29
  wire signed [15:0] delay_pipeline_21;  // sfix16_En15
  wire signed [16:0] gain_cast_99;  // sfix17_En15
  wire signed [16:0] gain_cast_100;  // sfix17_En15
  wire signed [31:0] gain_cast_101;  // sfix32_En29
  wire signed [30:0] product23;  // sfix31_En29
  wire signed [15:0] delay_pipeline_20;  // sfix16_En15
  wire signed [16:0] gain_cast_102;  // sfix17_En15
  wire signed [16:0] gain_cast_103;  // sfix17_En15
  wire signed [31:0] gain_cast_104;  // sfix32_En29
  wire signed [30:0] product22;  // sfix31_En29
  reg signed [30:0] product23_out_pipe_1;  // sfix31_En29
  wire signed [36:0] sum1_27_cast1;  // sfix37_En29
  reg signed [30:0] product22_out_pipe_1;  // sfix31_En29
  wire signed [36:0] sum1_27_cast2;  // sfix37_En29
  wire signed [37:0] adder_add_cast_98;  // sfix38_En29
  wire signed [37:0] adder_add_cast_99;  // sfix38_En29
  wire signed [37:0] sum1_27_temp;  // sfix38_En29
  wire signed [36:0] sum1_27;  // sfix37_En29
  reg signed [36:0] sum1_27_1;  // sfix37_En29
  wire signed [15:0] delay_pipeline_19;  // sfix16_En15
  wire signed [16:0] gain_cast_105;  // sfix17_En15
  wire signed [16:0] gain_cast_106;  // sfix17_En15
  wire signed [31:0] gain_cast_107;  // sfix32_En29
  wire signed [30:0] product21;  // sfix31_En29
  wire signed [15:0] delay_pipeline_18;  // sfix16_En15
  wire signed [16:0] gain_cast_108;  // sfix17_En15
  wire signed [16:0] gain_cast_109;  // sfix17_En15
  wire signed [31:0] gain_cast_110;  // sfix32_En29
  wire signed [30:0] product20;  // sfix31_En29
  reg signed [30:0] product21_out_pipe_1;  // sfix31_En29
  wire signed [36:0] sum1_28_cast1;  // sfix37_En29
  reg signed [30:0] product20_out_pipe_1;  // sfix31_En29
  wire signed [36:0] sum1_28_cast2;  // sfix37_En29
  wire signed [37:0] adder_add_cast_100;  // sfix38_En29
  wire signed [37:0] adder_add_cast_101;  // sfix38_En29
  wire signed [37:0] sum1_28_temp;  // sfix38_En29
  wire signed [36:0] sum1_28;  // sfix37_En29
  reg signed [36:0] sum1_28_1;  // sfix37_En29
  wire signed [37:0] adder_add_cast_102;  // sfix38_En29
  wire signed [37:0] adder_add_cast_103;  // sfix38_En29
  wire signed [37:0] sum2_14_temp;  // sfix38_En29
  wire signed [36:0] sum2_14;  // sfix37_En29
  reg signed [36:0] sum2_14_1;  // sfix37_En29
  wire signed [37:0] adder_add_cast_104;  // sfix38_En29
  wire signed [37:0] adder_add_cast_105;  // sfix38_En29
  wire signed [37:0] sum3_7_temp;  // sfix38_En29
  wire signed [36:0] sum3_7;  // sfix37_En29
  reg signed [36:0] sum3_7_1;  // sfix37_En29
  wire signed [15:0] delay_pipeline_17;  // sfix16_En15
  wire signed [30:0] product19;  // sfix31_En29
  wire signed [15:0] delay_pipeline_16;  // sfix16_En15
  wire signed [30:0] product18;  // sfix31_En29
  reg signed [30:0] product19_out_pipe_1;  // sfix31_En29
  wire signed [36:0] sum1_29_cast1;  // sfix37_En29
  reg signed [30:0] product18_out_pipe_1;  // sfix31_En29
  wire signed [36:0] sum1_29_cast2;  // sfix37_En29
  wire signed [37:0] adder_add_cast_106;  // sfix38_En29
  wire signed [37:0] adder_add_cast_107;  // sfix38_En29
  wire signed [37:0] sum1_29_temp;  // sfix38_En29
  wire signed [36:0] sum1_29;  // sfix37_En29
  reg signed [36:0] sum1_29_1;  // sfix37_En29
  wire signed [15:0] delay_pipeline_15;  // sfix16_En15
  wire signed [30:0] product17;  // sfix31_En29
  wire signed [15:0] delay_pipeline_14;  // sfix16_En15
  wire signed [30:0] product16;  // sfix31_En29
  reg signed [30:0] product17_out_pipe_1;  // sfix31_En29
  wire signed [36:0] sum1_30_cast1;  // sfix37_En29
  reg signed [30:0] product16_out_pipe_1;  // sfix31_En29
  wire signed [36:0] sum1_30_cast2;  // sfix37_En29
  wire signed [37:0] adder_add_cast_108;  // sfix38_En29
  wire signed [37:0] adder_add_cast_109;  // sfix38_En29
  wire signed [37:0] sum1_30_temp;  // sfix38_En29
  wire signed [36:0] sum1_30;  // sfix37_En29
  reg signed [36:0] sum1_30_1;  // sfix37_En29
  wire signed [37:0] adder_add_cast_110;  // sfix38_En29
  wire signed [37:0] adder_add_cast_111;  // sfix38_En29
  wire signed [37:0] sum2_15_temp;  // sfix38_En29
  wire signed [36:0] sum2_15;  // sfix37_En29
  reg signed [36:0] sum2_15_1;  // sfix37_En29
  wire signed [15:0] delay_pipeline_13;  // sfix16_En15
  wire signed [30:0] product15;  // sfix31_En29
  wire signed [15:0] delay_pipeline_12;  // sfix16_En15
  wire signed [30:0] product14;  // sfix31_En29
  reg signed [30:0] product15_out_pipe_1;  // sfix31_En29
  wire signed [36:0] sum1_31_cast1;  // sfix37_En29
  reg signed [30:0] product14_out_pipe_1;  // sfix31_En29
  wire signed [36:0] sum1_31_cast2;  // sfix37_En29
  wire signed [37:0] adder_add_cast_112;  // sfix38_En29
  wire signed [37:0] adder_add_cast_113;  // sfix38_En29
  wire signed [37:0] sum1_31_temp;  // sfix38_En29
  wire signed [36:0] sum1_31;  // sfix37_En29
  reg signed [36:0] sum1_31_1;  // sfix37_En29
  wire signed [15:0] delay_pipeline_11;  // sfix16_En15
  wire signed [16:0] gain_cast_111;  // sfix17_En15
  wire signed [16:0] gain_cast_112;  // sfix17_En15
  wire signed [31:0] gain_cast_113;  // sfix32_En29
  wire signed [30:0] product13;  // sfix31_En29
  wire signed [15:0] delay_pipeline_10;  // sfix16_En15
  wire signed [16:0] gain_cast_114;  // sfix17_En15
  wire signed [16:0] gain_cast_115;  // sfix17_En15
  wire signed [31:0] gain_cast_116;  // sfix32_En29
  wire signed [30:0] product12;  // sfix31_En29
  reg signed [30:0] product13_out_pipe_1;  // sfix31_En29
  wire signed [36:0] sum1_32_cast1;  // sfix37_En29
  reg signed [30:0] product12_out_pipe_1;  // sfix31_En29
  wire signed [36:0] sum1_32_cast2;  // sfix37_En29
  wire signed [37:0] adder_add_cast_114;  // sfix38_En29
  wire signed [37:0] adder_add_cast_115;  // sfix38_En29
  wire signed [37:0] sum1_32_temp;  // sfix38_En29
  wire signed [36:0] sum1_32;  // sfix37_En29
  reg signed [36:0] sum1_32_1;  // sfix37_En29
  wire signed [37:0] adder_add_cast_116;  // sfix38_En29
  wire signed [37:0] adder_add_cast_117;  // sfix38_En29
  wire signed [37:0] sum2_16_temp;  // sfix38_En29
  wire signed [36:0] sum2_16;  // sfix37_En29
  reg signed [36:0] sum2_16_1;  // sfix37_En29
  wire signed [37:0] adder_add_cast_118;  // sfix38_En29
  wire signed [37:0] adder_add_cast_119;  // sfix38_En29
  wire signed [37:0] sum3_8_temp;  // sfix38_En29
  wire signed [36:0] sum3_8;  // sfix37_En29
  reg signed [36:0] sum3_8_1;  // sfix37_En29
  wire signed [37:0] adder_add_cast_120;  // sfix38_En29
  wire signed [37:0] adder_add_cast_121;  // sfix38_En29
  wire signed [37:0] sum4_4_temp;  // sfix38_En29
  wire signed [36:0] sum4_4;  // sfix37_En29
  reg signed [36:0] sum4_4_1;  // sfix37_En29
  wire signed [37:0] adder_add_cast_122;  // sfix38_En29
  wire signed [37:0] adder_add_cast_123;  // sfix38_En29
  wire signed [37:0] sum5_2_temp;  // sfix38_En29
  wire signed [36:0] sum5_2;  // sfix37_En29
  reg signed [36:0] sum5_2_1;  // sfix37_En29
  wire signed [37:0] adder_add_cast_124;  // sfix38_En29
  wire signed [37:0] adder_add_cast_125;  // sfix38_En29
  wire signed [37:0] sum6_1_temp;  // sfix38_En29
  wire signed [36:0] sum6_1;  // sfix37_En29
  reg signed [36:0] sum6_1_1;  // sfix37_En29
  wire signed [15:0] delay_pipeline_9;  // sfix16_En15
  wire signed [16:0] gain_cast_117;  // sfix17_En15
  wire signed [16:0] gain_cast_118;  // sfix17_En15
  wire signed [31:0] gain_cast_119;  // sfix32_En29
  wire signed [30:0] product11;  // sfix31_En29
  wire signed [15:0] delay_pipeline_8;  // sfix16_En15
  wire signed [16:0] gain_cast_120;  // sfix17_En15
  wire signed [16:0] gain_cast_121;  // sfix17_En15
  wire signed [31:0] gain_cast_122;  // sfix32_En29
  wire signed [30:0] product10;  // sfix31_En29
  reg signed [30:0] product11_out_pipe_1;  // sfix31_En29
  wire signed [36:0] sum1_33_cast1;  // sfix37_En29
  reg signed [30:0] product10_out_pipe_1;  // sfix31_En29
  wire signed [36:0] sum1_33_cast2;  // sfix37_En29
  wire signed [37:0] adder_add_cast_126;  // sfix38_En29
  wire signed [37:0] adder_add_cast_127;  // sfix38_En29
  wire signed [37:0] sum1_33_temp;  // sfix38_En29
  wire signed [36:0] sum1_33;  // sfix37_En29
  reg signed [36:0] sum1_33_1;  // sfix37_En29
  wire signed [15:0] delay_pipeline_7;  // sfix16_En15
  wire signed [16:0] gain_cast_123;  // sfix17_En15
  wire signed [16:0] gain_cast_124;  // sfix17_En15
  wire signed [31:0] gain_cast_125;  // sfix32_En29
  wire signed [30:0] product9;  // sfix31_En29
  wire signed [15:0] delay_pipeline_6;  // sfix16_En15
  wire signed [16:0] gain_cast_126;  // sfix17_En15
  wire signed [16:0] gain_cast_127;  // sfix17_En15
  wire signed [31:0] gain_cast_128;  // sfix32_En29
  wire signed [30:0] product8;  // sfix31_En29
  reg signed [30:0] product9_out_pipe_1;  // sfix31_En29
  wire signed [36:0] sum1_34_cast1;  // sfix37_En29
  reg signed [30:0] product8_out_pipe_1;  // sfix31_En29
  wire signed [36:0] sum1_34_cast2;  // sfix37_En29
  wire signed [37:0] adder_add_cast_128;  // sfix38_En29
  wire signed [37:0] adder_add_cast_129;  // sfix38_En29
  wire signed [37:0] sum1_34_temp;  // sfix38_En29
  wire signed [36:0] sum1_34;  // sfix37_En29
  reg signed [36:0] sum1_34_1;  // sfix37_En29
  wire signed [37:0] adder_add_cast_130;  // sfix38_En29
  wire signed [37:0] adder_add_cast_131;  // sfix38_En29
  wire signed [37:0] sum2_17_temp;  // sfix38_En29
  wire signed [36:0] sum2_17;  // sfix37_En29
  reg signed [36:0] sum2_17_1;  // sfix37_En29
  wire signed [15:0] delay_pipeline_5;  // sfix16_En15
  wire signed [16:0] gain_cast_129;  // sfix17_En15
  wire signed [16:0] gain_cast_130;  // sfix17_En15
  wire signed [31:0] gain_cast_131;  // sfix32_En29
  wire signed [30:0] product7;  // sfix31_En29
  wire signed [15:0] delay_pipeline_4;  // sfix16_En15
  wire signed [16:0] gain_cast_132;  // sfix17_En15
  wire signed [16:0] gain_cast_133;  // sfix17_En15
  wire signed [31:0] gain_cast_134;  // sfix32_En29
  wire signed [30:0] product6;  // sfix31_En29
  reg signed [30:0] product7_out_pipe_1;  // sfix31_En29
  wire signed [36:0] sum1_35_cast1;  // sfix37_En29
  reg signed [30:0] product6_out_pipe_1;  // sfix31_En29
  wire signed [36:0] sum1_35_cast2;  // sfix37_En29
  wire signed [37:0] adder_add_cast_132;  // sfix38_En29
  wire signed [37:0] adder_add_cast_133;  // sfix38_En29
  wire signed [37:0] sum1_35_temp;  // sfix38_En29
  wire signed [36:0] sum1_35;  // sfix37_En29
  reg signed [36:0] sum1_35_1;  // sfix37_En29
  wire signed [15:0] delay_pipeline_3;  // sfix16_En15
  wire signed [16:0] gain_cast_135;  // sfix17_En15
  wire signed [16:0] gain_cast_136;  // sfix17_En15
  wire signed [31:0] gain_cast_137;  // sfix32_En29
  wire signed [30:0] product5;  // sfix31_En29
  wire signed [15:0] delay_pipeline_2;  // sfix16_En15
  wire signed [16:0] gain_cast_138;  // sfix17_En15
  wire signed [16:0] gain_cast_139;  // sfix17_En15
  wire signed [31:0] gain_cast_140;  // sfix32_En29
  wire signed [30:0] product4;  // sfix31_En29
  reg signed [30:0] product5_out_pipe_1;  // sfix31_En29
  wire signed [36:0] sum1_36_cast1;  // sfix37_En29
  reg signed [30:0] product4_out_pipe_1;  // sfix31_En29
  wire signed [36:0] sum1_36_cast2;  // sfix37_En29
  wire signed [37:0] adder_add_cast_134;  // sfix38_En29
  wire signed [37:0] adder_add_cast_135;  // sfix38_En29
  wire signed [37:0] sum1_36_temp;  // sfix38_En29
  wire signed [36:0] sum1_36;  // sfix37_En29
  reg signed [36:0] sum1_36_1;  // sfix37_En29
  wire signed [37:0] adder_add_cast_136;  // sfix38_En29
  wire signed [37:0] adder_add_cast_137;  // sfix38_En29
  wire signed [37:0] sum2_18_temp;  // sfix38_En29
  wire signed [36:0] sum2_18;  // sfix37_En29
  reg signed [36:0] sum2_18_1;  // sfix37_En29
  wire signed [37:0] adder_add_cast_138;  // sfix38_En29
  wire signed [37:0] adder_add_cast_139;  // sfix38_En29
  wire signed [37:0] sum3_9_temp;  // sfix38_En29
  wire signed [36:0] sum3_9;  // sfix37_En29
  reg signed [36:0] sum3_9_1;  // sfix37_En29
  wire signed [15:0] delay_pipeline_1_1;  // sfix16_En15
  wire signed [16:0] gain_cast_141;  // sfix17_En15
  wire signed [16:0] gain_cast_142;  // sfix17_En15
  wire signed [31:0] gain_cast_143;  // sfix32_En29
  wire signed [30:0] product3;  // sfix31_En29
  wire signed [15:0] delay_pipeline_0;  // sfix16_En15
  wire signed [16:0] gain_cast_144;  // sfix17_En15
  wire signed [16:0] gain_cast_145;  // sfix17_En15
  wire signed [31:0] gain_cast_146;  // sfix32_En29
  wire signed [30:0] product2;  // sfix31_En29
  reg signed [30:0] product3_out_pipe_1;  // sfix31_En29
  wire signed [36:0] sum1_37_cast1;  // sfix37_En29
  reg signed [30:0] product2_out_pipe_1;  // sfix31_En29
  wire signed [36:0] sum1_37_cast2;  // sfix37_En29
  wire signed [37:0] adder_add_cast_140;  // sfix38_En29
  wire signed [37:0] adder_add_cast_141;  // sfix38_En29
  wire signed [37:0] sum1_37_temp;  // sfix38_En29
  wire signed [36:0] sum1_37;  // sfix37_En29
  wire signed [16:0] gain_cast_147;  // sfix17_En15
  wire signed [16:0] gain_cast_148;  // sfix17_En15
  wire signed [31:0] gain_cast_149;  // sfix32_En29
  wire signed [30:0] product1;  // sfix31_En29
  reg signed [36:0] sum1_37_1;  // sfix37_En29
  reg signed [30:0] product1_out_buff_out_pipe_reg [0:1];  // sfix31 [2]
  wire signed [30:0] product1_out_buff_out_pipe_reg_next [0:1];  // sfix31_En29 [2]
  wire signed [30:0] product1_out_pipe;  // sfix31_En29
  wire signed [36:0] sum2_19_cast2;  // sfix37_En29
  wire signed [37:0] adder_add_cast_142;  // sfix38_En29
  wire signed [37:0] adder_add_cast_143;  // sfix38_En29
  wire signed [37:0] sum2_19_temp;  // sfix38_En29
  wire signed [36:0] sum2_19;  // sfix37_En29
  reg signed [36:0] dtc_out_buff_out_buff_out_pipe_reg [0:1];  // sfix37 [2]
  wire signed [36:0] dtc_out_buff_out_buff_out_pipe_reg_next [0:1];  // sfix37_En29 [2]
  wire signed [36:0] sum2_19_1;  // sfix37_En29
  wire signed [37:0] adder_add_cast_144;  // sfix38_En29
  wire signed [37:0] adder_add_cast_145;  // sfix38_En29
  wire signed [37:0] sum4_5_temp;  // sfix38_En29
  wire signed [36:0] sum4_5;  // sfix37_En29
  reg signed [36:0] dtc_out_buff_out_buff_out_buff_out_pipe_reg [0:2];  // sfix37 [3]
  wire signed [36:0] dtc_out_buff_out_buff_out_buff_out_pipe_reg_next [0:2];  // sfix37_En29 [3]
  wire signed [36:0] sum4_5_1;  // sfix37_En29
  wire signed [37:0] adder_add_cast_146;  // sfix38_En29
  wire signed [37:0] adder_add_cast_147;  // sfix38_En29
  wire signed [37:0] sum7_1_temp;  // sfix38_En29
  wire signed [36:0] sum7_1;  // sfix37_En29
  reg signed [36:0] sum7_1_1;  // sfix37_En29
  wire signed [15:0] output_typeconvert;  // sfix16_En11


  always @(posedge clk or posedge reset)
    begin : Delay_Pipeline_process
      if (reset == 1'b1) begin
        Delay_Pipeline_reg[0] <= 16'sb0000000000000000;
        Delay_Pipeline_reg[1] <= 16'sb0000000000000000;
        Delay_Pipeline_reg[2] <= 16'sb0000000000000000;
        Delay_Pipeline_reg[3] <= 16'sb0000000000000000;
        Delay_Pipeline_reg[4] <= 16'sb0000000000000000;
        Delay_Pipeline_reg[5] <= 16'sb0000000000000000;
        Delay_Pipeline_reg[6] <= 16'sb0000000000000000;
        Delay_Pipeline_reg[7] <= 16'sb0000000000000000;
        Delay_Pipeline_reg[8] <= 16'sb0000000000000000;
        Delay_Pipeline_reg[9] <= 16'sb0000000000000000;
        Delay_Pipeline_reg[10] <= 16'sb0000000000000000;
        Delay_Pipeline_reg[11] <= 16'sb0000000000000000;
        Delay_Pipeline_reg[12] <= 16'sb0000000000000000;
        Delay_Pipeline_reg[13] <= 16'sb0000000000000000;
        Delay_Pipeline_reg[14] <= 16'sb0000000000000000;
        Delay_Pipeline_reg[15] <= 16'sb0000000000000000;
        Delay_Pipeline_reg[16] <= 16'sb0000000000000000;
        Delay_Pipeline_reg[17] <= 16'sb0000000000000000;
        Delay_Pipeline_reg[18] <= 16'sb0000000000000000;
        Delay_Pipeline_reg[19] <= 16'sb0000000000000000;
        Delay_Pipeline_reg[20] <= 16'sb0000000000000000;
        Delay_Pipeline_reg[21] <= 16'sb0000000000000000;
        Delay_Pipeline_reg[22] <= 16'sb0000000000000000;
        Delay_Pipeline_reg[23] <= 16'sb0000000000000000;
        Delay_Pipeline_reg[24] <= 16'sb0000000000000000;
        Delay_Pipeline_reg[25] <= 16'sb0000000000000000;
        Delay_Pipeline_reg[26] <= 16'sb0000000000000000;
        Delay_Pipeline_reg[27] <= 16'sb0000000000000000;
        Delay_Pipeline_reg[28] <= 16'sb0000000000000000;
        Delay_Pipeline_reg[29] <= 16'sb0000000000000000;
        Delay_Pipeline_reg[30] <= 16'sb0000000000000000;
        Delay_Pipeline_reg[31] <= 16'sb0000000000000000;
        Delay_Pipeline_reg[32] <= 16'sb0000000000000000;
        Delay_Pipeline_reg[33] <= 16'sb0000000000000000;
        Delay_Pipeline_reg[34] <= 16'sb0000000000000000;
        Delay_Pipeline_reg[35] <= 16'sb0000000000000000;
        Delay_Pipeline_reg[36] <= 16'sb0000000000000000;
        Delay_Pipeline_reg[37] <= 16'sb0000000000000000;
        Delay_Pipeline_reg[38] <= 16'sb0000000000000000;
        Delay_Pipeline_reg[39] <= 16'sb0000000000000000;
        Delay_Pipeline_reg[40] <= 16'sb0000000000000000;
        Delay_Pipeline_reg[41] <= 16'sb0000000000000000;
        Delay_Pipeline_reg[42] <= 16'sb0000000000000000;
        Delay_Pipeline_reg[43] <= 16'sb0000000000000000;
        Delay_Pipeline_reg[44] <= 16'sb0000000000000000;
        Delay_Pipeline_reg[45] <= 16'sb0000000000000000;
        Delay_Pipeline_reg[46] <= 16'sb0000000000000000;
        Delay_Pipeline_reg[47] <= 16'sb0000000000000000;
        Delay_Pipeline_reg[48] <= 16'sb0000000000000000;
        Delay_Pipeline_reg[49] <= 16'sb0000000000000000;
        Delay_Pipeline_reg[50] <= 16'sb0000000000000000;
        Delay_Pipeline_reg[51] <= 16'sb0000000000000000;
        Delay_Pipeline_reg[52] <= 16'sb0000000000000000;
        Delay_Pipeline_reg[53] <= 16'sb0000000000000000;
        Delay_Pipeline_reg[54] <= 16'sb0000000000000000;
        Delay_Pipeline_reg[55] <= 16'sb0000000000000000;
        Delay_Pipeline_reg[56] <= 16'sb0000000000000000;
        Delay_Pipeline_reg[57] <= 16'sb0000000000000000;
        Delay_Pipeline_reg[58] <= 16'sb0000000000000000;
        Delay_Pipeline_reg[59] <= 16'sb0000000000000000;
        Delay_Pipeline_reg[60] <= 16'sb0000000000000000;
        Delay_Pipeline_reg[61] <= 16'sb0000000000000000;
        Delay_Pipeline_reg[62] <= 16'sb0000000000000000;
        Delay_Pipeline_reg[63] <= 16'sb0000000000000000;
        Delay_Pipeline_reg[64] <= 16'sb0000000000000000;
        Delay_Pipeline_reg[65] <= 16'sb0000000000000000;
        Delay_Pipeline_reg[66] <= 16'sb0000000000000000;
        Delay_Pipeline_reg[67] <= 16'sb0000000000000000;
        Delay_Pipeline_reg[68] <= 16'sb0000000000000000;
        Delay_Pipeline_reg[69] <= 16'sb0000000000000000;
        Delay_Pipeline_reg[70] <= 16'sb0000000000000000;
        Delay_Pipeline_reg[71] <= 16'sb0000000000000000;
        Delay_Pipeline_reg[72] <= 16'sb0000000000000000;
        Delay_Pipeline_reg[73] <= 16'sb0000000000000000;
      end
      else begin
        if (enb) begin
          Delay_Pipeline_reg[0] <= Delay_Pipeline_reg_next[0];
          Delay_Pipeline_reg[1] <= Delay_Pipeline_reg_next[1];
          Delay_Pipeline_reg[2] <= Delay_Pipeline_reg_next[2];
          Delay_Pipeline_reg[3] <= Delay_Pipeline_reg_next[3];
          Delay_Pipeline_reg[4] <= Delay_Pipeline_reg_next[4];
          Delay_Pipeline_reg[5] <= Delay_Pipeline_reg_next[5];
          Delay_Pipeline_reg[6] <= Delay_Pipeline_reg_next[6];
          Delay_Pipeline_reg[7] <= Delay_Pipeline_reg_next[7];
          Delay_Pipeline_reg[8] <= Delay_Pipeline_reg_next[8];
          Delay_Pipeline_reg[9] <= Delay_Pipeline_reg_next[9];
          Delay_Pipeline_reg[10] <= Delay_Pipeline_reg_next[10];
          Delay_Pipeline_reg[11] <= Delay_Pipeline_reg_next[11];
          Delay_Pipeline_reg[12] <= Delay_Pipeline_reg_next[12];
          Delay_Pipeline_reg[13] <= Delay_Pipeline_reg_next[13];
          Delay_Pipeline_reg[14] <= Delay_Pipeline_reg_next[14];
          Delay_Pipeline_reg[15] <= Delay_Pipeline_reg_next[15];
          Delay_Pipeline_reg[16] <= Delay_Pipeline_reg_next[16];
          Delay_Pipeline_reg[17] <= Delay_Pipeline_reg_next[17];
          Delay_Pipeline_reg[18] <= Delay_Pipeline_reg_next[18];
          Delay_Pipeline_reg[19] <= Delay_Pipeline_reg_next[19];
          Delay_Pipeline_reg[20] <= Delay_Pipeline_reg_next[20];
          Delay_Pipeline_reg[21] <= Delay_Pipeline_reg_next[21];
          Delay_Pipeline_reg[22] <= Delay_Pipeline_reg_next[22];
          Delay_Pipeline_reg[23] <= Delay_Pipeline_reg_next[23];
          Delay_Pipeline_reg[24] <= Delay_Pipeline_reg_next[24];
          Delay_Pipeline_reg[25] <= Delay_Pipeline_reg_next[25];
          Delay_Pipeline_reg[26] <= Delay_Pipeline_reg_next[26];
          Delay_Pipeline_reg[27] <= Delay_Pipeline_reg_next[27];
          Delay_Pipeline_reg[28] <= Delay_Pipeline_reg_next[28];
          Delay_Pipeline_reg[29] <= Delay_Pipeline_reg_next[29];
          Delay_Pipeline_reg[30] <= Delay_Pipeline_reg_next[30];
          Delay_Pipeline_reg[31] <= Delay_Pipeline_reg_next[31];
          Delay_Pipeline_reg[32] <= Delay_Pipeline_reg_next[32];
          Delay_Pipeline_reg[33] <= Delay_Pipeline_reg_next[33];
          Delay_Pipeline_reg[34] <= Delay_Pipeline_reg_next[34];
          Delay_Pipeline_reg[35] <= Delay_Pipeline_reg_next[35];
          Delay_Pipeline_reg[36] <= Delay_Pipeline_reg_next[36];
          Delay_Pipeline_reg[37] <= Delay_Pipeline_reg_next[37];
          Delay_Pipeline_reg[38] <= Delay_Pipeline_reg_next[38];
          Delay_Pipeline_reg[39] <= Delay_Pipeline_reg_next[39];
          Delay_Pipeline_reg[40] <= Delay_Pipeline_reg_next[40];
          Delay_Pipeline_reg[41] <= Delay_Pipeline_reg_next[41];
          Delay_Pipeline_reg[42] <= Delay_Pipeline_reg_next[42];
          Delay_Pipeline_reg[43] <= Delay_Pipeline_reg_next[43];
          Delay_Pipeline_reg[44] <= Delay_Pipeline_reg_next[44];
          Delay_Pipeline_reg[45] <= Delay_Pipeline_reg_next[45];
          Delay_Pipeline_reg[46] <= Delay_Pipeline_reg_next[46];
          Delay_Pipeline_reg[47] <= Delay_Pipeline_reg_next[47];
          Delay_Pipeline_reg[48] <= Delay_Pipeline_reg_next[48];
          Delay_Pipeline_reg[49] <= Delay_Pipeline_reg_next[49];
          Delay_Pipeline_reg[50] <= Delay_Pipeline_reg_next[50];
          Delay_Pipeline_reg[51] <= Delay_Pipeline_reg_next[51];
          Delay_Pipeline_reg[52] <= Delay_Pipeline_reg_next[52];
          Delay_Pipeline_reg[53] <= Delay_Pipeline_reg_next[53];
          Delay_Pipeline_reg[54] <= Delay_Pipeline_reg_next[54];
          Delay_Pipeline_reg[55] <= Delay_Pipeline_reg_next[55];
          Delay_Pipeline_reg[56] <= Delay_Pipeline_reg_next[56];
          Delay_Pipeline_reg[57] <= Delay_Pipeline_reg_next[57];
          Delay_Pipeline_reg[58] <= Delay_Pipeline_reg_next[58];
          Delay_Pipeline_reg[59] <= Delay_Pipeline_reg_next[59];
          Delay_Pipeline_reg[60] <= Delay_Pipeline_reg_next[60];
          Delay_Pipeline_reg[61] <= Delay_Pipeline_reg_next[61];
          Delay_Pipeline_reg[62] <= Delay_Pipeline_reg_next[62];
          Delay_Pipeline_reg[63] <= Delay_Pipeline_reg_next[63];
          Delay_Pipeline_reg[64] <= Delay_Pipeline_reg_next[64];
          Delay_Pipeline_reg[65] <= Delay_Pipeline_reg_next[65];
          Delay_Pipeline_reg[66] <= Delay_Pipeline_reg_next[66];
          Delay_Pipeline_reg[67] <= Delay_Pipeline_reg_next[67];
          Delay_Pipeline_reg[68] <= Delay_Pipeline_reg_next[68];
          Delay_Pipeline_reg[69] <= Delay_Pipeline_reg_next[69];
          Delay_Pipeline_reg[70] <= Delay_Pipeline_reg_next[70];
          Delay_Pipeline_reg[71] <= Delay_Pipeline_reg_next[71];
          Delay_Pipeline_reg[72] <= Delay_Pipeline_reg_next[72];
          Delay_Pipeline_reg[73] <= Delay_Pipeline_reg_next[73];
        end
      end
    end

  assign delay_pipeline_1[0] = Delay_Pipeline_reg[0];
  assign delay_pipeline_1[1] = Delay_Pipeline_reg[1];
  assign delay_pipeline_1[2] = Delay_Pipeline_reg[2];
  assign delay_pipeline_1[3] = Delay_Pipeline_reg[3];
  assign delay_pipeline_1[4] = Delay_Pipeline_reg[4];
  assign delay_pipeline_1[5] = Delay_Pipeline_reg[5];
  assign delay_pipeline_1[6] = Delay_Pipeline_reg[6];
  assign delay_pipeline_1[7] = Delay_Pipeline_reg[7];
  assign delay_pipeline_1[8] = Delay_Pipeline_reg[8];
  assign delay_pipeline_1[9] = Delay_Pipeline_reg[9];
  assign delay_pipeline_1[10] = Delay_Pipeline_reg[10];
  assign delay_pipeline_1[11] = Delay_Pipeline_reg[11];
  assign delay_pipeline_1[12] = Delay_Pipeline_reg[12];
  assign delay_pipeline_1[13] = Delay_Pipeline_reg[13];
  assign delay_pipeline_1[14] = Delay_Pipeline_reg[14];
  assign delay_pipeline_1[15] = Delay_Pipeline_reg[15];
  assign delay_pipeline_1[16] = Delay_Pipeline_reg[16];
  assign delay_pipeline_1[17] = Delay_Pipeline_reg[17];
  assign delay_pipeline_1[18] = Delay_Pipeline_reg[18];
  assign delay_pipeline_1[19] = Delay_Pipeline_reg[19];
  assign delay_pipeline_1[20] = Delay_Pipeline_reg[20];
  assign delay_pipeline_1[21] = Delay_Pipeline_reg[21];
  assign delay_pipeline_1[22] = Delay_Pipeline_reg[22];
  assign delay_pipeline_1[23] = Delay_Pipeline_reg[23];
  assign delay_pipeline_1[24] = Delay_Pipeline_reg[24];
  assign delay_pipeline_1[25] = Delay_Pipeline_reg[25];
  assign delay_pipeline_1[26] = Delay_Pipeline_reg[26];
  assign delay_pipeline_1[27] = Delay_Pipeline_reg[27];
  assign delay_pipeline_1[28] = Delay_Pipeline_reg[28];
  assign delay_pipeline_1[29] = Delay_Pipeline_reg[29];
  assign delay_pipeline_1[30] = Delay_Pipeline_reg[30];
  assign delay_pipeline_1[31] = Delay_Pipeline_reg[31];
  assign delay_pipeline_1[32] = Delay_Pipeline_reg[32];
  assign delay_pipeline_1[33] = Delay_Pipeline_reg[33];
  assign delay_pipeline_1[34] = Delay_Pipeline_reg[34];
  assign delay_pipeline_1[35] = Delay_Pipeline_reg[35];
  assign delay_pipeline_1[36] = Delay_Pipeline_reg[36];
  assign delay_pipeline_1[37] = Delay_Pipeline_reg[37];
  assign delay_pipeline_1[38] = Delay_Pipeline_reg[38];
  assign delay_pipeline_1[39] = Delay_Pipeline_reg[39];
  assign delay_pipeline_1[40] = Delay_Pipeline_reg[40];
  assign delay_pipeline_1[41] = Delay_Pipeline_reg[41];
  assign delay_pipeline_1[42] = Delay_Pipeline_reg[42];
  assign delay_pipeline_1[43] = Delay_Pipeline_reg[43];
  assign delay_pipeline_1[44] = Delay_Pipeline_reg[44];
  assign delay_pipeline_1[45] = Delay_Pipeline_reg[45];
  assign delay_pipeline_1[46] = Delay_Pipeline_reg[46];
  assign delay_pipeline_1[47] = Delay_Pipeline_reg[47];
  assign delay_pipeline_1[48] = Delay_Pipeline_reg[48];
  assign delay_pipeline_1[49] = Delay_Pipeline_reg[49];
  assign delay_pipeline_1[50] = Delay_Pipeline_reg[50];
  assign delay_pipeline_1[51] = Delay_Pipeline_reg[51];
  assign delay_pipeline_1[52] = Delay_Pipeline_reg[52];
  assign delay_pipeline_1[53] = Delay_Pipeline_reg[53];
  assign delay_pipeline_1[54] = Delay_Pipeline_reg[54];
  assign delay_pipeline_1[55] = Delay_Pipeline_reg[55];
  assign delay_pipeline_1[56] = Delay_Pipeline_reg[56];
  assign delay_pipeline_1[57] = Delay_Pipeline_reg[57];
  assign delay_pipeline_1[58] = Delay_Pipeline_reg[58];
  assign delay_pipeline_1[59] = Delay_Pipeline_reg[59];
  assign delay_pipeline_1[60] = Delay_Pipeline_reg[60];
  assign delay_pipeline_1[61] = Delay_Pipeline_reg[61];
  assign delay_pipeline_1[62] = Delay_Pipeline_reg[62];
  assign delay_pipeline_1[63] = Delay_Pipeline_reg[63];
  assign delay_pipeline_1[64] = Delay_Pipeline_reg[64];
  assign delay_pipeline_1[65] = Delay_Pipeline_reg[65];
  assign delay_pipeline_1[66] = Delay_Pipeline_reg[66];
  assign delay_pipeline_1[67] = Delay_Pipeline_reg[67];
  assign delay_pipeline_1[68] = Delay_Pipeline_reg[68];
  assign delay_pipeline_1[69] = Delay_Pipeline_reg[69];
  assign delay_pipeline_1[70] = Delay_Pipeline_reg[70];
  assign delay_pipeline_1[71] = Delay_Pipeline_reg[71];
  assign delay_pipeline_1[72] = Delay_Pipeline_reg[72];
  assign delay_pipeline_1[73] = Delay_Pipeline_reg[73];
  assign Delay_Pipeline_reg_next[0] = SyncCorr_in;
  assign Delay_Pipeline_reg_next[1] = Delay_Pipeline_reg[0];
  assign Delay_Pipeline_reg_next[2] = Delay_Pipeline_reg[1];
  assign Delay_Pipeline_reg_next[3] = Delay_Pipeline_reg[2];
  assign Delay_Pipeline_reg_next[4] = Delay_Pipeline_reg[3];
  assign Delay_Pipeline_reg_next[5] = Delay_Pipeline_reg[4];
  assign Delay_Pipeline_reg_next[6] = Delay_Pipeline_reg[5];
  assign Delay_Pipeline_reg_next[7] = Delay_Pipeline_reg[6];
  assign Delay_Pipeline_reg_next[8] = Delay_Pipeline_reg[7];
  assign Delay_Pipeline_reg_next[9] = Delay_Pipeline_reg[8];
  assign Delay_Pipeline_reg_next[10] = Delay_Pipeline_reg[9];
  assign Delay_Pipeline_reg_next[11] = Delay_Pipeline_reg[10];
  assign Delay_Pipeline_reg_next[12] = Delay_Pipeline_reg[11];
  assign Delay_Pipeline_reg_next[13] = Delay_Pipeline_reg[12];
  assign Delay_Pipeline_reg_next[14] = Delay_Pipeline_reg[13];
  assign Delay_Pipeline_reg_next[15] = Delay_Pipeline_reg[14];
  assign Delay_Pipeline_reg_next[16] = Delay_Pipeline_reg[15];
  assign Delay_Pipeline_reg_next[17] = Delay_Pipeline_reg[16];
  assign Delay_Pipeline_reg_next[18] = Delay_Pipeline_reg[17];
  assign Delay_Pipeline_reg_next[19] = Delay_Pipeline_reg[18];
  assign Delay_Pipeline_reg_next[20] = Delay_Pipeline_reg[19];
  assign Delay_Pipeline_reg_next[21] = Delay_Pipeline_reg[20];
  assign Delay_Pipeline_reg_next[22] = Delay_Pipeline_reg[21];
  assign Delay_Pipeline_reg_next[23] = Delay_Pipeline_reg[22];
  assign Delay_Pipeline_reg_next[24] = Delay_Pipeline_reg[23];
  assign Delay_Pipeline_reg_next[25] = Delay_Pipeline_reg[24];
  assign Delay_Pipeline_reg_next[26] = Delay_Pipeline_reg[25];
  assign Delay_Pipeline_reg_next[27] = Delay_Pipeline_reg[26];
  assign Delay_Pipeline_reg_next[28] = Delay_Pipeline_reg[27];
  assign Delay_Pipeline_reg_next[29] = Delay_Pipeline_reg[28];
  assign Delay_Pipeline_reg_next[30] = Delay_Pipeline_reg[29];
  assign Delay_Pipeline_reg_next[31] = Delay_Pipeline_reg[30];
  assign Delay_Pipeline_reg_next[32] = Delay_Pipeline_reg[31];
  assign Delay_Pipeline_reg_next[33] = Delay_Pipeline_reg[32];
  assign Delay_Pipeline_reg_next[34] = Delay_Pipeline_reg[33];
  assign Delay_Pipeline_reg_next[35] = Delay_Pipeline_reg[34];
  assign Delay_Pipeline_reg_next[36] = Delay_Pipeline_reg[35];
  assign Delay_Pipeline_reg_next[37] = Delay_Pipeline_reg[36];
  assign Delay_Pipeline_reg_next[38] = Delay_Pipeline_reg[37];
  assign Delay_Pipeline_reg_next[39] = Delay_Pipeline_reg[38];
  assign Delay_Pipeline_reg_next[40] = Delay_Pipeline_reg[39];
  assign Delay_Pipeline_reg_next[41] = Delay_Pipeline_reg[40];
  assign Delay_Pipeline_reg_next[42] = Delay_Pipeline_reg[41];
  assign Delay_Pipeline_reg_next[43] = Delay_Pipeline_reg[42];
  assign Delay_Pipeline_reg_next[44] = Delay_Pipeline_reg[43];
  assign Delay_Pipeline_reg_next[45] = Delay_Pipeline_reg[44];
  assign Delay_Pipeline_reg_next[46] = Delay_Pipeline_reg[45];
  assign Delay_Pipeline_reg_next[47] = Delay_Pipeline_reg[46];
  assign Delay_Pipeline_reg_next[48] = Delay_Pipeline_reg[47];
  assign Delay_Pipeline_reg_next[49] = Delay_Pipeline_reg[48];
  assign Delay_Pipeline_reg_next[50] = Delay_Pipeline_reg[49];
  assign Delay_Pipeline_reg_next[51] = Delay_Pipeline_reg[50];
  assign Delay_Pipeline_reg_next[52] = Delay_Pipeline_reg[51];
  assign Delay_Pipeline_reg_next[53] = Delay_Pipeline_reg[52];
  assign Delay_Pipeline_reg_next[54] = Delay_Pipeline_reg[53];
  assign Delay_Pipeline_reg_next[55] = Delay_Pipeline_reg[54];
  assign Delay_Pipeline_reg_next[56] = Delay_Pipeline_reg[55];
  assign Delay_Pipeline_reg_next[57] = Delay_Pipeline_reg[56];
  assign Delay_Pipeline_reg_next[58] = Delay_Pipeline_reg[57];
  assign Delay_Pipeline_reg_next[59] = Delay_Pipeline_reg[58];
  assign Delay_Pipeline_reg_next[60] = Delay_Pipeline_reg[59];
  assign Delay_Pipeline_reg_next[61] = Delay_Pipeline_reg[60];
  assign Delay_Pipeline_reg_next[62] = Delay_Pipeline_reg[61];
  assign Delay_Pipeline_reg_next[63] = Delay_Pipeline_reg[62];
  assign Delay_Pipeline_reg_next[64] = Delay_Pipeline_reg[63];
  assign Delay_Pipeline_reg_next[65] = Delay_Pipeline_reg[64];
  assign Delay_Pipeline_reg_next[66] = Delay_Pipeline_reg[65];
  assign Delay_Pipeline_reg_next[67] = Delay_Pipeline_reg[66];
  assign Delay_Pipeline_reg_next[68] = Delay_Pipeline_reg[67];
  assign Delay_Pipeline_reg_next[69] = Delay_Pipeline_reg[68];
  assign Delay_Pipeline_reg_next[70] = Delay_Pipeline_reg[69];
  assign Delay_Pipeline_reg_next[71] = Delay_Pipeline_reg[70];
  assign Delay_Pipeline_reg_next[72] = Delay_Pipeline_reg[71];
  assign Delay_Pipeline_reg_next[73] = Delay_Pipeline_reg[72];



  assign delay_pipeline_73 = delay_pipeline_1[73];

  // coeff75
  assign product75 = {delay_pipeline_73[15], {delay_pipeline_73, 14'b00000000000000}};



  assign delay_pipeline_72 = delay_pipeline_1[72];

  // coeff74
  assign product74 = {delay_pipeline_72[15], {delay_pipeline_72, 14'b00000000000000}};



  always @(posedge clk or posedge reset)
    begin : product75_out_pipe_process
      if (reset == 1'b1) begin
        product75_out_pipe_1 <= 31'sb0000000000000000000000000000000;
      end
      else begin
        if (enb) begin
          product75_out_pipe_1 <= product75;
        end
      end
    end



  assign sum1_1_cast1 = {{6{product75_out_pipe_1[30]}}, product75_out_pipe_1};



  always @(posedge clk or posedge reset)
    begin : product74_out_pipe_process
      if (reset == 1'b1) begin
        product74_out_pipe_1 <= 31'sb0000000000000000000000000000000;
      end
      else begin
        if (enb) begin
          product74_out_pipe_1 <= product74;
        end
      end
    end



  assign sum1_1_cast2 = {{6{product74_out_pipe_1[30]}}, product74_out_pipe_1};



  assign adder_add_cast = {sum1_1_cast1[36], sum1_1_cast1};
  assign adder_add_cast_1 = {sum1_1_cast2[36], sum1_1_cast2};
  assign sum1_1_temp = adder_add_cast + adder_add_cast_1;



  assign sum1_1 = sum1_1_temp[36:0];



  always @(posedge clk or posedge reset)
    begin : dtc_out_buff_out_pipe_process
      if (reset == 1'b1) begin
        sum1_1_1 <= 37'sh0000000000;
      end
      else begin
        if (enb) begin
          sum1_1_1 <= sum1_1;
        end
      end
    end



  assign delay_pipeline_71 = delay_pipeline_1[71];

  // coeff73
  assign product73 = {delay_pipeline_71[15], {delay_pipeline_71, 14'b00000000000000}};



  assign delay_pipeline_70 = delay_pipeline_1[70];

  // coeff72
  assign product72 = {delay_pipeline_70[15], {delay_pipeline_70, 14'b00000000000000}};



  always @(posedge clk or posedge reset)
    begin : product73_out_pipe_process
      if (reset == 1'b1) begin
        product73_out_pipe_1 <= 31'sb0000000000000000000000000000000;
      end
      else begin
        if (enb) begin
          product73_out_pipe_1 <= product73;
        end
      end
    end



  assign sum1_2_cast1 = {{6{product73_out_pipe_1[30]}}, product73_out_pipe_1};



  always @(posedge clk or posedge reset)
    begin : product72_out_pipe_process
      if (reset == 1'b1) begin
        product72_out_pipe_1 <= 31'sb0000000000000000000000000000000;
      end
      else begin
        if (enb) begin
          product72_out_pipe_1 <= product72;
        end
      end
    end



  assign sum1_2_cast2 = {{6{product72_out_pipe_1[30]}}, product72_out_pipe_1};



  assign adder_add_cast_2 = {sum1_2_cast1[36], sum1_2_cast1};
  assign adder_add_cast_3 = {sum1_2_cast2[36], sum1_2_cast2};
  assign sum1_2_temp = adder_add_cast_2 + adder_add_cast_3;



  assign sum1_2 = sum1_2_temp[36:0];



  always @(posedge clk or posedge reset)
    begin : dtc_out_buff_out_pipe_1_process
      if (reset == 1'b1) begin
        sum1_2_1 <= 37'sh0000000000;
      end
      else begin
        if (enb) begin
          sum1_2_1 <= sum1_2;
        end
      end
    end



  assign adder_add_cast_4 = {sum1_1_1[36], sum1_1_1};
  assign adder_add_cast_5 = {sum1_2_1[36], sum1_2_1};
  assign sum2_1_temp = adder_add_cast_4 + adder_add_cast_5;



  assign sum2_1 = sum2_1_temp[36:0];



  always @(posedge clk or posedge reset)
    begin : dtc_out_buff_out_pipe_2_process
      if (reset == 1'b1) begin
        sum2_1_1 <= 37'sh0000000000;
      end
      else begin
        if (enb) begin
          sum2_1_1 <= sum2_1;
        end
      end
    end



  assign delay_pipeline_69 = delay_pipeline_1[69];

  // coeff71
  assign product71 = {delay_pipeline_69[15], {delay_pipeline_69, 14'b00000000000000}};



  assign delay_pipeline_68 = delay_pipeline_1[68];

  // coeff70
  assign product70 = {delay_pipeline_68[15], {delay_pipeline_68, 14'b00000000000000}};



  always @(posedge clk or posedge reset)
    begin : product71_out_pipe_process
      if (reset == 1'b1) begin
        product71_out_pipe_1 <= 31'sb0000000000000000000000000000000;
      end
      else begin
        if (enb) begin
          product71_out_pipe_1 <= product71;
        end
      end
    end



  assign sum1_3_cast1 = {{6{product71_out_pipe_1[30]}}, product71_out_pipe_1};



  always @(posedge clk or posedge reset)
    begin : product70_out_pipe_process
      if (reset == 1'b1) begin
        product70_out_pipe_1 <= 31'sb0000000000000000000000000000000;
      end
      else begin
        if (enb) begin
          product70_out_pipe_1 <= product70;
        end
      end
    end



  assign sum1_3_cast2 = {{6{product70_out_pipe_1[30]}}, product70_out_pipe_1};



  assign adder_add_cast_6 = {sum1_3_cast1[36], sum1_3_cast1};
  assign adder_add_cast_7 = {sum1_3_cast2[36], sum1_3_cast2};
  assign sum1_3_temp = adder_add_cast_6 + adder_add_cast_7;



  assign sum1_3 = sum1_3_temp[36:0];



  always @(posedge clk or posedge reset)
    begin : dtc_out_buff_out_pipe_3_process
      if (reset == 1'b1) begin
        sum1_3_1 <= 37'sh0000000000;
      end
      else begin
        if (enb) begin
          sum1_3_1 <= sum1_3;
        end
      end
    end



  assign delay_pipeline_67 = delay_pipeline_1[67];

  // coeff69
  assign gain_cast = {delay_pipeline_67[15], delay_pipeline_67};
  assign gain_cast_1 =  - (gain_cast);
  assign gain_cast_2 = {gain_cast_1[16], {gain_cast_1, 14'b00000000000000}};
  assign product69 = gain_cast_2[30:0];



  assign delay_pipeline_66 = delay_pipeline_1[66];

  // coeff68
  assign gain_cast_3 = {delay_pipeline_66[15], delay_pipeline_66};
  assign gain_cast_4 =  - (gain_cast_3);
  assign gain_cast_5 = {gain_cast_4[16], {gain_cast_4, 14'b00000000000000}};
  assign product68 = gain_cast_5[30:0];



  always @(posedge clk or posedge reset)
    begin : product69_out_pipe_process
      if (reset == 1'b1) begin
        product69_out_pipe_1 <= 31'sb0000000000000000000000000000000;
      end
      else begin
        if (enb) begin
          product69_out_pipe_1 <= product69;
        end
      end
    end



  assign sum1_4_cast1 = {{6{product69_out_pipe_1[30]}}, product69_out_pipe_1};



  always @(posedge clk or posedge reset)
    begin : product68_out_pipe_process
      if (reset == 1'b1) begin
        product68_out_pipe_1 <= 31'sb0000000000000000000000000000000;
      end
      else begin
        if (enb) begin
          product68_out_pipe_1 <= product68;
        end
      end
    end



  assign sum1_4_cast2 = {{6{product68_out_pipe_1[30]}}, product68_out_pipe_1};



  assign adder_add_cast_8 = {sum1_4_cast1[36], sum1_4_cast1};
  assign adder_add_cast_9 = {sum1_4_cast2[36], sum1_4_cast2};
  assign sum1_4_temp = adder_add_cast_8 + adder_add_cast_9;



  assign sum1_4 = sum1_4_temp[36:0];



  always @(posedge clk or posedge reset)
    begin : dtc_out_buff_out_pipe_4_process
      if (reset == 1'b1) begin
        sum1_4_1 <= 37'sh0000000000;
      end
      else begin
        if (enb) begin
          sum1_4_1 <= sum1_4;
        end
      end
    end



  assign adder_add_cast_10 = {sum1_3_1[36], sum1_3_1};
  assign adder_add_cast_11 = {sum1_4_1[36], sum1_4_1};
  assign sum2_2_temp = adder_add_cast_10 + adder_add_cast_11;



  assign sum2_2 = sum2_2_temp[36:0];



  always @(posedge clk or posedge reset)
    begin : dtc_out_buff_out_pipe_5_process
      if (reset == 1'b1) begin
        sum2_2_1 <= 37'sh0000000000;
      end
      else begin
        if (enb) begin
          sum2_2_1 <= sum2_2;
        end
      end
    end



  assign adder_add_cast_12 = {sum2_1_1[36], sum2_1_1};
  assign adder_add_cast_13 = {sum2_2_1[36], sum2_2_1};
  assign sum3_1_temp = adder_add_cast_12 + adder_add_cast_13;



  assign sum3_1 = sum3_1_temp[36:0];



  always @(posedge clk or posedge reset)
    begin : dtc_out_buff_out_pipe_6_process
      if (reset == 1'b1) begin
        sum3_1_1 <= 37'sh0000000000;
      end
      else begin
        if (enb) begin
          sum3_1_1 <= sum3_1;
        end
      end
    end



  assign delay_pipeline_65 = delay_pipeline_1[65];

  // coeff67
  assign gain_cast_6 = {delay_pipeline_65[15], delay_pipeline_65};
  assign gain_cast_7 =  - (gain_cast_6);
  assign gain_cast_8 = {gain_cast_7[16], {gain_cast_7, 14'b00000000000000}};
  assign product67 = gain_cast_8[30:0];



  assign delay_pipeline_64 = delay_pipeline_1[64];

  // coeff66
  assign gain_cast_9 = {delay_pipeline_64[15], delay_pipeline_64};
  assign gain_cast_10 =  - (gain_cast_9);
  assign gain_cast_11 = {gain_cast_10[16], {gain_cast_10, 14'b00000000000000}};
  assign product66 = gain_cast_11[30:0];



  always @(posedge clk or posedge reset)
    begin : product67_out_pipe_process
      if (reset == 1'b1) begin
        product67_out_pipe_1 <= 31'sb0000000000000000000000000000000;
      end
      else begin
        if (enb) begin
          product67_out_pipe_1 <= product67;
        end
      end
    end



  assign sum1_5_cast1 = {{6{product67_out_pipe_1[30]}}, product67_out_pipe_1};



  always @(posedge clk or posedge reset)
    begin : product66_out_pipe_process
      if (reset == 1'b1) begin
        product66_out_pipe_1 <= 31'sb0000000000000000000000000000000;
      end
      else begin
        if (enb) begin
          product66_out_pipe_1 <= product66;
        end
      end
    end



  assign sum1_5_cast2 = {{6{product66_out_pipe_1[30]}}, product66_out_pipe_1};



  assign adder_add_cast_14 = {sum1_5_cast1[36], sum1_5_cast1};
  assign adder_add_cast_15 = {sum1_5_cast2[36], sum1_5_cast2};
  assign sum1_5_temp = adder_add_cast_14 + adder_add_cast_15;



  assign sum1_5 = sum1_5_temp[36:0];



  always @(posedge clk or posedge reset)
    begin : dtc_out_buff_out_pipe_7_process
      if (reset == 1'b1) begin
        sum1_5_1 <= 37'sh0000000000;
      end
      else begin
        if (enb) begin
          sum1_5_1 <= sum1_5;
        end
      end
    end



  assign delay_pipeline_63 = delay_pipeline_1[63];

  // coeff65
  assign gain_cast_12 = {delay_pipeline_63[15], delay_pipeline_63};
  assign gain_cast_13 =  - (gain_cast_12);
  assign gain_cast_14 = {gain_cast_13[16], {gain_cast_13, 14'b00000000000000}};
  assign product65 = gain_cast_14[30:0];



  assign delay_pipeline_62 = delay_pipeline_1[62];

  // coeff64
  assign gain_cast_15 = {delay_pipeline_62[15], delay_pipeline_62};
  assign gain_cast_16 =  - (gain_cast_15);
  assign gain_cast_17 = {gain_cast_16[16], {gain_cast_16, 14'b00000000000000}};
  assign product64 = gain_cast_17[30:0];



  always @(posedge clk or posedge reset)
    begin : product65_out_pipe_process
      if (reset == 1'b1) begin
        product65_out_pipe_1 <= 31'sb0000000000000000000000000000000;
      end
      else begin
        if (enb) begin
          product65_out_pipe_1 <= product65;
        end
      end
    end



  assign sum1_6_cast1 = {{6{product65_out_pipe_1[30]}}, product65_out_pipe_1};



  always @(posedge clk or posedge reset)
    begin : product64_out_pipe_process
      if (reset == 1'b1) begin
        product64_out_pipe_1 <= 31'sb0000000000000000000000000000000;
      end
      else begin
        if (enb) begin
          product64_out_pipe_1 <= product64;
        end
      end
    end



  assign sum1_6_cast2 = {{6{product64_out_pipe_1[30]}}, product64_out_pipe_1};



  assign adder_add_cast_16 = {sum1_6_cast1[36], sum1_6_cast1};
  assign adder_add_cast_17 = {sum1_6_cast2[36], sum1_6_cast2};
  assign sum1_6_temp = adder_add_cast_16 + adder_add_cast_17;



  assign sum1_6 = sum1_6_temp[36:0];



  always @(posedge clk or posedge reset)
    begin : dtc_out_buff_out_pipe_8_process
      if (reset == 1'b1) begin
        sum1_6_1 <= 37'sh0000000000;
      end
      else begin
        if (enb) begin
          sum1_6_1 <= sum1_6;
        end
      end
    end



  assign adder_add_cast_18 = {sum1_5_1[36], sum1_5_1};
  assign adder_add_cast_19 = {sum1_6_1[36], sum1_6_1};
  assign sum2_3_temp = adder_add_cast_18 + adder_add_cast_19;



  assign sum2_3 = sum2_3_temp[36:0];



  always @(posedge clk or posedge reset)
    begin : dtc_out_buff_out_pipe_9_process
      if (reset == 1'b1) begin
        sum2_3_1 <= 37'sh0000000000;
      end
      else begin
        if (enb) begin
          sum2_3_1 <= sum2_3;
        end
      end
    end



  assign delay_pipeline_61 = delay_pipeline_1[61];

  // coeff63
  assign product63 = {delay_pipeline_61[15], {delay_pipeline_61, 14'b00000000000000}};



  assign delay_pipeline_60 = delay_pipeline_1[60];

  // coeff62
  assign product62 = {delay_pipeline_60[15], {delay_pipeline_60, 14'b00000000000000}};



  always @(posedge clk or posedge reset)
    begin : product63_out_pipe_process
      if (reset == 1'b1) begin
        product63_out_pipe_1 <= 31'sb0000000000000000000000000000000;
      end
      else begin
        if (enb) begin
          product63_out_pipe_1 <= product63;
        end
      end
    end



  assign sum1_7_cast1 = {{6{product63_out_pipe_1[30]}}, product63_out_pipe_1};



  always @(posedge clk or posedge reset)
    begin : product62_out_pipe_process
      if (reset == 1'b1) begin
        product62_out_pipe_1 <= 31'sb0000000000000000000000000000000;
      end
      else begin
        if (enb) begin
          product62_out_pipe_1 <= product62;
        end
      end
    end



  assign sum1_7_cast2 = {{6{product62_out_pipe_1[30]}}, product62_out_pipe_1};



  assign adder_add_cast_20 = {sum1_7_cast1[36], sum1_7_cast1};
  assign adder_add_cast_21 = {sum1_7_cast2[36], sum1_7_cast2};
  assign sum1_7_temp = adder_add_cast_20 + adder_add_cast_21;



  assign sum1_7 = sum1_7_temp[36:0];



  always @(posedge clk or posedge reset)
    begin : dtc_out_buff_out_pipe_10_process
      if (reset == 1'b1) begin
        sum1_7_1 <= 37'sh0000000000;
      end
      else begin
        if (enb) begin
          sum1_7_1 <= sum1_7;
        end
      end
    end



  assign delay_pipeline_59 = delay_pipeline_1[59];

  // coeff61
  assign product61 = {delay_pipeline_59[15], {delay_pipeline_59, 14'b00000000000000}};



  assign delay_pipeline_58 = delay_pipeline_1[58];

  // coeff60
  assign product60 = {delay_pipeline_58[15], {delay_pipeline_58, 14'b00000000000000}};



  always @(posedge clk or posedge reset)
    begin : product61_out_pipe_process
      if (reset == 1'b1) begin
        product61_out_pipe_1 <= 31'sb0000000000000000000000000000000;
      end
      else begin
        if (enb) begin
          product61_out_pipe_1 <= product61;
        end
      end
    end



  assign sum1_8_cast1 = {{6{product61_out_pipe_1[30]}}, product61_out_pipe_1};



  always @(posedge clk or posedge reset)
    begin : product60_out_pipe_process
      if (reset == 1'b1) begin
        product60_out_pipe_1 <= 31'sb0000000000000000000000000000000;
      end
      else begin
        if (enb) begin
          product60_out_pipe_1 <= product60;
        end
      end
    end



  assign sum1_8_cast2 = {{6{product60_out_pipe_1[30]}}, product60_out_pipe_1};



  assign adder_add_cast_22 = {sum1_8_cast1[36], sum1_8_cast1};
  assign adder_add_cast_23 = {sum1_8_cast2[36], sum1_8_cast2};
  assign sum1_8_temp = adder_add_cast_22 + adder_add_cast_23;



  assign sum1_8 = sum1_8_temp[36:0];



  always @(posedge clk or posedge reset)
    begin : dtc_out_buff_out_pipe_11_process
      if (reset == 1'b1) begin
        sum1_8_1 <= 37'sh0000000000;
      end
      else begin
        if (enb) begin
          sum1_8_1 <= sum1_8;
        end
      end
    end



  assign adder_add_cast_24 = {sum1_7_1[36], sum1_7_1};
  assign adder_add_cast_25 = {sum1_8_1[36], sum1_8_1};
  assign sum2_4_temp = adder_add_cast_24 + adder_add_cast_25;



  assign sum2_4 = sum2_4_temp[36:0];



  always @(posedge clk or posedge reset)
    begin : dtc_out_buff_out_pipe_12_process
      if (reset == 1'b1) begin
        sum2_4_1 <= 37'sh0000000000;
      end
      else begin
        if (enb) begin
          sum2_4_1 <= sum2_4;
        end
      end
    end



  assign adder_add_cast_26 = {sum2_3_1[36], sum2_3_1};
  assign adder_add_cast_27 = {sum2_4_1[36], sum2_4_1};
  assign sum3_2_temp = adder_add_cast_26 + adder_add_cast_27;



  assign sum3_2 = sum3_2_temp[36:0];



  always @(posedge clk or posedge reset)
    begin : dtc_out_buff_out_pipe_13_process
      if (reset == 1'b1) begin
        sum3_2_1 <= 37'sh0000000000;
      end
      else begin
        if (enb) begin
          sum3_2_1 <= sum3_2;
        end
      end
    end



  assign adder_add_cast_28 = {sum3_1_1[36], sum3_1_1};
  assign adder_add_cast_29 = {sum3_2_1[36], sum3_2_1};
  assign sum4_1_temp = adder_add_cast_28 + adder_add_cast_29;



  assign sum4_1 = sum4_1_temp[36:0];



  always @(posedge clk or posedge reset)
    begin : dtc_out_buff_out_pipe_14_process
      if (reset == 1'b1) begin
        sum4_1_1 <= 37'sh0000000000;
      end
      else begin
        if (enb) begin
          sum4_1_1 <= sum4_1;
        end
      end
    end



  assign delay_pipeline_57 = delay_pipeline_1[57];

  // coeff59
  assign product59 = {delay_pipeline_57[15], {delay_pipeline_57, 14'b00000000000000}};



  assign delay_pipeline_56 = delay_pipeline_1[56];

  // coeff58
  assign product58 = {delay_pipeline_56[15], {delay_pipeline_56, 14'b00000000000000}};



  always @(posedge clk or posedge reset)
    begin : product59_out_pipe_process
      if (reset == 1'b1) begin
        product59_out_pipe_1 <= 31'sb0000000000000000000000000000000;
      end
      else begin
        if (enb) begin
          product59_out_pipe_1 <= product59;
        end
      end
    end



  assign sum1_9_cast1 = {{6{product59_out_pipe_1[30]}}, product59_out_pipe_1};



  always @(posedge clk or posedge reset)
    begin : product58_out_pipe_process
      if (reset == 1'b1) begin
        product58_out_pipe_1 <= 31'sb0000000000000000000000000000000;
      end
      else begin
        if (enb) begin
          product58_out_pipe_1 <= product58;
        end
      end
    end



  assign sum1_9_cast2 = {{6{product58_out_pipe_1[30]}}, product58_out_pipe_1};



  assign adder_add_cast_30 = {sum1_9_cast1[36], sum1_9_cast1};
  assign adder_add_cast_31 = {sum1_9_cast2[36], sum1_9_cast2};
  assign sum1_9_temp = adder_add_cast_30 + adder_add_cast_31;



  assign sum1_9 = sum1_9_temp[36:0];



  always @(posedge clk or posedge reset)
    begin : dtc_out_buff_out_pipe_15_process
      if (reset == 1'b1) begin
        sum1_9_1 <= 37'sh0000000000;
      end
      else begin
        if (enb) begin
          sum1_9_1 <= sum1_9;
        end
      end
    end



  assign delay_pipeline_55 = delay_pipeline_1[55];

  // coeff57
  assign gain_cast_18 = {delay_pipeline_55[15], delay_pipeline_55};
  assign gain_cast_19 =  - (gain_cast_18);
  assign gain_cast_20 = {gain_cast_19[16], {gain_cast_19, 14'b00000000000000}};
  assign product57 = gain_cast_20[30:0];



  assign delay_pipeline_54 = delay_pipeline_1[54];

  // coeff56
  assign gain_cast_21 = {delay_pipeline_54[15], delay_pipeline_54};
  assign gain_cast_22 =  - (gain_cast_21);
  assign gain_cast_23 = {gain_cast_22[16], {gain_cast_22, 14'b00000000000000}};
  assign product56 = gain_cast_23[30:0];



  always @(posedge clk or posedge reset)
    begin : product57_out_pipe_process
      if (reset == 1'b1) begin
        product57_out_pipe_1 <= 31'sb0000000000000000000000000000000;
      end
      else begin
        if (enb) begin
          product57_out_pipe_1 <= product57;
        end
      end
    end



  assign sum1_10_cast1 = {{6{product57_out_pipe_1[30]}}, product57_out_pipe_1};



  always @(posedge clk or posedge reset)
    begin : product56_out_pipe_process
      if (reset == 1'b1) begin
        product56_out_pipe_1 <= 31'sb0000000000000000000000000000000;
      end
      else begin
        if (enb) begin
          product56_out_pipe_1 <= product56;
        end
      end
    end



  assign sum1_10_cast2 = {{6{product56_out_pipe_1[30]}}, product56_out_pipe_1};



  assign adder_add_cast_32 = {sum1_10_cast1[36], sum1_10_cast1};
  assign adder_add_cast_33 = {sum1_10_cast2[36], sum1_10_cast2};
  assign sum1_10_temp = adder_add_cast_32 + adder_add_cast_33;



  assign sum1_10 = sum1_10_temp[36:0];



  always @(posedge clk or posedge reset)
    begin : dtc_out_buff_out_pipe_16_process
      if (reset == 1'b1) begin
        sum1_10_1 <= 37'sh0000000000;
      end
      else begin
        if (enb) begin
          sum1_10_1 <= sum1_10;
        end
      end
    end



  assign adder_add_cast_34 = {sum1_9_1[36], sum1_9_1};
  assign adder_add_cast_35 = {sum1_10_1[36], sum1_10_1};
  assign sum2_5_temp = adder_add_cast_34 + adder_add_cast_35;



  assign sum2_5 = sum2_5_temp[36:0];



  always @(posedge clk or posedge reset)
    begin : dtc_out_buff_out_pipe_17_process
      if (reset == 1'b1) begin
        sum2_5_1 <= 37'sh0000000000;
      end
      else begin
        if (enb) begin
          sum2_5_1 <= sum2_5;
        end
      end
    end



  assign delay_pipeline_53 = delay_pipeline_1[53];

  // coeff55
  assign gain_cast_24 = {delay_pipeline_53[15], delay_pipeline_53};
  assign gain_cast_25 =  - (gain_cast_24);
  assign gain_cast_26 = {gain_cast_25[16], {gain_cast_25, 14'b00000000000000}};
  assign product55 = gain_cast_26[30:0];



  assign delay_pipeline_52 = delay_pipeline_1[52];

  // coeff54
  assign gain_cast_27 = {delay_pipeline_52[15], delay_pipeline_52};
  assign gain_cast_28 =  - (gain_cast_27);
  assign gain_cast_29 = {gain_cast_28[16], {gain_cast_28, 14'b00000000000000}};
  assign product54 = gain_cast_29[30:0];



  always @(posedge clk or posedge reset)
    begin : product55_out_pipe_process
      if (reset == 1'b1) begin
        product55_out_pipe_1 <= 31'sb0000000000000000000000000000000;
      end
      else begin
        if (enb) begin
          product55_out_pipe_1 <= product55;
        end
      end
    end



  assign sum1_11_cast1 = {{6{product55_out_pipe_1[30]}}, product55_out_pipe_1};



  always @(posedge clk or posedge reset)
    begin : product54_out_pipe_process
      if (reset == 1'b1) begin
        product54_out_pipe_1 <= 31'sb0000000000000000000000000000000;
      end
      else begin
        if (enb) begin
          product54_out_pipe_1 <= product54;
        end
      end
    end



  assign sum1_11_cast2 = {{6{product54_out_pipe_1[30]}}, product54_out_pipe_1};



  assign adder_add_cast_36 = {sum1_11_cast1[36], sum1_11_cast1};
  assign adder_add_cast_37 = {sum1_11_cast2[36], sum1_11_cast2};
  assign sum1_11_temp = adder_add_cast_36 + adder_add_cast_37;



  assign sum1_11 = sum1_11_temp[36:0];



  always @(posedge clk or posedge reset)
    begin : dtc_out_buff_out_pipe_18_process
      if (reset == 1'b1) begin
        sum1_11_1 <= 37'sh0000000000;
      end
      else begin
        if (enb) begin
          sum1_11_1 <= sum1_11;
        end
      end
    end



  assign delay_pipeline_51 = delay_pipeline_1[51];

  // coeff53
  assign gain_cast_30 = {delay_pipeline_51[15], delay_pipeline_51};
  assign gain_cast_31 =  - (gain_cast_30);
  assign gain_cast_32 = {gain_cast_31[16], {gain_cast_31, 14'b00000000000000}};
  assign product53 = gain_cast_32[30:0];



  assign delay_pipeline_50 = delay_pipeline_1[50];

  // coeff52
  assign gain_cast_33 = {delay_pipeline_50[15], delay_pipeline_50};
  assign gain_cast_34 =  - (gain_cast_33);
  assign gain_cast_35 = {gain_cast_34[16], {gain_cast_34, 14'b00000000000000}};
  assign product52 = gain_cast_35[30:0];



  always @(posedge clk or posedge reset)
    begin : product53_out_pipe_process
      if (reset == 1'b1) begin
        product53_out_pipe_1 <= 31'sb0000000000000000000000000000000;
      end
      else begin
        if (enb) begin
          product53_out_pipe_1 <= product53;
        end
      end
    end



  assign sum1_12_cast1 = {{6{product53_out_pipe_1[30]}}, product53_out_pipe_1};



  always @(posedge clk or posedge reset)
    begin : product52_out_pipe_process
      if (reset == 1'b1) begin
        product52_out_pipe_1 <= 31'sb0000000000000000000000000000000;
      end
      else begin
        if (enb) begin
          product52_out_pipe_1 <= product52;
        end
      end
    end



  assign sum1_12_cast2 = {{6{product52_out_pipe_1[30]}}, product52_out_pipe_1};



  assign adder_add_cast_38 = {sum1_12_cast1[36], sum1_12_cast1};
  assign adder_add_cast_39 = {sum1_12_cast2[36], sum1_12_cast2};
  assign sum1_12_temp = adder_add_cast_38 + adder_add_cast_39;



  assign sum1_12 = sum1_12_temp[36:0];



  always @(posedge clk or posedge reset)
    begin : dtc_out_buff_out_pipe_19_process
      if (reset == 1'b1) begin
        sum1_12_1 <= 37'sh0000000000;
      end
      else begin
        if (enb) begin
          sum1_12_1 <= sum1_12;
        end
      end
    end



  assign adder_add_cast_40 = {sum1_11_1[36], sum1_11_1};
  assign adder_add_cast_41 = {sum1_12_1[36], sum1_12_1};
  assign sum2_6_temp = adder_add_cast_40 + adder_add_cast_41;



  assign sum2_6 = sum2_6_temp[36:0];



  always @(posedge clk or posedge reset)
    begin : dtc_out_buff_out_pipe_20_process
      if (reset == 1'b1) begin
        sum2_6_1 <= 37'sh0000000000;
      end
      else begin
        if (enb) begin
          sum2_6_1 <= sum2_6;
        end
      end
    end



  assign adder_add_cast_42 = {sum2_5_1[36], sum2_5_1};
  assign adder_add_cast_43 = {sum2_6_1[36], sum2_6_1};
  assign sum3_3_temp = adder_add_cast_42 + adder_add_cast_43;



  assign sum3_3 = sum3_3_temp[36:0];



  always @(posedge clk or posedge reset)
    begin : dtc_out_buff_out_pipe_21_process
      if (reset == 1'b1) begin
        sum3_3_1 <= 37'sh0000000000;
      end
      else begin
        if (enb) begin
          sum3_3_1 <= sum3_3;
        end
      end
    end



  assign delay_pipeline_49 = delay_pipeline_1[49];

  // coeff51
  assign gain_cast_36 = {delay_pipeline_49[15], delay_pipeline_49};
  assign gain_cast_37 =  - (gain_cast_36);
  assign gain_cast_38 = {gain_cast_37[16], {gain_cast_37, 14'b00000000000000}};
  assign product51 = gain_cast_38[30:0];



  assign delay_pipeline_48 = delay_pipeline_1[48];

  // coeff50
  assign gain_cast_39 = {delay_pipeline_48[15], delay_pipeline_48};
  assign gain_cast_40 =  - (gain_cast_39);
  assign gain_cast_41 = {gain_cast_40[16], {gain_cast_40, 14'b00000000000000}};
  assign product50 = gain_cast_41[30:0];



  always @(posedge clk or posedge reset)
    begin : product51_out_pipe_process
      if (reset == 1'b1) begin
        product51_out_pipe_1 <= 31'sb0000000000000000000000000000000;
      end
      else begin
        if (enb) begin
          product51_out_pipe_1 <= product51;
        end
      end
    end



  assign sum1_13_cast1 = {{6{product51_out_pipe_1[30]}}, product51_out_pipe_1};



  always @(posedge clk or posedge reset)
    begin : product50_out_pipe_process
      if (reset == 1'b1) begin
        product50_out_pipe_1 <= 31'sb0000000000000000000000000000000;
      end
      else begin
        if (enb) begin
          product50_out_pipe_1 <= product50;
        end
      end
    end



  assign sum1_13_cast2 = {{6{product50_out_pipe_1[30]}}, product50_out_pipe_1};



  assign adder_add_cast_44 = {sum1_13_cast1[36], sum1_13_cast1};
  assign adder_add_cast_45 = {sum1_13_cast2[36], sum1_13_cast2};
  assign sum1_13_temp = adder_add_cast_44 + adder_add_cast_45;



  assign sum1_13 = sum1_13_temp[36:0];



  always @(posedge clk or posedge reset)
    begin : dtc_out_buff_out_pipe_22_process
      if (reset == 1'b1) begin
        sum1_13_1 <= 37'sh0000000000;
      end
      else begin
        if (enb) begin
          sum1_13_1 <= sum1_13;
        end
      end
    end



  assign delay_pipeline_47 = delay_pipeline_1[47];

  // coeff49
  assign gain_cast_42 = {delay_pipeline_47[15], delay_pipeline_47};
  assign gain_cast_43 =  - (gain_cast_42);
  assign gain_cast_44 = {gain_cast_43[16], {gain_cast_43, 14'b00000000000000}};
  assign product49 = gain_cast_44[30:0];



  assign delay_pipeline_46 = delay_pipeline_1[46];

  // coeff48
  assign gain_cast_45 = {delay_pipeline_46[15], delay_pipeline_46};
  assign gain_cast_46 =  - (gain_cast_45);
  assign gain_cast_47 = {gain_cast_46[16], {gain_cast_46, 14'b00000000000000}};
  assign product48 = gain_cast_47[30:0];



  always @(posedge clk or posedge reset)
    begin : product49_out_pipe_process
      if (reset == 1'b1) begin
        product49_out_pipe_1 <= 31'sb0000000000000000000000000000000;
      end
      else begin
        if (enb) begin
          product49_out_pipe_1 <= product49;
        end
      end
    end



  assign sum1_14_cast1 = {{6{product49_out_pipe_1[30]}}, product49_out_pipe_1};



  always @(posedge clk or posedge reset)
    begin : product48_out_pipe_process
      if (reset == 1'b1) begin
        product48_out_pipe_1 <= 31'sb0000000000000000000000000000000;
      end
      else begin
        if (enb) begin
          product48_out_pipe_1 <= product48;
        end
      end
    end



  assign sum1_14_cast2 = {{6{product48_out_pipe_1[30]}}, product48_out_pipe_1};



  assign adder_add_cast_46 = {sum1_14_cast1[36], sum1_14_cast1};
  assign adder_add_cast_47 = {sum1_14_cast2[36], sum1_14_cast2};
  assign sum1_14_temp = adder_add_cast_46 + adder_add_cast_47;



  assign sum1_14 = sum1_14_temp[36:0];



  always @(posedge clk or posedge reset)
    begin : dtc_out_buff_out_pipe_23_process
      if (reset == 1'b1) begin
        sum1_14_1 <= 37'sh0000000000;
      end
      else begin
        if (enb) begin
          sum1_14_1 <= sum1_14;
        end
      end
    end



  assign adder_add_cast_48 = {sum1_13_1[36], sum1_13_1};
  assign adder_add_cast_49 = {sum1_14_1[36], sum1_14_1};
  assign sum2_7_temp = adder_add_cast_48 + adder_add_cast_49;



  assign sum2_7 = sum2_7_temp[36:0];



  always @(posedge clk or posedge reset)
    begin : dtc_out_buff_out_pipe_24_process
      if (reset == 1'b1) begin
        sum2_7_1 <= 37'sh0000000000;
      end
      else begin
        if (enb) begin
          sum2_7_1 <= sum2_7;
        end
      end
    end



  assign delay_pipeline_45 = delay_pipeline_1[45];

  // coeff47
  assign gain_cast_48 = {delay_pipeline_45[15], delay_pipeline_45};
  assign gain_cast_49 =  - (gain_cast_48);
  assign gain_cast_50 = {gain_cast_49[16], {gain_cast_49, 14'b00000000000000}};
  assign product47 = gain_cast_50[30:0];



  assign delay_pipeline_44 = delay_pipeline_1[44];

  // coeff46
  assign gain_cast_51 = {delay_pipeline_44[15], delay_pipeline_44};
  assign gain_cast_52 =  - (gain_cast_51);
  assign gain_cast_53 = {gain_cast_52[16], {gain_cast_52, 14'b00000000000000}};
  assign product46 = gain_cast_53[30:0];



  always @(posedge clk or posedge reset)
    begin : product47_out_pipe_process
      if (reset == 1'b1) begin
        product47_out_pipe_1 <= 31'sb0000000000000000000000000000000;
      end
      else begin
        if (enb) begin
          product47_out_pipe_1 <= product47;
        end
      end
    end



  assign sum1_15_cast1 = {{6{product47_out_pipe_1[30]}}, product47_out_pipe_1};



  always @(posedge clk or posedge reset)
    begin : product46_out_pipe_process
      if (reset == 1'b1) begin
        product46_out_pipe_1 <= 31'sb0000000000000000000000000000000;
      end
      else begin
        if (enb) begin
          product46_out_pipe_1 <= product46;
        end
      end
    end



  assign sum1_15_cast2 = {{6{product46_out_pipe_1[30]}}, product46_out_pipe_1};



  assign adder_add_cast_50 = {sum1_15_cast1[36], sum1_15_cast1};
  assign adder_add_cast_51 = {sum1_15_cast2[36], sum1_15_cast2};
  assign sum1_15_temp = adder_add_cast_50 + adder_add_cast_51;



  assign sum1_15 = sum1_15_temp[36:0];



  always @(posedge clk or posedge reset)
    begin : dtc_out_buff_out_pipe_25_process
      if (reset == 1'b1) begin
        sum1_15_1 <= 37'sh0000000000;
      end
      else begin
        if (enb) begin
          sum1_15_1 <= sum1_15;
        end
      end
    end



  assign delay_pipeline_43 = delay_pipeline_1[43];

  // coeff45
  assign gain_cast_54 = {delay_pipeline_43[15], delay_pipeline_43};
  assign gain_cast_55 =  - (gain_cast_54);
  assign gain_cast_56 = {gain_cast_55[16], {gain_cast_55, 14'b00000000000000}};
  assign product45 = gain_cast_56[30:0];



  assign delay_pipeline_42 = delay_pipeline_1[42];

  // coeff44
  assign gain_cast_57 = {delay_pipeline_42[15], delay_pipeline_42};
  assign gain_cast_58 =  - (gain_cast_57);
  assign gain_cast_59 = {gain_cast_58[16], {gain_cast_58, 14'b00000000000000}};
  assign product44 = gain_cast_59[30:0];



  always @(posedge clk or posedge reset)
    begin : product45_out_pipe_process
      if (reset == 1'b1) begin
        product45_out_pipe_1 <= 31'sb0000000000000000000000000000000;
      end
      else begin
        if (enb) begin
          product45_out_pipe_1 <= product45;
        end
      end
    end



  assign sum1_16_cast1 = {{6{product45_out_pipe_1[30]}}, product45_out_pipe_1};



  always @(posedge clk or posedge reset)
    begin : product44_out_pipe_process
      if (reset == 1'b1) begin
        product44_out_pipe_1 <= 31'sb0000000000000000000000000000000;
      end
      else begin
        if (enb) begin
          product44_out_pipe_1 <= product44;
        end
      end
    end



  assign sum1_16_cast2 = {{6{product44_out_pipe_1[30]}}, product44_out_pipe_1};



  assign adder_add_cast_52 = {sum1_16_cast1[36], sum1_16_cast1};
  assign adder_add_cast_53 = {sum1_16_cast2[36], sum1_16_cast2};
  assign sum1_16_temp = adder_add_cast_52 + adder_add_cast_53;



  assign sum1_16 = sum1_16_temp[36:0];



  always @(posedge clk or posedge reset)
    begin : dtc_out_buff_out_pipe_26_process
      if (reset == 1'b1) begin
        sum1_16_1 <= 37'sh0000000000;
      end
      else begin
        if (enb) begin
          sum1_16_1 <= sum1_16;
        end
      end
    end



  assign adder_add_cast_54 = {sum1_15_1[36], sum1_15_1};
  assign adder_add_cast_55 = {sum1_16_1[36], sum1_16_1};
  assign sum2_8_temp = adder_add_cast_54 + adder_add_cast_55;



  assign sum2_8 = sum2_8_temp[36:0];



  always @(posedge clk or posedge reset)
    begin : dtc_out_buff_out_pipe_27_process
      if (reset == 1'b1) begin
        sum2_8_1 <= 37'sh0000000000;
      end
      else begin
        if (enb) begin
          sum2_8_1 <= sum2_8;
        end
      end
    end



  assign adder_add_cast_56 = {sum2_7_1[36], sum2_7_1};
  assign adder_add_cast_57 = {sum2_8_1[36], sum2_8_1};
  assign sum3_4_temp = adder_add_cast_56 + adder_add_cast_57;



  assign sum3_4 = sum3_4_temp[36:0];



  always @(posedge clk or posedge reset)
    begin : dtc_out_buff_out_pipe_28_process
      if (reset == 1'b1) begin
        sum3_4_1 <= 37'sh0000000000;
      end
      else begin
        if (enb) begin
          sum3_4_1 <= sum3_4;
        end
      end
    end



  assign adder_add_cast_58 = {sum3_3_1[36], sum3_3_1};
  assign adder_add_cast_59 = {sum3_4_1[36], sum3_4_1};
  assign sum4_2_temp = adder_add_cast_58 + adder_add_cast_59;



  assign sum4_2 = sum4_2_temp[36:0];



  always @(posedge clk or posedge reset)
    begin : dtc_out_buff_out_pipe_29_process
      if (reset == 1'b1) begin
        sum4_2_1 <= 37'sh0000000000;
      end
      else begin
        if (enb) begin
          sum4_2_1 <= sum4_2;
        end
      end
    end



  assign adder_add_cast_60 = {sum4_1_1[36], sum4_1_1};
  assign adder_add_cast_61 = {sum4_2_1[36], sum4_2_1};
  assign sum5_1_temp = adder_add_cast_60 + adder_add_cast_61;



  assign sum5_1 = sum5_1_temp[36:0];



  always @(posedge clk or posedge reset)
    begin : dtc_out_buff_out_pipe_30_process
      if (reset == 1'b1) begin
        sum5_1_1 <= 37'sh0000000000;
      end
      else begin
        if (enb) begin
          sum5_1_1 <= sum5_1;
        end
      end
    end



  assign delay_pipeline_41 = delay_pipeline_1[41];

  // coeff43
  assign gain_cast_60 = {delay_pipeline_41[15], delay_pipeline_41};
  assign gain_cast_61 =  - (gain_cast_60);
  assign gain_cast_62 = {gain_cast_61[16], {gain_cast_61, 14'b00000000000000}};
  assign product43 = gain_cast_62[30:0];



  assign delay_pipeline_40 = delay_pipeline_1[40];

  // coeff42
  assign gain_cast_63 = {delay_pipeline_40[15], delay_pipeline_40};
  assign gain_cast_64 =  - (gain_cast_63);
  assign gain_cast_65 = {gain_cast_64[16], {gain_cast_64, 14'b00000000000000}};
  assign product42 = gain_cast_65[30:0];



  always @(posedge clk or posedge reset)
    begin : product43_out_pipe_process
      if (reset == 1'b1) begin
        product43_out_pipe_1 <= 31'sb0000000000000000000000000000000;
      end
      else begin
        if (enb) begin
          product43_out_pipe_1 <= product43;
        end
      end
    end



  assign sum1_17_cast1 = {{6{product43_out_pipe_1[30]}}, product43_out_pipe_1};



  always @(posedge clk or posedge reset)
    begin : product42_out_pipe_process
      if (reset == 1'b1) begin
        product42_out_pipe_1 <= 31'sb0000000000000000000000000000000;
      end
      else begin
        if (enb) begin
          product42_out_pipe_1 <= product42;
        end
      end
    end



  assign sum1_17_cast2 = {{6{product42_out_pipe_1[30]}}, product42_out_pipe_1};



  assign adder_add_cast_62 = {sum1_17_cast1[36], sum1_17_cast1};
  assign adder_add_cast_63 = {sum1_17_cast2[36], sum1_17_cast2};
  assign sum1_17_temp = adder_add_cast_62 + adder_add_cast_63;



  assign sum1_17 = sum1_17_temp[36:0];



  always @(posedge clk or posedge reset)
    begin : dtc_out_buff_out_pipe_31_process
      if (reset == 1'b1) begin
        sum1_17_1 <= 37'sh0000000000;
      end
      else begin
        if (enb) begin
          sum1_17_1 <= sum1_17;
        end
      end
    end



  assign delay_pipeline_39 = delay_pipeline_1[39];

  // coeff41
  assign gain_cast_66 = {delay_pipeline_39[15], delay_pipeline_39};
  assign gain_cast_67 =  - (gain_cast_66);
  assign gain_cast_68 = {gain_cast_67[16], {gain_cast_67, 14'b00000000000000}};
  assign product41 = gain_cast_68[30:0];



  assign delay_pipeline_38 = delay_pipeline_1[38];

  // coeff40
  assign gain_cast_69 = {delay_pipeline_38[15], delay_pipeline_38};
  assign gain_cast_70 =  - (gain_cast_69);
  assign gain_cast_71 = {gain_cast_70[16], {gain_cast_70, 14'b00000000000000}};
  assign product40 = gain_cast_71[30:0];



  always @(posedge clk or posedge reset)
    begin : product41_out_pipe_process
      if (reset == 1'b1) begin
        product41_out_pipe_1 <= 31'sb0000000000000000000000000000000;
      end
      else begin
        if (enb) begin
          product41_out_pipe_1 <= product41;
        end
      end
    end



  assign sum1_18_cast1 = {{6{product41_out_pipe_1[30]}}, product41_out_pipe_1};



  always @(posedge clk or posedge reset)
    begin : product40_out_pipe_process
      if (reset == 1'b1) begin
        product40_out_pipe_1 <= 31'sb0000000000000000000000000000000;
      end
      else begin
        if (enb) begin
          product40_out_pipe_1 <= product40;
        end
      end
    end



  assign sum1_18_cast2 = {{6{product40_out_pipe_1[30]}}, product40_out_pipe_1};



  assign adder_add_cast_64 = {sum1_18_cast1[36], sum1_18_cast1};
  assign adder_add_cast_65 = {sum1_18_cast2[36], sum1_18_cast2};
  assign sum1_18_temp = adder_add_cast_64 + adder_add_cast_65;



  assign sum1_18 = sum1_18_temp[36:0];



  always @(posedge clk or posedge reset)
    begin : dtc_out_buff_out_pipe_32_process
      if (reset == 1'b1) begin
        sum1_18_1 <= 37'sh0000000000;
      end
      else begin
        if (enb) begin
          sum1_18_1 <= sum1_18;
        end
      end
    end



  assign adder_add_cast_66 = {sum1_17_1[36], sum1_17_1};
  assign adder_add_cast_67 = {sum1_18_1[36], sum1_18_1};
  assign sum2_9_temp = adder_add_cast_66 + adder_add_cast_67;



  assign sum2_9 = sum2_9_temp[36:0];



  always @(posedge clk or posedge reset)
    begin : dtc_out_buff_out_pipe_33_process
      if (reset == 1'b1) begin
        sum2_9_1 <= 37'sh0000000000;
      end
      else begin
        if (enb) begin
          sum2_9_1 <= sum2_9;
        end
      end
    end



  assign delay_pipeline_37 = delay_pipeline_1[37];

  // coeff39
  assign gain_cast_72 = {delay_pipeline_37[15], delay_pipeline_37};
  assign gain_cast_73 =  - (gain_cast_72);
  assign gain_cast_74 = {gain_cast_73[16], {gain_cast_73, 14'b00000000000000}};
  assign product39 = gain_cast_74[30:0];



  assign delay_pipeline_36 = delay_pipeline_1[36];

  // coeff38
  assign gain_cast_75 = {delay_pipeline_36[15], delay_pipeline_36};
  assign gain_cast_76 =  - (gain_cast_75);
  assign gain_cast_77 = {gain_cast_76[16], {gain_cast_76, 14'b00000000000000}};
  assign product38 = gain_cast_77[30:0];



  always @(posedge clk or posedge reset)
    begin : product39_out_pipe_process
      if (reset == 1'b1) begin
        product39_out_pipe_1 <= 31'sb0000000000000000000000000000000;
      end
      else begin
        if (enb) begin
          product39_out_pipe_1 <= product39;
        end
      end
    end



  assign sum1_19_cast1 = {{6{product39_out_pipe_1[30]}}, product39_out_pipe_1};



  always @(posedge clk or posedge reset)
    begin : product38_out_pipe_process
      if (reset == 1'b1) begin
        product38_out_pipe_1 <= 31'sb0000000000000000000000000000000;
      end
      else begin
        if (enb) begin
          product38_out_pipe_1 <= product38;
        end
      end
    end



  assign sum1_19_cast2 = {{6{product38_out_pipe_1[30]}}, product38_out_pipe_1};



  assign adder_add_cast_68 = {sum1_19_cast1[36], sum1_19_cast1};
  assign adder_add_cast_69 = {sum1_19_cast2[36], sum1_19_cast2};
  assign sum1_19_temp = adder_add_cast_68 + adder_add_cast_69;



  assign sum1_19 = sum1_19_temp[36:0];



  always @(posedge clk or posedge reset)
    begin : dtc_out_buff_out_pipe_34_process
      if (reset == 1'b1) begin
        sum1_19_1 <= 37'sh0000000000;
      end
      else begin
        if (enb) begin
          sum1_19_1 <= sum1_19;
        end
      end
    end



  assign delay_pipeline_35 = delay_pipeline_1[35];

  // coeff37
  assign gain_cast_78 = {delay_pipeline_35[15], delay_pipeline_35};
  assign gain_cast_79 =  - (gain_cast_78);
  assign gain_cast_80 = {gain_cast_79[16], {gain_cast_79, 14'b00000000000000}};
  assign product37 = gain_cast_80[30:0];



  assign delay_pipeline_34 = delay_pipeline_1[34];

  // coeff36
  assign gain_cast_81 = {delay_pipeline_34[15], delay_pipeline_34};
  assign gain_cast_82 =  - (gain_cast_81);
  assign gain_cast_83 = {gain_cast_82[16], {gain_cast_82, 14'b00000000000000}};
  assign product36 = gain_cast_83[30:0];



  always @(posedge clk or posedge reset)
    begin : product37_out_pipe_process
      if (reset == 1'b1) begin
        product37_out_pipe_1 <= 31'sb0000000000000000000000000000000;
      end
      else begin
        if (enb) begin
          product37_out_pipe_1 <= product37;
        end
      end
    end



  assign sum1_20_cast1 = {{6{product37_out_pipe_1[30]}}, product37_out_pipe_1};



  always @(posedge clk or posedge reset)
    begin : product36_out_pipe_process
      if (reset == 1'b1) begin
        product36_out_pipe_1 <= 31'sb0000000000000000000000000000000;
      end
      else begin
        if (enb) begin
          product36_out_pipe_1 <= product36;
        end
      end
    end



  assign sum1_20_cast2 = {{6{product36_out_pipe_1[30]}}, product36_out_pipe_1};



  assign adder_add_cast_70 = {sum1_20_cast1[36], sum1_20_cast1};
  assign adder_add_cast_71 = {sum1_20_cast2[36], sum1_20_cast2};
  assign sum1_20_temp = adder_add_cast_70 + adder_add_cast_71;



  assign sum1_20 = sum1_20_temp[36:0];



  always @(posedge clk or posedge reset)
    begin : dtc_out_buff_out_pipe_35_process
      if (reset == 1'b1) begin
        sum1_20_1 <= 37'sh0000000000;
      end
      else begin
        if (enb) begin
          sum1_20_1 <= sum1_20;
        end
      end
    end



  assign adder_add_cast_72 = {sum1_19_1[36], sum1_19_1};
  assign adder_add_cast_73 = {sum1_20_1[36], sum1_20_1};
  assign sum2_10_temp = adder_add_cast_72 + adder_add_cast_73;



  assign sum2_10 = sum2_10_temp[36:0];



  always @(posedge clk or posedge reset)
    begin : dtc_out_buff_out_pipe_36_process
      if (reset == 1'b1) begin
        sum2_10_1 <= 37'sh0000000000;
      end
      else begin
        if (enb) begin
          sum2_10_1 <= sum2_10;
        end
      end
    end



  assign adder_add_cast_74 = {sum2_9_1[36], sum2_9_1};
  assign adder_add_cast_75 = {sum2_10_1[36], sum2_10_1};
  assign sum3_5_temp = adder_add_cast_74 + adder_add_cast_75;



  assign sum3_5 = sum3_5_temp[36:0];



  always @(posedge clk or posedge reset)
    begin : dtc_out_buff_out_pipe_37_process
      if (reset == 1'b1) begin
        sum3_5_1 <= 37'sh0000000000;
      end
      else begin
        if (enb) begin
          sum3_5_1 <= sum3_5;
        end
      end
    end



  assign delay_pipeline_33 = delay_pipeline_1[33];

  // coeff35
  assign gain_cast_84 = {delay_pipeline_33[15], delay_pipeline_33};
  assign gain_cast_85 =  - (gain_cast_84);
  assign gain_cast_86 = {gain_cast_85[16], {gain_cast_85, 14'b00000000000000}};
  assign product35 = gain_cast_86[30:0];



  assign delay_pipeline_32 = delay_pipeline_1[32];

  // coeff34
  assign gain_cast_87 = {delay_pipeline_32[15], delay_pipeline_32};
  assign gain_cast_88 =  - (gain_cast_87);
  assign gain_cast_89 = {gain_cast_88[16], {gain_cast_88, 14'b00000000000000}};
  assign product34 = gain_cast_89[30:0];



  always @(posedge clk or posedge reset)
    begin : product35_out_pipe_process
      if (reset == 1'b1) begin
        product35_out_pipe_1 <= 31'sb0000000000000000000000000000000;
      end
      else begin
        if (enb) begin
          product35_out_pipe_1 <= product35;
        end
      end
    end



  assign sum1_21_cast1 = {{6{product35_out_pipe_1[30]}}, product35_out_pipe_1};



  always @(posedge clk or posedge reset)
    begin : product34_out_pipe_process
      if (reset == 1'b1) begin
        product34_out_pipe_1 <= 31'sb0000000000000000000000000000000;
      end
      else begin
        if (enb) begin
          product34_out_pipe_1 <= product34;
        end
      end
    end



  assign sum1_21_cast2 = {{6{product34_out_pipe_1[30]}}, product34_out_pipe_1};



  assign adder_add_cast_76 = {sum1_21_cast1[36], sum1_21_cast1};
  assign adder_add_cast_77 = {sum1_21_cast2[36], sum1_21_cast2};
  assign sum1_21_temp = adder_add_cast_76 + adder_add_cast_77;



  assign sum1_21 = sum1_21_temp[36:0];



  always @(posedge clk or posedge reset)
    begin : dtc_out_buff_out_pipe_38_process
      if (reset == 1'b1) begin
        sum1_21_1 <= 37'sh0000000000;
      end
      else begin
        if (enb) begin
          sum1_21_1 <= sum1_21;
        end
      end
    end



  assign delay_pipeline_31 = delay_pipeline_1[31];

  // coeff33
  assign gain_cast_90 = {delay_pipeline_31[15], delay_pipeline_31};
  assign gain_cast_91 =  - (gain_cast_90);
  assign gain_cast_92 = {gain_cast_91[16], {gain_cast_91, 14'b00000000000000}};
  assign product33 = gain_cast_92[30:0];



  assign delay_pipeline_30 = delay_pipeline_1[30];

  // coeff32
  assign product32 = {delay_pipeline_30[15], {delay_pipeline_30, 14'b00000000000000}};



  always @(posedge clk or posedge reset)
    begin : product33_out_pipe_process
      if (reset == 1'b1) begin
        product33_out_pipe_1 <= 31'sb0000000000000000000000000000000;
      end
      else begin
        if (enb) begin
          product33_out_pipe_1 <= product33;
        end
      end
    end



  assign sum1_22_cast1 = {{6{product33_out_pipe_1[30]}}, product33_out_pipe_1};



  always @(posedge clk or posedge reset)
    begin : product32_out_pipe_process
      if (reset == 1'b1) begin
        product32_out_pipe_1 <= 31'sb0000000000000000000000000000000;
      end
      else begin
        if (enb) begin
          product32_out_pipe_1 <= product32;
        end
      end
    end



  assign sum1_22_cast2 = {{6{product32_out_pipe_1[30]}}, product32_out_pipe_1};



  assign adder_add_cast_78 = {sum1_22_cast1[36], sum1_22_cast1};
  assign adder_add_cast_79 = {sum1_22_cast2[36], sum1_22_cast2};
  assign sum1_22_temp = adder_add_cast_78 + adder_add_cast_79;



  assign sum1_22 = sum1_22_temp[36:0];



  always @(posedge clk or posedge reset)
    begin : dtc_out_buff_out_pipe_39_process
      if (reset == 1'b1) begin
        sum1_22_1 <= 37'sh0000000000;
      end
      else begin
        if (enb) begin
          sum1_22_1 <= sum1_22;
        end
      end
    end



  assign adder_add_cast_80 = {sum1_21_1[36], sum1_21_1};
  assign adder_add_cast_81 = {sum1_22_1[36], sum1_22_1};
  assign sum2_11_temp = adder_add_cast_80 + adder_add_cast_81;



  assign sum2_11 = sum2_11_temp[36:0];



  always @(posedge clk or posedge reset)
    begin : dtc_out_buff_out_pipe_40_process
      if (reset == 1'b1) begin
        sum2_11_1 <= 37'sh0000000000;
      end
      else begin
        if (enb) begin
          sum2_11_1 <= sum2_11;
        end
      end
    end



  assign delay_pipeline_29 = delay_pipeline_1[29];

  // coeff31
  assign product31 = {delay_pipeline_29[15], {delay_pipeline_29, 14'b00000000000000}};



  assign delay_pipeline_28 = delay_pipeline_1[28];

  // coeff30
  assign product30 = {delay_pipeline_28[15], {delay_pipeline_28, 14'b00000000000000}};



  always @(posedge clk or posedge reset)
    begin : product31_out_pipe_process
      if (reset == 1'b1) begin
        product31_out_pipe_1 <= 31'sb0000000000000000000000000000000;
      end
      else begin
        if (enb) begin
          product31_out_pipe_1 <= product31;
        end
      end
    end



  assign sum1_23_cast1 = {{6{product31_out_pipe_1[30]}}, product31_out_pipe_1};



  always @(posedge clk or posedge reset)
    begin : product30_out_pipe_process
      if (reset == 1'b1) begin
        product30_out_pipe_1 <= 31'sb0000000000000000000000000000000;
      end
      else begin
        if (enb) begin
          product30_out_pipe_1 <= product30;
        end
      end
    end



  assign sum1_23_cast2 = {{6{product30_out_pipe_1[30]}}, product30_out_pipe_1};



  assign adder_add_cast_82 = {sum1_23_cast1[36], sum1_23_cast1};
  assign adder_add_cast_83 = {sum1_23_cast2[36], sum1_23_cast2};
  assign sum1_23_temp = adder_add_cast_82 + adder_add_cast_83;



  assign sum1_23 = sum1_23_temp[36:0];



  always @(posedge clk or posedge reset)
    begin : dtc_out_buff_out_pipe_41_process
      if (reset == 1'b1) begin
        sum1_23_1 <= 37'sh0000000000;
      end
      else begin
        if (enb) begin
          sum1_23_1 <= sum1_23;
        end
      end
    end



  assign delay_pipeline_27 = delay_pipeline_1[27];

  // coeff29
  assign product29 = {delay_pipeline_27[15], {delay_pipeline_27, 14'b00000000000000}};



  assign delay_pipeline_26 = delay_pipeline_1[26];

  // coeff28
  assign product28 = {delay_pipeline_26[15], {delay_pipeline_26, 14'b00000000000000}};



  always @(posedge clk or posedge reset)
    begin : product29_out_pipe_process
      if (reset == 1'b1) begin
        product29_out_pipe_1 <= 31'sb0000000000000000000000000000000;
      end
      else begin
        if (enb) begin
          product29_out_pipe_1 <= product29;
        end
      end
    end



  assign sum1_24_cast1 = {{6{product29_out_pipe_1[30]}}, product29_out_pipe_1};



  always @(posedge clk or posedge reset)
    begin : product28_out_pipe_process
      if (reset == 1'b1) begin
        product28_out_pipe_1 <= 31'sb0000000000000000000000000000000;
      end
      else begin
        if (enb) begin
          product28_out_pipe_1 <= product28;
        end
      end
    end



  assign sum1_24_cast2 = {{6{product28_out_pipe_1[30]}}, product28_out_pipe_1};



  assign adder_add_cast_84 = {sum1_24_cast1[36], sum1_24_cast1};
  assign adder_add_cast_85 = {sum1_24_cast2[36], sum1_24_cast2};
  assign sum1_24_temp = adder_add_cast_84 + adder_add_cast_85;



  assign sum1_24 = sum1_24_temp[36:0];



  always @(posedge clk or posedge reset)
    begin : dtc_out_buff_out_pipe_42_process
      if (reset == 1'b1) begin
        sum1_24_1 <= 37'sh0000000000;
      end
      else begin
        if (enb) begin
          sum1_24_1 <= sum1_24;
        end
      end
    end



  assign adder_add_cast_86 = {sum1_23_1[36], sum1_23_1};
  assign adder_add_cast_87 = {sum1_24_1[36], sum1_24_1};
  assign sum2_12_temp = adder_add_cast_86 + adder_add_cast_87;



  assign sum2_12 = sum2_12_temp[36:0];



  always @(posedge clk or posedge reset)
    begin : dtc_out_buff_out_pipe_43_process
      if (reset == 1'b1) begin
        sum2_12_1 <= 37'sh0000000000;
      end
      else begin
        if (enb) begin
          sum2_12_1 <= sum2_12;
        end
      end
    end



  assign adder_add_cast_88 = {sum2_11_1[36], sum2_11_1};
  assign adder_add_cast_89 = {sum2_12_1[36], sum2_12_1};
  assign sum3_6_temp = adder_add_cast_88 + adder_add_cast_89;



  assign sum3_6 = sum3_6_temp[36:0];



  always @(posedge clk or posedge reset)
    begin : dtc_out_buff_out_pipe_44_process
      if (reset == 1'b1) begin
        sum3_6_1 <= 37'sh0000000000;
      end
      else begin
        if (enb) begin
          sum3_6_1 <= sum3_6;
        end
      end
    end



  assign adder_add_cast_90 = {sum3_5_1[36], sum3_5_1};
  assign adder_add_cast_91 = {sum3_6_1[36], sum3_6_1};
  assign sum4_3_temp = adder_add_cast_90 + adder_add_cast_91;



  assign sum4_3 = sum4_3_temp[36:0];



  always @(posedge clk or posedge reset)
    begin : dtc_out_buff_out_pipe_45_process
      if (reset == 1'b1) begin
        sum4_3_1 <= 37'sh0000000000;
      end
      else begin
        if (enb) begin
          sum4_3_1 <= sum4_3;
        end
      end
    end



  assign delay_pipeline_25 = delay_pipeline_1[25];

  // coeff27
  assign product27 = {delay_pipeline_25[15], {delay_pipeline_25, 14'b00000000000000}};



  assign delay_pipeline_24 = delay_pipeline_1[24];

  // coeff26
  assign product26 = {delay_pipeline_24[15], {delay_pipeline_24, 14'b00000000000000}};



  always @(posedge clk or posedge reset)
    begin : product27_out_pipe_process
      if (reset == 1'b1) begin
        product27_out_pipe_1 <= 31'sb0000000000000000000000000000000;
      end
      else begin
        if (enb) begin
          product27_out_pipe_1 <= product27;
        end
      end
    end



  assign sum1_25_cast1 = {{6{product27_out_pipe_1[30]}}, product27_out_pipe_1};



  always @(posedge clk or posedge reset)
    begin : product26_out_pipe_process
      if (reset == 1'b1) begin
        product26_out_pipe_1 <= 31'sb0000000000000000000000000000000;
      end
      else begin
        if (enb) begin
          product26_out_pipe_1 <= product26;
        end
      end
    end



  assign sum1_25_cast2 = {{6{product26_out_pipe_1[30]}}, product26_out_pipe_1};



  assign adder_add_cast_92 = {sum1_25_cast1[36], sum1_25_cast1};
  assign adder_add_cast_93 = {sum1_25_cast2[36], sum1_25_cast2};
  assign sum1_25_temp = adder_add_cast_92 + adder_add_cast_93;



  assign sum1_25 = sum1_25_temp[36:0];



  always @(posedge clk or posedge reset)
    begin : dtc_out_buff_out_pipe_46_process
      if (reset == 1'b1) begin
        sum1_25_1 <= 37'sh0000000000;
      end
      else begin
        if (enb) begin
          sum1_25_1 <= sum1_25;
        end
      end
    end



  assign delay_pipeline_23 = delay_pipeline_1[23];

  // coeff25
  assign gain_cast_93 = {delay_pipeline_23[15], delay_pipeline_23};
  assign gain_cast_94 =  - (gain_cast_93);
  assign gain_cast_95 = {gain_cast_94[16], {gain_cast_94, 14'b00000000000000}};
  assign product25 = gain_cast_95[30:0];



  assign delay_pipeline_22 = delay_pipeline_1[22];

  // coeff24
  assign gain_cast_96 = {delay_pipeline_22[15], delay_pipeline_22};
  assign gain_cast_97 =  - (gain_cast_96);
  assign gain_cast_98 = {gain_cast_97[16], {gain_cast_97, 14'b00000000000000}};
  assign product24 = gain_cast_98[30:0];



  always @(posedge clk or posedge reset)
    begin : product25_out_pipe_process
      if (reset == 1'b1) begin
        product25_out_pipe_1 <= 31'sb0000000000000000000000000000000;
      end
      else begin
        if (enb) begin
          product25_out_pipe_1 <= product25;
        end
      end
    end



  assign sum1_26_cast1 = {{6{product25_out_pipe_1[30]}}, product25_out_pipe_1};



  always @(posedge clk or posedge reset)
    begin : product24_out_pipe_process
      if (reset == 1'b1) begin
        product24_out_pipe_1 <= 31'sb0000000000000000000000000000000;
      end
      else begin
        if (enb) begin
          product24_out_pipe_1 <= product24;
        end
      end
    end



  assign sum1_26_cast2 = {{6{product24_out_pipe_1[30]}}, product24_out_pipe_1};



  assign adder_add_cast_94 = {sum1_26_cast1[36], sum1_26_cast1};
  assign adder_add_cast_95 = {sum1_26_cast2[36], sum1_26_cast2};
  assign sum1_26_temp = adder_add_cast_94 + adder_add_cast_95;



  assign sum1_26 = sum1_26_temp[36:0];



  always @(posedge clk or posedge reset)
    begin : dtc_out_buff_out_pipe_47_process
      if (reset == 1'b1) begin
        sum1_26_1 <= 37'sh0000000000;
      end
      else begin
        if (enb) begin
          sum1_26_1 <= sum1_26;
        end
      end
    end



  assign adder_add_cast_96 = {sum1_25_1[36], sum1_25_1};
  assign adder_add_cast_97 = {sum1_26_1[36], sum1_26_1};
  assign sum2_13_temp = adder_add_cast_96 + adder_add_cast_97;



  assign sum2_13 = sum2_13_temp[36:0];



  always @(posedge clk or posedge reset)
    begin : dtc_out_buff_out_pipe_48_process
      if (reset == 1'b1) begin
        sum2_13_1 <= 37'sh0000000000;
      end
      else begin
        if (enb) begin
          sum2_13_1 <= sum2_13;
        end
      end
    end



  assign delay_pipeline_21 = delay_pipeline_1[21];

  // coeff23
  assign gain_cast_99 = {delay_pipeline_21[15], delay_pipeline_21};
  assign gain_cast_100 =  - (gain_cast_99);
  assign gain_cast_101 = {gain_cast_100[16], {gain_cast_100, 14'b00000000000000}};
  assign product23 = gain_cast_101[30:0];



  assign delay_pipeline_20 = delay_pipeline_1[20];

  // coeff22
  assign gain_cast_102 = {delay_pipeline_20[15], delay_pipeline_20};
  assign gain_cast_103 =  - (gain_cast_102);
  assign gain_cast_104 = {gain_cast_103[16], {gain_cast_103, 14'b00000000000000}};
  assign product22 = gain_cast_104[30:0];



  always @(posedge clk or posedge reset)
    begin : product23_out_pipe_process
      if (reset == 1'b1) begin
        product23_out_pipe_1 <= 31'sb0000000000000000000000000000000;
      end
      else begin
        if (enb) begin
          product23_out_pipe_1 <= product23;
        end
      end
    end



  assign sum1_27_cast1 = {{6{product23_out_pipe_1[30]}}, product23_out_pipe_1};



  always @(posedge clk or posedge reset)
    begin : product22_out_pipe_process
      if (reset == 1'b1) begin
        product22_out_pipe_1 <= 31'sb0000000000000000000000000000000;
      end
      else begin
        if (enb) begin
          product22_out_pipe_1 <= product22;
        end
      end
    end



  assign sum1_27_cast2 = {{6{product22_out_pipe_1[30]}}, product22_out_pipe_1};



  assign adder_add_cast_98 = {sum1_27_cast1[36], sum1_27_cast1};
  assign adder_add_cast_99 = {sum1_27_cast2[36], sum1_27_cast2};
  assign sum1_27_temp = adder_add_cast_98 + adder_add_cast_99;



  assign sum1_27 = sum1_27_temp[36:0];



  always @(posedge clk or posedge reset)
    begin : dtc_out_buff_out_pipe_49_process
      if (reset == 1'b1) begin
        sum1_27_1 <= 37'sh0000000000;
      end
      else begin
        if (enb) begin
          sum1_27_1 <= sum1_27;
        end
      end
    end



  assign delay_pipeline_19 = delay_pipeline_1[19];

  // coeff21
  assign gain_cast_105 = {delay_pipeline_19[15], delay_pipeline_19};
  assign gain_cast_106 =  - (gain_cast_105);
  assign gain_cast_107 = {gain_cast_106[16], {gain_cast_106, 14'b00000000000000}};
  assign product21 = gain_cast_107[30:0];



  assign delay_pipeline_18 = delay_pipeline_1[18];

  // coeff20
  assign gain_cast_108 = {delay_pipeline_18[15], delay_pipeline_18};
  assign gain_cast_109 =  - (gain_cast_108);
  assign gain_cast_110 = {gain_cast_109[16], {gain_cast_109, 14'b00000000000000}};
  assign product20 = gain_cast_110[30:0];



  always @(posedge clk or posedge reset)
    begin : product21_out_pipe_process
      if (reset == 1'b1) begin
        product21_out_pipe_1 <= 31'sb0000000000000000000000000000000;
      end
      else begin
        if (enb) begin
          product21_out_pipe_1 <= product21;
        end
      end
    end



  assign sum1_28_cast1 = {{6{product21_out_pipe_1[30]}}, product21_out_pipe_1};



  always @(posedge clk or posedge reset)
    begin : product20_out_pipe_process
      if (reset == 1'b1) begin
        product20_out_pipe_1 <= 31'sb0000000000000000000000000000000;
      end
      else begin
        if (enb) begin
          product20_out_pipe_1 <= product20;
        end
      end
    end



  assign sum1_28_cast2 = {{6{product20_out_pipe_1[30]}}, product20_out_pipe_1};



  assign adder_add_cast_100 = {sum1_28_cast1[36], sum1_28_cast1};
  assign adder_add_cast_101 = {sum1_28_cast2[36], sum1_28_cast2};
  assign sum1_28_temp = adder_add_cast_100 + adder_add_cast_101;



  assign sum1_28 = sum1_28_temp[36:0];



  always @(posedge clk or posedge reset)
    begin : dtc_out_buff_out_pipe_50_process
      if (reset == 1'b1) begin
        sum1_28_1 <= 37'sh0000000000;
      end
      else begin
        if (enb) begin
          sum1_28_1 <= sum1_28;
        end
      end
    end



  assign adder_add_cast_102 = {sum1_27_1[36], sum1_27_1};
  assign adder_add_cast_103 = {sum1_28_1[36], sum1_28_1};
  assign sum2_14_temp = adder_add_cast_102 + adder_add_cast_103;



  assign sum2_14 = sum2_14_temp[36:0];



  always @(posedge clk or posedge reset)
    begin : dtc_out_buff_out_pipe_51_process
      if (reset == 1'b1) begin
        sum2_14_1 <= 37'sh0000000000;
      end
      else begin
        if (enb) begin
          sum2_14_1 <= sum2_14;
        end
      end
    end



  assign adder_add_cast_104 = {sum2_13_1[36], sum2_13_1};
  assign adder_add_cast_105 = {sum2_14_1[36], sum2_14_1};
  assign sum3_7_temp = adder_add_cast_104 + adder_add_cast_105;



  assign sum3_7 = sum3_7_temp[36:0];



  always @(posedge clk or posedge reset)
    begin : dtc_out_buff_out_pipe_52_process
      if (reset == 1'b1) begin
        sum3_7_1 <= 37'sh0000000000;
      end
      else begin
        if (enb) begin
          sum3_7_1 <= sum3_7;
        end
      end
    end



  assign delay_pipeline_17 = delay_pipeline_1[17];

  // coeff19
  assign product19 = {delay_pipeline_17[15], {delay_pipeline_17, 14'b00000000000000}};



  assign delay_pipeline_16 = delay_pipeline_1[16];

  // coeff18
  assign product18 = {delay_pipeline_16[15], {delay_pipeline_16, 14'b00000000000000}};



  always @(posedge clk or posedge reset)
    begin : product19_out_pipe_process
      if (reset == 1'b1) begin
        product19_out_pipe_1 <= 31'sb0000000000000000000000000000000;
      end
      else begin
        if (enb) begin
          product19_out_pipe_1 <= product19;
        end
      end
    end



  assign sum1_29_cast1 = {{6{product19_out_pipe_1[30]}}, product19_out_pipe_1};



  always @(posedge clk or posedge reset)
    begin : product18_out_pipe_process
      if (reset == 1'b1) begin
        product18_out_pipe_1 <= 31'sb0000000000000000000000000000000;
      end
      else begin
        if (enb) begin
          product18_out_pipe_1 <= product18;
        end
      end
    end



  assign sum1_29_cast2 = {{6{product18_out_pipe_1[30]}}, product18_out_pipe_1};



  assign adder_add_cast_106 = {sum1_29_cast1[36], sum1_29_cast1};
  assign adder_add_cast_107 = {sum1_29_cast2[36], sum1_29_cast2};
  assign sum1_29_temp = adder_add_cast_106 + adder_add_cast_107;



  assign sum1_29 = sum1_29_temp[36:0];



  always @(posedge clk or posedge reset)
    begin : dtc_out_buff_out_pipe_53_process
      if (reset == 1'b1) begin
        sum1_29_1 <= 37'sh0000000000;
      end
      else begin
        if (enb) begin
          sum1_29_1 <= sum1_29;
        end
      end
    end



  assign delay_pipeline_15 = delay_pipeline_1[15];

  // coeff17
  assign product17 = {delay_pipeline_15[15], {delay_pipeline_15, 14'b00000000000000}};



  assign delay_pipeline_14 = delay_pipeline_1[14];

  // coeff16
  assign product16 = {delay_pipeline_14[15], {delay_pipeline_14, 14'b00000000000000}};



  always @(posedge clk or posedge reset)
    begin : product17_out_pipe_process
      if (reset == 1'b1) begin
        product17_out_pipe_1 <= 31'sb0000000000000000000000000000000;
      end
      else begin
        if (enb) begin
          product17_out_pipe_1 <= product17;
        end
      end
    end



  assign sum1_30_cast1 = {{6{product17_out_pipe_1[30]}}, product17_out_pipe_1};



  always @(posedge clk or posedge reset)
    begin : product16_out_pipe_process
      if (reset == 1'b1) begin
        product16_out_pipe_1 <= 31'sb0000000000000000000000000000000;
      end
      else begin
        if (enb) begin
          product16_out_pipe_1 <= product16;
        end
      end
    end



  assign sum1_30_cast2 = {{6{product16_out_pipe_1[30]}}, product16_out_pipe_1};



  assign adder_add_cast_108 = {sum1_30_cast1[36], sum1_30_cast1};
  assign adder_add_cast_109 = {sum1_30_cast2[36], sum1_30_cast2};
  assign sum1_30_temp = adder_add_cast_108 + adder_add_cast_109;



  assign sum1_30 = sum1_30_temp[36:0];



  always @(posedge clk or posedge reset)
    begin : dtc_out_buff_out_pipe_54_process
      if (reset == 1'b1) begin
        sum1_30_1 <= 37'sh0000000000;
      end
      else begin
        if (enb) begin
          sum1_30_1 <= sum1_30;
        end
      end
    end



  assign adder_add_cast_110 = {sum1_29_1[36], sum1_29_1};
  assign adder_add_cast_111 = {sum1_30_1[36], sum1_30_1};
  assign sum2_15_temp = adder_add_cast_110 + adder_add_cast_111;



  assign sum2_15 = sum2_15_temp[36:0];



  always @(posedge clk or posedge reset)
    begin : dtc_out_buff_out_pipe_55_process
      if (reset == 1'b1) begin
        sum2_15_1 <= 37'sh0000000000;
      end
      else begin
        if (enb) begin
          sum2_15_1 <= sum2_15;
        end
      end
    end



  assign delay_pipeline_13 = delay_pipeline_1[13];

  // coeff15
  assign product15 = {delay_pipeline_13[15], {delay_pipeline_13, 14'b00000000000000}};



  assign delay_pipeline_12 = delay_pipeline_1[12];

  // coeff14
  assign product14 = {delay_pipeline_12[15], {delay_pipeline_12, 14'b00000000000000}};



  always @(posedge clk or posedge reset)
    begin : product15_out_pipe_process
      if (reset == 1'b1) begin
        product15_out_pipe_1 <= 31'sb0000000000000000000000000000000;
      end
      else begin
        if (enb) begin
          product15_out_pipe_1 <= product15;
        end
      end
    end



  assign sum1_31_cast1 = {{6{product15_out_pipe_1[30]}}, product15_out_pipe_1};



  always @(posedge clk or posedge reset)
    begin : product14_out_pipe_process
      if (reset == 1'b1) begin
        product14_out_pipe_1 <= 31'sb0000000000000000000000000000000;
      end
      else begin
        if (enb) begin
          product14_out_pipe_1 <= product14;
        end
      end
    end



  assign sum1_31_cast2 = {{6{product14_out_pipe_1[30]}}, product14_out_pipe_1};



  assign adder_add_cast_112 = {sum1_31_cast1[36], sum1_31_cast1};
  assign adder_add_cast_113 = {sum1_31_cast2[36], sum1_31_cast2};
  assign sum1_31_temp = adder_add_cast_112 + adder_add_cast_113;



  assign sum1_31 = sum1_31_temp[36:0];



  always @(posedge clk or posedge reset)
    begin : dtc_out_buff_out_pipe_56_process
      if (reset == 1'b1) begin
        sum1_31_1 <= 37'sh0000000000;
      end
      else begin
        if (enb) begin
          sum1_31_1 <= sum1_31;
        end
      end
    end



  assign delay_pipeline_11 = delay_pipeline_1[11];

  // coeff13
  assign gain_cast_111 = {delay_pipeline_11[15], delay_pipeline_11};
  assign gain_cast_112 =  - (gain_cast_111);
  assign gain_cast_113 = {gain_cast_112[16], {gain_cast_112, 14'b00000000000000}};
  assign product13 = gain_cast_113[30:0];



  assign delay_pipeline_10 = delay_pipeline_1[10];

  // coeff12
  assign gain_cast_114 = {delay_pipeline_10[15], delay_pipeline_10};
  assign gain_cast_115 =  - (gain_cast_114);
  assign gain_cast_116 = {gain_cast_115[16], {gain_cast_115, 14'b00000000000000}};
  assign product12 = gain_cast_116[30:0];



  always @(posedge clk or posedge reset)
    begin : product13_out_pipe_process
      if (reset == 1'b1) begin
        product13_out_pipe_1 <= 31'sb0000000000000000000000000000000;
      end
      else begin
        if (enb) begin
          product13_out_pipe_1 <= product13;
        end
      end
    end



  assign sum1_32_cast1 = {{6{product13_out_pipe_1[30]}}, product13_out_pipe_1};



  always @(posedge clk or posedge reset)
    begin : product12_out_pipe_process
      if (reset == 1'b1) begin
        product12_out_pipe_1 <= 31'sb0000000000000000000000000000000;
      end
      else begin
        if (enb) begin
          product12_out_pipe_1 <= product12;
        end
      end
    end



  assign sum1_32_cast2 = {{6{product12_out_pipe_1[30]}}, product12_out_pipe_1};



  assign adder_add_cast_114 = {sum1_32_cast1[36], sum1_32_cast1};
  assign adder_add_cast_115 = {sum1_32_cast2[36], sum1_32_cast2};
  assign sum1_32_temp = adder_add_cast_114 + adder_add_cast_115;



  assign sum1_32 = sum1_32_temp[36:0];



  always @(posedge clk or posedge reset)
    begin : dtc_out_buff_out_pipe_57_process
      if (reset == 1'b1) begin
        sum1_32_1 <= 37'sh0000000000;
      end
      else begin
        if (enb) begin
          sum1_32_1 <= sum1_32;
        end
      end
    end



  assign adder_add_cast_116 = {sum1_31_1[36], sum1_31_1};
  assign adder_add_cast_117 = {sum1_32_1[36], sum1_32_1};
  assign sum2_16_temp = adder_add_cast_116 + adder_add_cast_117;



  assign sum2_16 = sum2_16_temp[36:0];



  always @(posedge clk or posedge reset)
    begin : dtc_out_buff_out_pipe_58_process
      if (reset == 1'b1) begin
        sum2_16_1 <= 37'sh0000000000;
      end
      else begin
        if (enb) begin
          sum2_16_1 <= sum2_16;
        end
      end
    end



  assign adder_add_cast_118 = {sum2_15_1[36], sum2_15_1};
  assign adder_add_cast_119 = {sum2_16_1[36], sum2_16_1};
  assign sum3_8_temp = adder_add_cast_118 + adder_add_cast_119;



  assign sum3_8 = sum3_8_temp[36:0];



  always @(posedge clk or posedge reset)
    begin : dtc_out_buff_out_pipe_59_process
      if (reset == 1'b1) begin
        sum3_8_1 <= 37'sh0000000000;
      end
      else begin
        if (enb) begin
          sum3_8_1 <= sum3_8;
        end
      end
    end



  assign adder_add_cast_120 = {sum3_7_1[36], sum3_7_1};
  assign adder_add_cast_121 = {sum3_8_1[36], sum3_8_1};
  assign sum4_4_temp = adder_add_cast_120 + adder_add_cast_121;



  assign sum4_4 = sum4_4_temp[36:0];



  always @(posedge clk or posedge reset)
    begin : dtc_out_buff_out_pipe_60_process
      if (reset == 1'b1) begin
        sum4_4_1 <= 37'sh0000000000;
      end
      else begin
        if (enb) begin
          sum4_4_1 <= sum4_4;
        end
      end
    end



  assign adder_add_cast_122 = {sum4_3_1[36], sum4_3_1};
  assign adder_add_cast_123 = {sum4_4_1[36], sum4_4_1};
  assign sum5_2_temp = adder_add_cast_122 + adder_add_cast_123;



  assign sum5_2 = sum5_2_temp[36:0];



  always @(posedge clk or posedge reset)
    begin : dtc_out_buff_out_pipe_61_process
      if (reset == 1'b1) begin
        sum5_2_1 <= 37'sh0000000000;
      end
      else begin
        if (enb) begin
          sum5_2_1 <= sum5_2;
        end
      end
    end



  assign adder_add_cast_124 = {sum5_1_1[36], sum5_1_1};
  assign adder_add_cast_125 = {sum5_2_1[36], sum5_2_1};
  assign sum6_1_temp = adder_add_cast_124 + adder_add_cast_125;



  assign sum6_1 = sum6_1_temp[36:0];



  always @(posedge clk or posedge reset)
    begin : dtc_out_buff_out_pipe_62_process
      if (reset == 1'b1) begin
        sum6_1_1 <= 37'sh0000000000;
      end
      else begin
        if (enb) begin
          sum6_1_1 <= sum6_1;
        end
      end
    end



  assign delay_pipeline_9 = delay_pipeline_1[9];

  // coeff11
  assign gain_cast_117 = {delay_pipeline_9[15], delay_pipeline_9};
  assign gain_cast_118 =  - (gain_cast_117);
  assign gain_cast_119 = {gain_cast_118[16], {gain_cast_118, 14'b00000000000000}};
  assign product11 = gain_cast_119[30:0];



  assign delay_pipeline_8 = delay_pipeline_1[8];

  // coeff10
  assign gain_cast_120 = {delay_pipeline_8[15], delay_pipeline_8};
  assign gain_cast_121 =  - (gain_cast_120);
  assign gain_cast_122 = {gain_cast_121[16], {gain_cast_121, 14'b00000000000000}};
  assign product10 = gain_cast_122[30:0];



  always @(posedge clk or posedge reset)
    begin : product11_out_pipe_process
      if (reset == 1'b1) begin
        product11_out_pipe_1 <= 31'sb0000000000000000000000000000000;
      end
      else begin
        if (enb) begin
          product11_out_pipe_1 <= product11;
        end
      end
    end



  assign sum1_33_cast1 = {{6{product11_out_pipe_1[30]}}, product11_out_pipe_1};



  always @(posedge clk or posedge reset)
    begin : product10_out_pipe_process
      if (reset == 1'b1) begin
        product10_out_pipe_1 <= 31'sb0000000000000000000000000000000;
      end
      else begin
        if (enb) begin
          product10_out_pipe_1 <= product10;
        end
      end
    end



  assign sum1_33_cast2 = {{6{product10_out_pipe_1[30]}}, product10_out_pipe_1};



  assign adder_add_cast_126 = {sum1_33_cast1[36], sum1_33_cast1};
  assign adder_add_cast_127 = {sum1_33_cast2[36], sum1_33_cast2};
  assign sum1_33_temp = adder_add_cast_126 + adder_add_cast_127;



  assign sum1_33 = sum1_33_temp[36:0];



  always @(posedge clk or posedge reset)
    begin : dtc_out_buff_out_pipe_63_process
      if (reset == 1'b1) begin
        sum1_33_1 <= 37'sh0000000000;
      end
      else begin
        if (enb) begin
          sum1_33_1 <= sum1_33;
        end
      end
    end



  assign delay_pipeline_7 = delay_pipeline_1[7];

  // coeff9
  assign gain_cast_123 = {delay_pipeline_7[15], delay_pipeline_7};
  assign gain_cast_124 =  - (gain_cast_123);
  assign gain_cast_125 = {gain_cast_124[16], {gain_cast_124, 14'b00000000000000}};
  assign product9 = gain_cast_125[30:0];



  assign delay_pipeline_6 = delay_pipeline_1[6];

  // coeff8
  assign gain_cast_126 = {delay_pipeline_6[15], delay_pipeline_6};
  assign gain_cast_127 =  - (gain_cast_126);
  assign gain_cast_128 = {gain_cast_127[16], {gain_cast_127, 14'b00000000000000}};
  assign product8 = gain_cast_128[30:0];



  always @(posedge clk or posedge reset)
    begin : product9_out_pipe_process
      if (reset == 1'b1) begin
        product9_out_pipe_1 <= 31'sb0000000000000000000000000000000;
      end
      else begin
        if (enb) begin
          product9_out_pipe_1 <= product9;
        end
      end
    end



  assign sum1_34_cast1 = {{6{product9_out_pipe_1[30]}}, product9_out_pipe_1};



  always @(posedge clk or posedge reset)
    begin : product8_out_pipe_process
      if (reset == 1'b1) begin
        product8_out_pipe_1 <= 31'sb0000000000000000000000000000000;
      end
      else begin
        if (enb) begin
          product8_out_pipe_1 <= product8;
        end
      end
    end



  assign sum1_34_cast2 = {{6{product8_out_pipe_1[30]}}, product8_out_pipe_1};



  assign adder_add_cast_128 = {sum1_34_cast1[36], sum1_34_cast1};
  assign adder_add_cast_129 = {sum1_34_cast2[36], sum1_34_cast2};
  assign sum1_34_temp = adder_add_cast_128 + adder_add_cast_129;



  assign sum1_34 = sum1_34_temp[36:0];



  always @(posedge clk or posedge reset)
    begin : dtc_out_buff_out_pipe_64_process
      if (reset == 1'b1) begin
        sum1_34_1 <= 37'sh0000000000;
      end
      else begin
        if (enb) begin
          sum1_34_1 <= sum1_34;
        end
      end
    end



  assign adder_add_cast_130 = {sum1_33_1[36], sum1_33_1};
  assign adder_add_cast_131 = {sum1_34_1[36], sum1_34_1};
  assign sum2_17_temp = adder_add_cast_130 + adder_add_cast_131;



  assign sum2_17 = sum2_17_temp[36:0];



  always @(posedge clk or posedge reset)
    begin : dtc_out_buff_out_pipe_65_process
      if (reset == 1'b1) begin
        sum2_17_1 <= 37'sh0000000000;
      end
      else begin
        if (enb) begin
          sum2_17_1 <= sum2_17;
        end
      end
    end



  assign delay_pipeline_5 = delay_pipeline_1[5];

  // coeff7
  assign gain_cast_129 = {delay_pipeline_5[15], delay_pipeline_5};
  assign gain_cast_130 =  - (gain_cast_129);
  assign gain_cast_131 = {gain_cast_130[16], {gain_cast_130, 14'b00000000000000}};
  assign product7 = gain_cast_131[30:0];



  assign delay_pipeline_4 = delay_pipeline_1[4];

  // coeff6
  assign gain_cast_132 = {delay_pipeline_4[15], delay_pipeline_4};
  assign gain_cast_133 =  - (gain_cast_132);
  assign gain_cast_134 = {gain_cast_133[16], {gain_cast_133, 14'b00000000000000}};
  assign product6 = gain_cast_134[30:0];



  always @(posedge clk or posedge reset)
    begin : product7_out_pipe_process
      if (reset == 1'b1) begin
        product7_out_pipe_1 <= 31'sb0000000000000000000000000000000;
      end
      else begin
        if (enb) begin
          product7_out_pipe_1 <= product7;
        end
      end
    end



  assign sum1_35_cast1 = {{6{product7_out_pipe_1[30]}}, product7_out_pipe_1};



  always @(posedge clk or posedge reset)
    begin : product6_out_pipe_process
      if (reset == 1'b1) begin
        product6_out_pipe_1 <= 31'sb0000000000000000000000000000000;
      end
      else begin
        if (enb) begin
          product6_out_pipe_1 <= product6;
        end
      end
    end



  assign sum1_35_cast2 = {{6{product6_out_pipe_1[30]}}, product6_out_pipe_1};



  assign adder_add_cast_132 = {sum1_35_cast1[36], sum1_35_cast1};
  assign adder_add_cast_133 = {sum1_35_cast2[36], sum1_35_cast2};
  assign sum1_35_temp = adder_add_cast_132 + adder_add_cast_133;



  assign sum1_35 = sum1_35_temp[36:0];



  always @(posedge clk or posedge reset)
    begin : dtc_out_buff_out_pipe_66_process
      if (reset == 1'b1) begin
        sum1_35_1 <= 37'sh0000000000;
      end
      else begin
        if (enb) begin
          sum1_35_1 <= sum1_35;
        end
      end
    end



  assign delay_pipeline_3 = delay_pipeline_1[3];

  // coeff5
  assign gain_cast_135 = {delay_pipeline_3[15], delay_pipeline_3};
  assign gain_cast_136 =  - (gain_cast_135);
  assign gain_cast_137 = {gain_cast_136[16], {gain_cast_136, 14'b00000000000000}};
  assign product5 = gain_cast_137[30:0];



  assign delay_pipeline_2 = delay_pipeline_1[2];

  // coeff4
  assign gain_cast_138 = {delay_pipeline_2[15], delay_pipeline_2};
  assign gain_cast_139 =  - (gain_cast_138);
  assign gain_cast_140 = {gain_cast_139[16], {gain_cast_139, 14'b00000000000000}};
  assign product4 = gain_cast_140[30:0];



  always @(posedge clk or posedge reset)
    begin : product5_out_pipe_process
      if (reset == 1'b1) begin
        product5_out_pipe_1 <= 31'sb0000000000000000000000000000000;
      end
      else begin
        if (enb) begin
          product5_out_pipe_1 <= product5;
        end
      end
    end



  assign sum1_36_cast1 = {{6{product5_out_pipe_1[30]}}, product5_out_pipe_1};



  always @(posedge clk or posedge reset)
    begin : product4_out_pipe_process
      if (reset == 1'b1) begin
        product4_out_pipe_1 <= 31'sb0000000000000000000000000000000;
      end
      else begin
        if (enb) begin
          product4_out_pipe_1 <= product4;
        end
      end
    end



  assign sum1_36_cast2 = {{6{product4_out_pipe_1[30]}}, product4_out_pipe_1};



  assign adder_add_cast_134 = {sum1_36_cast1[36], sum1_36_cast1};
  assign adder_add_cast_135 = {sum1_36_cast2[36], sum1_36_cast2};
  assign sum1_36_temp = adder_add_cast_134 + adder_add_cast_135;



  assign sum1_36 = sum1_36_temp[36:0];



  always @(posedge clk or posedge reset)
    begin : dtc_out_buff_out_pipe_67_process
      if (reset == 1'b1) begin
        sum1_36_1 <= 37'sh0000000000;
      end
      else begin
        if (enb) begin
          sum1_36_1 <= sum1_36;
        end
      end
    end



  assign adder_add_cast_136 = {sum1_35_1[36], sum1_35_1};
  assign adder_add_cast_137 = {sum1_36_1[36], sum1_36_1};
  assign sum2_18_temp = adder_add_cast_136 + adder_add_cast_137;



  assign sum2_18 = sum2_18_temp[36:0];



  always @(posedge clk or posedge reset)
    begin : dtc_out_buff_out_pipe_68_process
      if (reset == 1'b1) begin
        sum2_18_1 <= 37'sh0000000000;
      end
      else begin
        if (enb) begin
          sum2_18_1 <= sum2_18;
        end
      end
    end



  assign adder_add_cast_138 = {sum2_17_1[36], sum2_17_1};
  assign adder_add_cast_139 = {sum2_18_1[36], sum2_18_1};
  assign sum3_9_temp = adder_add_cast_138 + adder_add_cast_139;



  assign sum3_9 = sum3_9_temp[36:0];



  always @(posedge clk or posedge reset)
    begin : dtc_out_buff_out_pipe_69_process
      if (reset == 1'b1) begin
        sum3_9_1 <= 37'sh0000000000;
      end
      else begin
        if (enb) begin
          sum3_9_1 <= sum3_9;
        end
      end
    end



  assign delay_pipeline_1_1 = delay_pipeline_1[1];

  // coeff3
  assign gain_cast_141 = {delay_pipeline_1_1[15], delay_pipeline_1_1};
  assign gain_cast_142 =  - (gain_cast_141);
  assign gain_cast_143 = {gain_cast_142[16], {gain_cast_142, 14'b00000000000000}};
  assign product3 = gain_cast_143[30:0];



  assign delay_pipeline_0 = delay_pipeline_1[0];

  // coeff2
  assign gain_cast_144 = {delay_pipeline_0[15], delay_pipeline_0};
  assign gain_cast_145 =  - (gain_cast_144);
  assign gain_cast_146 = {gain_cast_145[16], {gain_cast_145, 14'b00000000000000}};
  assign product2 = gain_cast_146[30:0];



  always @(posedge clk or posedge reset)
    begin : product3_out_pipe_process
      if (reset == 1'b1) begin
        product3_out_pipe_1 <= 31'sb0000000000000000000000000000000;
      end
      else begin
        if (enb) begin
          product3_out_pipe_1 <= product3;
        end
      end
    end



  assign sum1_37_cast1 = {{6{product3_out_pipe_1[30]}}, product3_out_pipe_1};



  always @(posedge clk or posedge reset)
    begin : product2_out_pipe_process
      if (reset == 1'b1) begin
        product2_out_pipe_1 <= 31'sb0000000000000000000000000000000;
      end
      else begin
        if (enb) begin
          product2_out_pipe_1 <= product2;
        end
      end
    end



  assign sum1_37_cast2 = {{6{product2_out_pipe_1[30]}}, product2_out_pipe_1};



  assign adder_add_cast_140 = {sum1_37_cast1[36], sum1_37_cast1};
  assign adder_add_cast_141 = {sum1_37_cast2[36], sum1_37_cast2};
  assign sum1_37_temp = adder_add_cast_140 + adder_add_cast_141;



  assign sum1_37 = sum1_37_temp[36:0];



  // coeff1
  assign gain_cast_147 = {SyncCorr_in[15], SyncCorr_in};
  assign gain_cast_148 =  - (gain_cast_147);
  assign gain_cast_149 = {gain_cast_148[16], {gain_cast_148, 14'b00000000000000}};
  assign product1 = gain_cast_149[30:0];



  always @(posedge clk or posedge reset)
    begin : dtc_out_buff_out_pipe_70_process
      if (reset == 1'b1) begin
        sum1_37_1 <= 37'sh0000000000;
      end
      else begin
        if (enb) begin
          sum1_37_1 <= sum1_37;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : product1_out_buff_out_pipe_process
      if (reset == 1'b1) begin
        product1_out_buff_out_pipe_reg[0] <= 31'sb0000000000000000000000000000000;
        product1_out_buff_out_pipe_reg[1] <= 31'sb0000000000000000000000000000000;
      end
      else begin
        if (enb) begin
          product1_out_buff_out_pipe_reg[0] <= product1_out_buff_out_pipe_reg_next[0];
          product1_out_buff_out_pipe_reg[1] <= product1_out_buff_out_pipe_reg_next[1];
        end
      end
    end

  assign product1_out_pipe = product1_out_buff_out_pipe_reg[1];
  assign product1_out_buff_out_pipe_reg_next[0] = product1;
  assign product1_out_buff_out_pipe_reg_next[1] = product1_out_buff_out_pipe_reg[0];



  assign sum2_19_cast2 = {{6{product1_out_pipe[30]}}, product1_out_pipe};



  assign adder_add_cast_142 = {sum1_37_1[36], sum1_37_1};
  assign adder_add_cast_143 = {sum2_19_cast2[36], sum2_19_cast2};
  assign sum2_19_temp = adder_add_cast_142 + adder_add_cast_143;



  assign sum2_19 = sum2_19_temp[36:0];



  always @(posedge clk or posedge reset)
    begin : dtc_out_buff_out_buff_out_pipe_process
      if (reset == 1'b1) begin
        dtc_out_buff_out_buff_out_pipe_reg[0] <= 37'sh0000000000;
        dtc_out_buff_out_buff_out_pipe_reg[1] <= 37'sh0000000000;
      end
      else begin
        if (enb) begin
          dtc_out_buff_out_buff_out_pipe_reg[0] <= dtc_out_buff_out_buff_out_pipe_reg_next[0];
          dtc_out_buff_out_buff_out_pipe_reg[1] <= dtc_out_buff_out_buff_out_pipe_reg_next[1];
        end
      end
    end

  assign sum2_19_1 = dtc_out_buff_out_buff_out_pipe_reg[1];
  assign dtc_out_buff_out_buff_out_pipe_reg_next[0] = sum2_19;
  assign dtc_out_buff_out_buff_out_pipe_reg_next[1] = dtc_out_buff_out_buff_out_pipe_reg[0];



  assign adder_add_cast_144 = {sum3_9_1[36], sum3_9_1};
  assign adder_add_cast_145 = {sum2_19_1[36], sum2_19_1};
  assign sum4_5_temp = adder_add_cast_144 + adder_add_cast_145;



  assign sum4_5 = sum4_5_temp[36:0];



  always @(posedge clk or posedge reset)
    begin : dtc_out_buff_out_buff_out_buff_out_pipe_process
      if (reset == 1'b1) begin
        dtc_out_buff_out_buff_out_buff_out_pipe_reg[0] <= 37'sh0000000000;
        dtc_out_buff_out_buff_out_buff_out_pipe_reg[1] <= 37'sh0000000000;
        dtc_out_buff_out_buff_out_buff_out_pipe_reg[2] <= 37'sh0000000000;
      end
      else begin
        if (enb) begin
          dtc_out_buff_out_buff_out_buff_out_pipe_reg[0] <= dtc_out_buff_out_buff_out_buff_out_pipe_reg_next[0];
          dtc_out_buff_out_buff_out_buff_out_pipe_reg[1] <= dtc_out_buff_out_buff_out_buff_out_pipe_reg_next[1];
          dtc_out_buff_out_buff_out_buff_out_pipe_reg[2] <= dtc_out_buff_out_buff_out_buff_out_pipe_reg_next[2];
        end
      end
    end

  assign sum4_5_1 = dtc_out_buff_out_buff_out_buff_out_pipe_reg[2];
  assign dtc_out_buff_out_buff_out_buff_out_pipe_reg_next[0] = sum4_5;
  assign dtc_out_buff_out_buff_out_buff_out_pipe_reg_next[1] = dtc_out_buff_out_buff_out_buff_out_pipe_reg[0];
  assign dtc_out_buff_out_buff_out_buff_out_pipe_reg_next[2] = dtc_out_buff_out_buff_out_buff_out_pipe_reg[1];



  assign adder_add_cast_146 = {sum6_1_1[36], sum6_1_1};
  assign adder_add_cast_147 = {sum4_5_1[36], sum4_5_1};
  assign sum7_1_temp = adder_add_cast_146 + adder_add_cast_147;



  assign sum7_1 = sum7_1_temp[36:0];



  always @(posedge clk or posedge reset)
    begin : dtc_out_buff_out_pipe_71_process
      if (reset == 1'b1) begin
        sum7_1_1 <= 37'sh0000000000;
      end
      else begin
        if (enb) begin
          sum7_1_1 <= sum7_1;
        end
      end
    end



  assign output_typeconvert = sum7_1_1[33:18];



  assign SyncCorr_out = output_typeconvert;

endmodule  // Detector_ip_src_SyncCorr


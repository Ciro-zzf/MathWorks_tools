// -------------------------------------------------------------
// 
// File Name: hdl_prj\hdlsrc\ModeS_ADI_Codegen\Detector_ip_src_crc24f.v
// Created: 2017-07-24 12:12:58
// 
// Generated by MATLAB 9.2 and HDL Coder 3.10
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: Detector_ip_src_crc24f
// Source Path: ModeS_ADI_Codegen/Detector/CalcCRC/crc24f
// Hierarchy Level: 2
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module Detector_ip_src_crc24f
          (clk,
           reset,
           enb,
           bits_in,
           flag88,
           reset_1,
           crc_out);


  input   clk;
  input   reset;
  input   enb;
  input   bits_in;
  input   flag88;
  input   reset_1;
  output  crc_out;

  wire Constant_out1;
  wire Switch1_out1;
  reg  x0_switch_delay;  // ufix1
  wire x0_out1;
  reg  x1_switch_delay;  // ufix1
  wire x1_out1;
  reg  x2_switch_delay;  // ufix1
  wire x2_out1;
  wire g3_out1;
  reg  x3_switch_delay;  // ufix1
  wire x3_out1;
  reg  x4_switch_delay;  // ufix1
  wire x4_out1;
  reg  x5_switch_delay;  // ufix1
  wire x5_out1;
  reg  x6_switch_delay;  // ufix1
  wire x6_out1;
  reg  x7_switch_delay;  // ufix1
  wire x7_out1;
  reg  x8_switch_delay;  // ufix1
  wire x8_out1;
  reg  x9_switch_delay;  // ufix1
  wire x9_out1;
  wire g10_out1;
  reg  x10_switch_delay;  // ufix1
  wire x10_out1;
  reg  x11_switch_delay;  // ufix1
  wire x11_out1;
  wire g12_out1;
  reg  x12_switch_delay;  // ufix1
  wire x12_out1;
  wire g13_out1;
  reg  x13_switch_delay;  // ufix1
  wire x13_out1;
  wire g14_out1;
  reg  x14_switch_delay;  // ufix1
  wire x14_out1;
  wire g15_out1;
  reg  x15_switch_delay;  // ufix1
  wire x15_out1;
  wire g16_out1;
  reg  x16_switch_delay;  // ufix1
  wire x16_out1;
  wire g17_out1;
  reg  x17_switch_delay;  // ufix1
  wire x17_out1;
  wire g18_out1;
  reg  x18_switch_delay;  // ufix1
  wire x18_out1;
  wire g19_out1;
  reg  x19_switch_delay;  // ufix1
  wire x19_out1;
  wire g20_out1;
  reg  x20_switch_delay;  // ufix1
  wire x20_out1;
  wire g21_out1;
  reg  x21_switch_delay;  // ufix1
  wire x21_out1;
  wire g22_out1;
  reg  x22_switch_delay;  // ufix1
  wire x22_out1;
  wire x23_out1;
  wire g0_out1;
  wire g23_out1;
  reg  x23_switch_delay;  // ufix1
  wire Switch2_out1;


  // <S20>/Constant
  assign Constant_out1 = 1'b0;



  // <S20>/x0
  always @(posedge clk or posedge reset)
    begin : x0_process
      if (reset == 1'b1) begin
        x0_switch_delay <= 1'b0;
      end
      else begin
        if (enb) begin
          if (reset_1 == 1'b1) begin
            x0_switch_delay <= 1'b0;
          end
          else begin
            x0_switch_delay <= Switch1_out1;
          end
        end
      end
    end

  assign x0_out1 = (reset_1 == 1'b1 ? 1'b0 :
              x0_switch_delay);



  // <S20>/x1
  always @(posedge clk or posedge reset)
    begin : x1_process
      if (reset == 1'b1) begin
        x1_switch_delay <= 1'b0;
      end
      else begin
        if (enb) begin
          if (reset_1 == 1'b1) begin
            x1_switch_delay <= 1'b0;
          end
          else begin
            x1_switch_delay <= x0_out1;
          end
        end
      end
    end

  assign x1_out1 = (reset_1 == 1'b1 ? 1'b0 :
              x1_switch_delay);



  // <S20>/x2
  always @(posedge clk or posedge reset)
    begin : x2_process
      if (reset == 1'b1) begin
        x2_switch_delay <= 1'b0;
      end
      else begin
        if (enb) begin
          if (reset_1 == 1'b1) begin
            x2_switch_delay <= 1'b0;
          end
          else begin
            x2_switch_delay <= x1_out1;
          end
        end
      end
    end

  assign x2_out1 = (reset_1 == 1'b1 ? 1'b0 :
              x2_switch_delay);



  // <S20>/g3
  assign g3_out1 = Switch1_out1 ^ x2_out1;



  // <S20>/x3
  always @(posedge clk or posedge reset)
    begin : x3_process
      if (reset == 1'b1) begin
        x3_switch_delay <= 1'b0;
      end
      else begin
        if (enb) begin
          if (reset_1 == 1'b1) begin
            x3_switch_delay <= 1'b0;
          end
          else begin
            x3_switch_delay <= g3_out1;
          end
        end
      end
    end

  assign x3_out1 = (reset_1 == 1'b1 ? 1'b0 :
              x3_switch_delay);



  // <S20>/x4
  always @(posedge clk or posedge reset)
    begin : x4_process
      if (reset == 1'b1) begin
        x4_switch_delay <= 1'b0;
      end
      else begin
        if (enb) begin
          if (reset_1 == 1'b1) begin
            x4_switch_delay <= 1'b0;
          end
          else begin
            x4_switch_delay <= x3_out1;
          end
        end
      end
    end

  assign x4_out1 = (reset_1 == 1'b1 ? 1'b0 :
              x4_switch_delay);



  // <S20>/x5
  always @(posedge clk or posedge reset)
    begin : x5_process
      if (reset == 1'b1) begin
        x5_switch_delay <= 1'b0;
      end
      else begin
        if (enb) begin
          if (reset_1 == 1'b1) begin
            x5_switch_delay <= 1'b0;
          end
          else begin
            x5_switch_delay <= x4_out1;
          end
        end
      end
    end

  assign x5_out1 = (reset_1 == 1'b1 ? 1'b0 :
              x5_switch_delay);



  // <S20>/x6
  always @(posedge clk or posedge reset)
    begin : x6_process
      if (reset == 1'b1) begin
        x6_switch_delay <= 1'b0;
      end
      else begin
        if (enb) begin
          if (reset_1 == 1'b1) begin
            x6_switch_delay <= 1'b0;
          end
          else begin
            x6_switch_delay <= x5_out1;
          end
        end
      end
    end

  assign x6_out1 = (reset_1 == 1'b1 ? 1'b0 :
              x6_switch_delay);



  // <S20>/x7
  always @(posedge clk or posedge reset)
    begin : x7_process
      if (reset == 1'b1) begin
        x7_switch_delay <= 1'b0;
      end
      else begin
        if (enb) begin
          if (reset_1 == 1'b1) begin
            x7_switch_delay <= 1'b0;
          end
          else begin
            x7_switch_delay <= x6_out1;
          end
        end
      end
    end

  assign x7_out1 = (reset_1 == 1'b1 ? 1'b0 :
              x7_switch_delay);



  // <S20>/x8
  always @(posedge clk or posedge reset)
    begin : x8_process
      if (reset == 1'b1) begin
        x8_switch_delay <= 1'b0;
      end
      else begin
        if (enb) begin
          if (reset_1 == 1'b1) begin
            x8_switch_delay <= 1'b0;
          end
          else begin
            x8_switch_delay <= x7_out1;
          end
        end
      end
    end

  assign x8_out1 = (reset_1 == 1'b1 ? 1'b0 :
              x8_switch_delay);



  // <S20>/x9
  always @(posedge clk or posedge reset)
    begin : x9_process
      if (reset == 1'b1) begin
        x9_switch_delay <= 1'b0;
      end
      else begin
        if (enb) begin
          if (reset_1 == 1'b1) begin
            x9_switch_delay <= 1'b0;
          end
          else begin
            x9_switch_delay <= x8_out1;
          end
        end
      end
    end

  assign x9_out1 = (reset_1 == 1'b1 ? 1'b0 :
              x9_switch_delay);



  // <S20>/g10
  assign g10_out1 = Switch1_out1 ^ x9_out1;



  // <S20>/x10
  always @(posedge clk or posedge reset)
    begin : x10_process
      if (reset == 1'b1) begin
        x10_switch_delay <= 1'b0;
      end
      else begin
        if (enb) begin
          if (reset_1 == 1'b1) begin
            x10_switch_delay <= 1'b0;
          end
          else begin
            x10_switch_delay <= g10_out1;
          end
        end
      end
    end

  assign x10_out1 = (reset_1 == 1'b1 ? 1'b0 :
              x10_switch_delay);



  // <S20>/x11
  always @(posedge clk or posedge reset)
    begin : x11_process
      if (reset == 1'b1) begin
        x11_switch_delay <= 1'b0;
      end
      else begin
        if (enb) begin
          if (reset_1 == 1'b1) begin
            x11_switch_delay <= 1'b0;
          end
          else begin
            x11_switch_delay <= x10_out1;
          end
        end
      end
    end

  assign x11_out1 = (reset_1 == 1'b1 ? 1'b0 :
              x11_switch_delay);



  // <S20>/g12
  assign g12_out1 = Switch1_out1 ^ x11_out1;



  // <S20>/x12
  always @(posedge clk or posedge reset)
    begin : x12_process
      if (reset == 1'b1) begin
        x12_switch_delay <= 1'b0;
      end
      else begin
        if (enb) begin
          if (reset_1 == 1'b1) begin
            x12_switch_delay <= 1'b0;
          end
          else begin
            x12_switch_delay <= g12_out1;
          end
        end
      end
    end

  assign x12_out1 = (reset_1 == 1'b1 ? 1'b0 :
              x12_switch_delay);



  // <S20>/g13
  assign g13_out1 = Switch1_out1 ^ x12_out1;



  // <S20>/x13
  always @(posedge clk or posedge reset)
    begin : x13_process
      if (reset == 1'b1) begin
        x13_switch_delay <= 1'b0;
      end
      else begin
        if (enb) begin
          if (reset_1 == 1'b1) begin
            x13_switch_delay <= 1'b0;
          end
          else begin
            x13_switch_delay <= g13_out1;
          end
        end
      end
    end

  assign x13_out1 = (reset_1 == 1'b1 ? 1'b0 :
              x13_switch_delay);



  // <S20>/g14
  assign g14_out1 = Switch1_out1 ^ x13_out1;



  // <S20>/x14
  always @(posedge clk or posedge reset)
    begin : x14_process
      if (reset == 1'b1) begin
        x14_switch_delay <= 1'b0;
      end
      else begin
        if (enb) begin
          if (reset_1 == 1'b1) begin
            x14_switch_delay <= 1'b0;
          end
          else begin
            x14_switch_delay <= g14_out1;
          end
        end
      end
    end

  assign x14_out1 = (reset_1 == 1'b1 ? 1'b0 :
              x14_switch_delay);



  // <S20>/g15
  assign g15_out1 = Switch1_out1 ^ x14_out1;



  // <S20>/x15
  always @(posedge clk or posedge reset)
    begin : x15_process
      if (reset == 1'b1) begin
        x15_switch_delay <= 1'b0;
      end
      else begin
        if (enb) begin
          if (reset_1 == 1'b1) begin
            x15_switch_delay <= 1'b0;
          end
          else begin
            x15_switch_delay <= g15_out1;
          end
        end
      end
    end

  assign x15_out1 = (reset_1 == 1'b1 ? 1'b0 :
              x15_switch_delay);



  // <S20>/g16
  assign g16_out1 = Switch1_out1 ^ x15_out1;



  // <S20>/x16
  always @(posedge clk or posedge reset)
    begin : x16_process
      if (reset == 1'b1) begin
        x16_switch_delay <= 1'b0;
      end
      else begin
        if (enb) begin
          if (reset_1 == 1'b1) begin
            x16_switch_delay <= 1'b0;
          end
          else begin
            x16_switch_delay <= g16_out1;
          end
        end
      end
    end

  assign x16_out1 = (reset_1 == 1'b1 ? 1'b0 :
              x16_switch_delay);



  // <S20>/g17
  assign g17_out1 = Switch1_out1 ^ x16_out1;



  // <S20>/x17
  always @(posedge clk or posedge reset)
    begin : x17_process
      if (reset == 1'b1) begin
        x17_switch_delay <= 1'b0;
      end
      else begin
        if (enb) begin
          if (reset_1 == 1'b1) begin
            x17_switch_delay <= 1'b0;
          end
          else begin
            x17_switch_delay <= g17_out1;
          end
        end
      end
    end

  assign x17_out1 = (reset_1 == 1'b1 ? 1'b0 :
              x17_switch_delay);



  // <S20>/g18
  assign g18_out1 = Switch1_out1 ^ x17_out1;



  // <S20>/x18
  always @(posedge clk or posedge reset)
    begin : x18_process
      if (reset == 1'b1) begin
        x18_switch_delay <= 1'b0;
      end
      else begin
        if (enb) begin
          if (reset_1 == 1'b1) begin
            x18_switch_delay <= 1'b0;
          end
          else begin
            x18_switch_delay <= g18_out1;
          end
        end
      end
    end

  assign x18_out1 = (reset_1 == 1'b1 ? 1'b0 :
              x18_switch_delay);



  // <S20>/g19
  assign g19_out1 = Switch1_out1 ^ x18_out1;



  // <S20>/x19
  always @(posedge clk or posedge reset)
    begin : x19_process
      if (reset == 1'b1) begin
        x19_switch_delay <= 1'b0;
      end
      else begin
        if (enb) begin
          if (reset_1 == 1'b1) begin
            x19_switch_delay <= 1'b0;
          end
          else begin
            x19_switch_delay <= g19_out1;
          end
        end
      end
    end

  assign x19_out1 = (reset_1 == 1'b1 ? 1'b0 :
              x19_switch_delay);



  // <S20>/g20
  assign g20_out1 = Switch1_out1 ^ x19_out1;



  // <S20>/x20
  always @(posedge clk or posedge reset)
    begin : x20_process
      if (reset == 1'b1) begin
        x20_switch_delay <= 1'b0;
      end
      else begin
        if (enb) begin
          if (reset_1 == 1'b1) begin
            x20_switch_delay <= 1'b0;
          end
          else begin
            x20_switch_delay <= g20_out1;
          end
        end
      end
    end

  assign x20_out1 = (reset_1 == 1'b1 ? 1'b0 :
              x20_switch_delay);



  // <S20>/g21
  assign g21_out1 = Switch1_out1 ^ x20_out1;



  // <S20>/x21
  always @(posedge clk or posedge reset)
    begin : x21_process
      if (reset == 1'b1) begin
        x21_switch_delay <= 1'b0;
      end
      else begin
        if (enb) begin
          if (reset_1 == 1'b1) begin
            x21_switch_delay <= 1'b0;
          end
          else begin
            x21_switch_delay <= g21_out1;
          end
        end
      end
    end

  assign x21_out1 = (reset_1 == 1'b1 ? 1'b0 :
              x21_switch_delay);



  // <S20>/g22
  assign g22_out1 = Switch1_out1 ^ x21_out1;



  // <S20>/x22
  always @(posedge clk or posedge reset)
    begin : x22_process
      if (reset == 1'b1) begin
        x22_switch_delay <= 1'b0;
      end
      else begin
        if (enb) begin
          if (reset_1 == 1'b1) begin
            x22_switch_delay <= 1'b0;
          end
          else begin
            x22_switch_delay <= g22_out1;
          end
        end
      end
    end

  assign x22_out1 = (reset_1 == 1'b1 ? 1'b0 :
              x22_switch_delay);



  // <S20>/g0
  assign g0_out1 = x23_out1 ^ bits_in;



  // <S20>/Switch1
  assign Switch1_out1 = (flag88 == 1'b0 ? g0_out1 :
              Constant_out1);



  // <S20>/g23
  assign g23_out1 = Switch1_out1 ^ x22_out1;



  // <S20>/x23
  always @(posedge clk or posedge reset)
    begin : x23_process
      if (reset == 1'b1) begin
        x23_switch_delay <= 1'b0;
      end
      else begin
        if (enb) begin
          if (reset_1 == 1'b1) begin
            x23_switch_delay <= 1'b0;
          end
          else begin
            x23_switch_delay <= g23_out1;
          end
        end
      end
    end

  assign x23_out1 = (reset_1 == 1'b1 ? 1'b0 :
              x23_switch_delay);



  // <S20>/Switch2
  assign Switch2_out1 = (flag88 == 1'b0 ? bits_in :
              x23_out1);



  assign crc_out = Switch2_out1;

endmodule  // Detector_ip_src_crc24f


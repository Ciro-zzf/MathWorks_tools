// -------------------------------------------------------------
// 
// File Name: hdl_prj\hdlsrc\ModeS_ADI_Codegen\Detector_ip.v
// Created: 2017-07-24 12:13:03
// 
// Generated by MATLAB 9.2 and HDL Coder 3.10
// 
// 
// -- -------------------------------------------------------------
// -- Rate and Clocking Details
// -- -------------------------------------------------------------
// Model base rate: -1
// Target subsystem base rate: -1
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: Detector_ip
// Source Path: Detector_ip
// Hierarchy Level: 0
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module Detector_ip
          (IPCORE_CLK,
           IPCORE_RESETN,
           sys_wfifo_0_dma_wdata,
           sys_wfifo_1_dma_wdata,
           AXI4_Lite_ACLK,
           AXI4_Lite_ARESETN,
           AXI4_Lite_AWADDR,
           AXI4_Lite_AWVALID,
           AXI4_Lite_WDATA,
           AXI4_Lite_WSTRB,
           AXI4_Lite_WVALID,
           AXI4_Lite_BREADY,
           AXI4_Lite_ARADDR,
           AXI4_Lite_ARVALID,
           AXI4_Lite_RREADY,
           dut_data_valid,
           dut_data_0,
           dut_data_1,
           AXI4_Lite_AWREADY,
           AXI4_Lite_WREADY,
           AXI4_Lite_BRESP,
           AXI4_Lite_BVALID,
           AXI4_Lite_ARREADY,
           AXI4_Lite_RDATA,
           AXI4_Lite_RRESP,
           AXI4_Lite_RVALID);


  input   IPCORE_CLK;  // ufix1
  input   IPCORE_RESETN;  // ufix1
  input   [15:0] sys_wfifo_0_dma_wdata;  // ufix16
  input   [15:0] sys_wfifo_1_dma_wdata;  // ufix16
  input   AXI4_Lite_ACLK;  // ufix1
  input   AXI4_Lite_ARESETN;  // ufix1
  input   [15:0] AXI4_Lite_AWADDR;  // ufix16
  input   AXI4_Lite_AWVALID;  // ufix1
  input   [31:0] AXI4_Lite_WDATA;  // ufix32
  input   [3:0] AXI4_Lite_WSTRB;  // ufix4
  input   AXI4_Lite_WVALID;  // ufix1
  input   AXI4_Lite_BREADY;  // ufix1
  input   [15:0] AXI4_Lite_ARADDR;  // ufix16
  input   AXI4_Lite_ARVALID;  // ufix1
  input   AXI4_Lite_RREADY;  // ufix1
  output  dut_data_valid;  // ufix1
  output  [15:0] dut_data_0;  // ufix16
  output  [15:0] dut_data_1;  // ufix16
  output  AXI4_Lite_AWREADY;  // ufix1
  output  AXI4_Lite_WREADY;  // ufix1
  output  [1:0] AXI4_Lite_BRESP;  // ufix2
  output  AXI4_Lite_BVALID;  // ufix1
  output  AXI4_Lite_ARREADY;  // ufix1
  output  [31:0] AXI4_Lite_RDATA;  // ufix32
  output  [1:0] AXI4_Lite_RRESP;  // ufix2
  output  AXI4_Lite_RVALID;  // ufix1

  wire reset;
  wire reset_cm;  // ufix1
  wire reset_internal;  // ufix1
  wire write_axi_enable;  // ufix1
  wire signed [15:0] I_In_sig;  // sfix16_En15
  wire signed [15:0] Q_In_sig;  // sfix16_En15
  wire ce_out_sig;  // ufix1
  wire reset_1_sig;  // ufix1
  wire bit_process_sig;  // ufix1
  wire empty_reg_sig;  // ufix1
  wire bit_clk_sig;  // ufix1
  wire bits_sig;  // ufix1
  wire crc_sig;  // ufix1
  wire signed [15:0] noise_floor_sig;  // sfix16_En16
  wire signed [15:0] sync_corr_sig;  // sfix16_En11
  wire [15:0] data_sig;  // ufix16
  wire [15:0] frame_valid_sig;  // ufix16


  assign reset_cm =  ~ IPCORE_RESETN;



  assign reset = reset_cm | reset_internal;



  Detector_ip_axi_lite u_Detector_ip_axi_lite_inst (.reset(reset),
                                                    .AXI4_Lite_ACLK(AXI4_Lite_ACLK),  // ufix1
                                                    .AXI4_Lite_ARESETN(AXI4_Lite_ARESETN),  // ufix1
                                                    .AXI4_Lite_AWADDR(AXI4_Lite_AWADDR),  // ufix16
                                                    .AXI4_Lite_AWVALID(AXI4_Lite_AWVALID),  // ufix1
                                                    .AXI4_Lite_WDATA(AXI4_Lite_WDATA),  // ufix32
                                                    .AXI4_Lite_WSTRB(AXI4_Lite_WSTRB),  // ufix4
                                                    .AXI4_Lite_WVALID(AXI4_Lite_WVALID),  // ufix1
                                                    .AXI4_Lite_BREADY(AXI4_Lite_BREADY),  // ufix1
                                                    .AXI4_Lite_ARADDR(AXI4_Lite_ARADDR),  // ufix16
                                                    .AXI4_Lite_ARVALID(AXI4_Lite_ARVALID),  // ufix1
                                                    .AXI4_Lite_RREADY(AXI4_Lite_RREADY),  // ufix1
                                                    .AXI4_Lite_AWREADY(AXI4_Lite_AWREADY),  // ufix1
                                                    .AXI4_Lite_WREADY(AXI4_Lite_WREADY),  // ufix1
                                                    .AXI4_Lite_BRESP(AXI4_Lite_BRESP),  // ufix2
                                                    .AXI4_Lite_BVALID(AXI4_Lite_BVALID),  // ufix1
                                                    .AXI4_Lite_ARREADY(AXI4_Lite_ARREADY),  // ufix1
                                                    .AXI4_Lite_RDATA(AXI4_Lite_RDATA),  // ufix32
                                                    .AXI4_Lite_RRESP(AXI4_Lite_RRESP),  // ufix2
                                                    .AXI4_Lite_RVALID(AXI4_Lite_RVALID),  // ufix1
                                                    .write_axi_enable(write_axi_enable),  // ufix1
                                                    .reset_internal(reset_internal)  // ufix1
                                                    );

  assign I_In_sig = sys_wfifo_0_dma_wdata;



  assign Q_In_sig = sys_wfifo_1_dma_wdata;



  Detector_ip_dut u_Detector_ip_dut_inst (.clk(IPCORE_CLK),  // ufix1
                                          .reset(reset),
                                          .dut_enable(write_axi_enable),  // ufix1
                                          .I_In(I_In_sig),  // sfix16_En15
                                          .Q_In(Q_In_sig),  // sfix16_En15
                                          .ce_out(ce_out_sig),  // ufix1
                                          .reset_1(reset_1_sig),  // ufix1
                                          .bit_process(bit_process_sig),  // ufix1
                                          .empty_reg(empty_reg_sig),  // ufix1
                                          .bit_clk(bit_clk_sig),  // ufix1
                                          .bits(bits_sig),  // ufix1
                                          .crc(crc_sig),  // ufix1
                                          .noise_floor(noise_floor_sig),  // sfix16_En16
                                          .sync_corr(sync_corr_sig),  // sfix16_En11
                                          .data(data_sig),  // ufix16
                                          .frame_valid(frame_valid_sig)  // ufix16
                                          );

  assign dut_data_valid = bit_clk_sig;

  assign dut_data_0 = data_sig;

  assign dut_data_1 = frame_valid_sig;

endmodule  // Detector_ip

